
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufSectionRAM 00000080  20000000  20000000  00006000  2**2
                  ALLOC
  2 .mysection    00000000  08018000  08018000  000050e8  2**0
                  CONTENTS
  3 .text         0000358c  080080bc  080080bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000a0  0800b648  0800b648  00004648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800b6e8  0800b6e8  000050e8  2**0
                  CONTENTS
  6 .ARM          00000008  0800b6e8  0800b6e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800b6f0  0800b6f0  000050e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800b6f0  0800b6f0  000046f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  0800b6f4  0800b6f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000068  20000080  0800b6f8  00005080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000204  200000e8  0800b760  000050e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200002ec  0800b760  000052ec  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  000050e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b2af  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d14  00000000  00000000  000103bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000900  00000000  00000000  000120d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006e0  00000000  00000000  000129d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000187ca  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bd65  00000000  00000000  0002b882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00098460  00000000  00000000  000375e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000cfa47  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000253c  00000000  00000000  000cfa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  000d1fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080bc <__do_global_dtors_aux>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	@ (80080d8 <__do_global_dtors_aux+0x1c>)
 80080c0:	7823      	ldrb	r3, [r4, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <__do_global_dtors_aux+0x1a>
 80080c6:	4b05      	ldr	r3, [pc, #20]	@ (80080dc <__do_global_dtors_aux+0x20>)
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <__do_global_dtors_aux+0x16>
 80080cc:	4804      	ldr	r0, [pc, #16]	@ (80080e0 <__do_global_dtors_aux+0x24>)
 80080ce:	e000      	b.n	80080d2 <__do_global_dtors_aux+0x16>
 80080d0:	bf00      	nop
 80080d2:	2301      	movs	r3, #1
 80080d4:	7023      	strb	r3, [r4, #0]
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	200000e8 	.word	0x200000e8
 80080dc:	00000000 	.word	0x00000000
 80080e0:	0800b630 	.word	0x0800b630

080080e4 <frame_dummy>:
 80080e4:	4b04      	ldr	r3, [pc, #16]	@ (80080f8 <frame_dummy+0x14>)
 80080e6:	b510      	push	{r4, lr}
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <frame_dummy+0x10>
 80080ec:	4903      	ldr	r1, [pc, #12]	@ (80080fc <frame_dummy+0x18>)
 80080ee:	4804      	ldr	r0, [pc, #16]	@ (8008100 <frame_dummy+0x1c>)
 80080f0:	e000      	b.n	80080f4 <frame_dummy+0x10>
 80080f2:	bf00      	nop
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	46c0      	nop			@ (mov r8, r8)
 80080f8:	00000000 	.word	0x00000000
 80080fc:	200000ec 	.word	0x200000ec
 8008100:	0800b630 	.word	0x0800b630

08008104 <__udivsi3>:
 8008104:	2200      	movs	r2, #0
 8008106:	0843      	lsrs	r3, r0, #1
 8008108:	428b      	cmp	r3, r1
 800810a:	d374      	bcc.n	80081f6 <__udivsi3+0xf2>
 800810c:	0903      	lsrs	r3, r0, #4
 800810e:	428b      	cmp	r3, r1
 8008110:	d35f      	bcc.n	80081d2 <__udivsi3+0xce>
 8008112:	0a03      	lsrs	r3, r0, #8
 8008114:	428b      	cmp	r3, r1
 8008116:	d344      	bcc.n	80081a2 <__udivsi3+0x9e>
 8008118:	0b03      	lsrs	r3, r0, #12
 800811a:	428b      	cmp	r3, r1
 800811c:	d328      	bcc.n	8008170 <__udivsi3+0x6c>
 800811e:	0c03      	lsrs	r3, r0, #16
 8008120:	428b      	cmp	r3, r1
 8008122:	d30d      	bcc.n	8008140 <__udivsi3+0x3c>
 8008124:	22ff      	movs	r2, #255	@ 0xff
 8008126:	0209      	lsls	r1, r1, #8
 8008128:	ba12      	rev	r2, r2
 800812a:	0c03      	lsrs	r3, r0, #16
 800812c:	428b      	cmp	r3, r1
 800812e:	d302      	bcc.n	8008136 <__udivsi3+0x32>
 8008130:	1212      	asrs	r2, r2, #8
 8008132:	0209      	lsls	r1, r1, #8
 8008134:	d065      	beq.n	8008202 <__udivsi3+0xfe>
 8008136:	0b03      	lsrs	r3, r0, #12
 8008138:	428b      	cmp	r3, r1
 800813a:	d319      	bcc.n	8008170 <__udivsi3+0x6c>
 800813c:	e000      	b.n	8008140 <__udivsi3+0x3c>
 800813e:	0a09      	lsrs	r1, r1, #8
 8008140:	0bc3      	lsrs	r3, r0, #15
 8008142:	428b      	cmp	r3, r1
 8008144:	d301      	bcc.n	800814a <__udivsi3+0x46>
 8008146:	03cb      	lsls	r3, r1, #15
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	4152      	adcs	r2, r2
 800814c:	0b83      	lsrs	r3, r0, #14
 800814e:	428b      	cmp	r3, r1
 8008150:	d301      	bcc.n	8008156 <__udivsi3+0x52>
 8008152:	038b      	lsls	r3, r1, #14
 8008154:	1ac0      	subs	r0, r0, r3
 8008156:	4152      	adcs	r2, r2
 8008158:	0b43      	lsrs	r3, r0, #13
 800815a:	428b      	cmp	r3, r1
 800815c:	d301      	bcc.n	8008162 <__udivsi3+0x5e>
 800815e:	034b      	lsls	r3, r1, #13
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	4152      	adcs	r2, r2
 8008164:	0b03      	lsrs	r3, r0, #12
 8008166:	428b      	cmp	r3, r1
 8008168:	d301      	bcc.n	800816e <__udivsi3+0x6a>
 800816a:	030b      	lsls	r3, r1, #12
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	4152      	adcs	r2, r2
 8008170:	0ac3      	lsrs	r3, r0, #11
 8008172:	428b      	cmp	r3, r1
 8008174:	d301      	bcc.n	800817a <__udivsi3+0x76>
 8008176:	02cb      	lsls	r3, r1, #11
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	4152      	adcs	r2, r2
 800817c:	0a83      	lsrs	r3, r0, #10
 800817e:	428b      	cmp	r3, r1
 8008180:	d301      	bcc.n	8008186 <__udivsi3+0x82>
 8008182:	028b      	lsls	r3, r1, #10
 8008184:	1ac0      	subs	r0, r0, r3
 8008186:	4152      	adcs	r2, r2
 8008188:	0a43      	lsrs	r3, r0, #9
 800818a:	428b      	cmp	r3, r1
 800818c:	d301      	bcc.n	8008192 <__udivsi3+0x8e>
 800818e:	024b      	lsls	r3, r1, #9
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	4152      	adcs	r2, r2
 8008194:	0a03      	lsrs	r3, r0, #8
 8008196:	428b      	cmp	r3, r1
 8008198:	d301      	bcc.n	800819e <__udivsi3+0x9a>
 800819a:	020b      	lsls	r3, r1, #8
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	4152      	adcs	r2, r2
 80081a0:	d2cd      	bcs.n	800813e <__udivsi3+0x3a>
 80081a2:	09c3      	lsrs	r3, r0, #7
 80081a4:	428b      	cmp	r3, r1
 80081a6:	d301      	bcc.n	80081ac <__udivsi3+0xa8>
 80081a8:	01cb      	lsls	r3, r1, #7
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	4152      	adcs	r2, r2
 80081ae:	0983      	lsrs	r3, r0, #6
 80081b0:	428b      	cmp	r3, r1
 80081b2:	d301      	bcc.n	80081b8 <__udivsi3+0xb4>
 80081b4:	018b      	lsls	r3, r1, #6
 80081b6:	1ac0      	subs	r0, r0, r3
 80081b8:	4152      	adcs	r2, r2
 80081ba:	0943      	lsrs	r3, r0, #5
 80081bc:	428b      	cmp	r3, r1
 80081be:	d301      	bcc.n	80081c4 <__udivsi3+0xc0>
 80081c0:	014b      	lsls	r3, r1, #5
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	4152      	adcs	r2, r2
 80081c6:	0903      	lsrs	r3, r0, #4
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d301      	bcc.n	80081d0 <__udivsi3+0xcc>
 80081cc:	010b      	lsls	r3, r1, #4
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	4152      	adcs	r2, r2
 80081d2:	08c3      	lsrs	r3, r0, #3
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d301      	bcc.n	80081dc <__udivsi3+0xd8>
 80081d8:	00cb      	lsls	r3, r1, #3
 80081da:	1ac0      	subs	r0, r0, r3
 80081dc:	4152      	adcs	r2, r2
 80081de:	0883      	lsrs	r3, r0, #2
 80081e0:	428b      	cmp	r3, r1
 80081e2:	d301      	bcc.n	80081e8 <__udivsi3+0xe4>
 80081e4:	008b      	lsls	r3, r1, #2
 80081e6:	1ac0      	subs	r0, r0, r3
 80081e8:	4152      	adcs	r2, r2
 80081ea:	0843      	lsrs	r3, r0, #1
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d301      	bcc.n	80081f4 <__udivsi3+0xf0>
 80081f0:	004b      	lsls	r3, r1, #1
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	4152      	adcs	r2, r2
 80081f6:	1a41      	subs	r1, r0, r1
 80081f8:	d200      	bcs.n	80081fc <__udivsi3+0xf8>
 80081fa:	4601      	mov	r1, r0
 80081fc:	4152      	adcs	r2, r2
 80081fe:	4610      	mov	r0, r2
 8008200:	4770      	bx	lr
 8008202:	e7ff      	b.n	8008204 <__udivsi3+0x100>
 8008204:	b501      	push	{r0, lr}
 8008206:	2000      	movs	r0, #0
 8008208:	f000 f8f0 	bl	80083ec <__aeabi_idiv0>
 800820c:	bd02      	pop	{r1, pc}
 800820e:	46c0      	nop			@ (mov r8, r8)

08008210 <__aeabi_uidivmod>:
 8008210:	2900      	cmp	r1, #0
 8008212:	d0f7      	beq.n	8008204 <__udivsi3+0x100>
 8008214:	e776      	b.n	8008104 <__udivsi3>
 8008216:	4770      	bx	lr

08008218 <__divsi3>:
 8008218:	4603      	mov	r3, r0
 800821a:	430b      	orrs	r3, r1
 800821c:	d47f      	bmi.n	800831e <__divsi3+0x106>
 800821e:	2200      	movs	r2, #0
 8008220:	0843      	lsrs	r3, r0, #1
 8008222:	428b      	cmp	r3, r1
 8008224:	d374      	bcc.n	8008310 <__divsi3+0xf8>
 8008226:	0903      	lsrs	r3, r0, #4
 8008228:	428b      	cmp	r3, r1
 800822a:	d35f      	bcc.n	80082ec <__divsi3+0xd4>
 800822c:	0a03      	lsrs	r3, r0, #8
 800822e:	428b      	cmp	r3, r1
 8008230:	d344      	bcc.n	80082bc <__divsi3+0xa4>
 8008232:	0b03      	lsrs	r3, r0, #12
 8008234:	428b      	cmp	r3, r1
 8008236:	d328      	bcc.n	800828a <__divsi3+0x72>
 8008238:	0c03      	lsrs	r3, r0, #16
 800823a:	428b      	cmp	r3, r1
 800823c:	d30d      	bcc.n	800825a <__divsi3+0x42>
 800823e:	22ff      	movs	r2, #255	@ 0xff
 8008240:	0209      	lsls	r1, r1, #8
 8008242:	ba12      	rev	r2, r2
 8008244:	0c03      	lsrs	r3, r0, #16
 8008246:	428b      	cmp	r3, r1
 8008248:	d302      	bcc.n	8008250 <__divsi3+0x38>
 800824a:	1212      	asrs	r2, r2, #8
 800824c:	0209      	lsls	r1, r1, #8
 800824e:	d065      	beq.n	800831c <__divsi3+0x104>
 8008250:	0b03      	lsrs	r3, r0, #12
 8008252:	428b      	cmp	r3, r1
 8008254:	d319      	bcc.n	800828a <__divsi3+0x72>
 8008256:	e000      	b.n	800825a <__divsi3+0x42>
 8008258:	0a09      	lsrs	r1, r1, #8
 800825a:	0bc3      	lsrs	r3, r0, #15
 800825c:	428b      	cmp	r3, r1
 800825e:	d301      	bcc.n	8008264 <__divsi3+0x4c>
 8008260:	03cb      	lsls	r3, r1, #15
 8008262:	1ac0      	subs	r0, r0, r3
 8008264:	4152      	adcs	r2, r2
 8008266:	0b83      	lsrs	r3, r0, #14
 8008268:	428b      	cmp	r3, r1
 800826a:	d301      	bcc.n	8008270 <__divsi3+0x58>
 800826c:	038b      	lsls	r3, r1, #14
 800826e:	1ac0      	subs	r0, r0, r3
 8008270:	4152      	adcs	r2, r2
 8008272:	0b43      	lsrs	r3, r0, #13
 8008274:	428b      	cmp	r3, r1
 8008276:	d301      	bcc.n	800827c <__divsi3+0x64>
 8008278:	034b      	lsls	r3, r1, #13
 800827a:	1ac0      	subs	r0, r0, r3
 800827c:	4152      	adcs	r2, r2
 800827e:	0b03      	lsrs	r3, r0, #12
 8008280:	428b      	cmp	r3, r1
 8008282:	d301      	bcc.n	8008288 <__divsi3+0x70>
 8008284:	030b      	lsls	r3, r1, #12
 8008286:	1ac0      	subs	r0, r0, r3
 8008288:	4152      	adcs	r2, r2
 800828a:	0ac3      	lsrs	r3, r0, #11
 800828c:	428b      	cmp	r3, r1
 800828e:	d301      	bcc.n	8008294 <__divsi3+0x7c>
 8008290:	02cb      	lsls	r3, r1, #11
 8008292:	1ac0      	subs	r0, r0, r3
 8008294:	4152      	adcs	r2, r2
 8008296:	0a83      	lsrs	r3, r0, #10
 8008298:	428b      	cmp	r3, r1
 800829a:	d301      	bcc.n	80082a0 <__divsi3+0x88>
 800829c:	028b      	lsls	r3, r1, #10
 800829e:	1ac0      	subs	r0, r0, r3
 80082a0:	4152      	adcs	r2, r2
 80082a2:	0a43      	lsrs	r3, r0, #9
 80082a4:	428b      	cmp	r3, r1
 80082a6:	d301      	bcc.n	80082ac <__divsi3+0x94>
 80082a8:	024b      	lsls	r3, r1, #9
 80082aa:	1ac0      	subs	r0, r0, r3
 80082ac:	4152      	adcs	r2, r2
 80082ae:	0a03      	lsrs	r3, r0, #8
 80082b0:	428b      	cmp	r3, r1
 80082b2:	d301      	bcc.n	80082b8 <__divsi3+0xa0>
 80082b4:	020b      	lsls	r3, r1, #8
 80082b6:	1ac0      	subs	r0, r0, r3
 80082b8:	4152      	adcs	r2, r2
 80082ba:	d2cd      	bcs.n	8008258 <__divsi3+0x40>
 80082bc:	09c3      	lsrs	r3, r0, #7
 80082be:	428b      	cmp	r3, r1
 80082c0:	d301      	bcc.n	80082c6 <__divsi3+0xae>
 80082c2:	01cb      	lsls	r3, r1, #7
 80082c4:	1ac0      	subs	r0, r0, r3
 80082c6:	4152      	adcs	r2, r2
 80082c8:	0983      	lsrs	r3, r0, #6
 80082ca:	428b      	cmp	r3, r1
 80082cc:	d301      	bcc.n	80082d2 <__divsi3+0xba>
 80082ce:	018b      	lsls	r3, r1, #6
 80082d0:	1ac0      	subs	r0, r0, r3
 80082d2:	4152      	adcs	r2, r2
 80082d4:	0943      	lsrs	r3, r0, #5
 80082d6:	428b      	cmp	r3, r1
 80082d8:	d301      	bcc.n	80082de <__divsi3+0xc6>
 80082da:	014b      	lsls	r3, r1, #5
 80082dc:	1ac0      	subs	r0, r0, r3
 80082de:	4152      	adcs	r2, r2
 80082e0:	0903      	lsrs	r3, r0, #4
 80082e2:	428b      	cmp	r3, r1
 80082e4:	d301      	bcc.n	80082ea <__divsi3+0xd2>
 80082e6:	010b      	lsls	r3, r1, #4
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	4152      	adcs	r2, r2
 80082ec:	08c3      	lsrs	r3, r0, #3
 80082ee:	428b      	cmp	r3, r1
 80082f0:	d301      	bcc.n	80082f6 <__divsi3+0xde>
 80082f2:	00cb      	lsls	r3, r1, #3
 80082f4:	1ac0      	subs	r0, r0, r3
 80082f6:	4152      	adcs	r2, r2
 80082f8:	0883      	lsrs	r3, r0, #2
 80082fa:	428b      	cmp	r3, r1
 80082fc:	d301      	bcc.n	8008302 <__divsi3+0xea>
 80082fe:	008b      	lsls	r3, r1, #2
 8008300:	1ac0      	subs	r0, r0, r3
 8008302:	4152      	adcs	r2, r2
 8008304:	0843      	lsrs	r3, r0, #1
 8008306:	428b      	cmp	r3, r1
 8008308:	d301      	bcc.n	800830e <__divsi3+0xf6>
 800830a:	004b      	lsls	r3, r1, #1
 800830c:	1ac0      	subs	r0, r0, r3
 800830e:	4152      	adcs	r2, r2
 8008310:	1a41      	subs	r1, r0, r1
 8008312:	d200      	bcs.n	8008316 <__divsi3+0xfe>
 8008314:	4601      	mov	r1, r0
 8008316:	4152      	adcs	r2, r2
 8008318:	4610      	mov	r0, r2
 800831a:	4770      	bx	lr
 800831c:	e05d      	b.n	80083da <__divsi3+0x1c2>
 800831e:	0fca      	lsrs	r2, r1, #31
 8008320:	d000      	beq.n	8008324 <__divsi3+0x10c>
 8008322:	4249      	negs	r1, r1
 8008324:	1003      	asrs	r3, r0, #32
 8008326:	d300      	bcc.n	800832a <__divsi3+0x112>
 8008328:	4240      	negs	r0, r0
 800832a:	4053      	eors	r3, r2
 800832c:	2200      	movs	r2, #0
 800832e:	469c      	mov	ip, r3
 8008330:	0903      	lsrs	r3, r0, #4
 8008332:	428b      	cmp	r3, r1
 8008334:	d32d      	bcc.n	8008392 <__divsi3+0x17a>
 8008336:	0a03      	lsrs	r3, r0, #8
 8008338:	428b      	cmp	r3, r1
 800833a:	d312      	bcc.n	8008362 <__divsi3+0x14a>
 800833c:	22fc      	movs	r2, #252	@ 0xfc
 800833e:	0189      	lsls	r1, r1, #6
 8008340:	ba12      	rev	r2, r2
 8008342:	0a03      	lsrs	r3, r0, #8
 8008344:	428b      	cmp	r3, r1
 8008346:	d30c      	bcc.n	8008362 <__divsi3+0x14a>
 8008348:	0189      	lsls	r1, r1, #6
 800834a:	1192      	asrs	r2, r2, #6
 800834c:	428b      	cmp	r3, r1
 800834e:	d308      	bcc.n	8008362 <__divsi3+0x14a>
 8008350:	0189      	lsls	r1, r1, #6
 8008352:	1192      	asrs	r2, r2, #6
 8008354:	428b      	cmp	r3, r1
 8008356:	d304      	bcc.n	8008362 <__divsi3+0x14a>
 8008358:	0189      	lsls	r1, r1, #6
 800835a:	d03a      	beq.n	80083d2 <__divsi3+0x1ba>
 800835c:	1192      	asrs	r2, r2, #6
 800835e:	e000      	b.n	8008362 <__divsi3+0x14a>
 8008360:	0989      	lsrs	r1, r1, #6
 8008362:	09c3      	lsrs	r3, r0, #7
 8008364:	428b      	cmp	r3, r1
 8008366:	d301      	bcc.n	800836c <__divsi3+0x154>
 8008368:	01cb      	lsls	r3, r1, #7
 800836a:	1ac0      	subs	r0, r0, r3
 800836c:	4152      	adcs	r2, r2
 800836e:	0983      	lsrs	r3, r0, #6
 8008370:	428b      	cmp	r3, r1
 8008372:	d301      	bcc.n	8008378 <__divsi3+0x160>
 8008374:	018b      	lsls	r3, r1, #6
 8008376:	1ac0      	subs	r0, r0, r3
 8008378:	4152      	adcs	r2, r2
 800837a:	0943      	lsrs	r3, r0, #5
 800837c:	428b      	cmp	r3, r1
 800837e:	d301      	bcc.n	8008384 <__divsi3+0x16c>
 8008380:	014b      	lsls	r3, r1, #5
 8008382:	1ac0      	subs	r0, r0, r3
 8008384:	4152      	adcs	r2, r2
 8008386:	0903      	lsrs	r3, r0, #4
 8008388:	428b      	cmp	r3, r1
 800838a:	d301      	bcc.n	8008390 <__divsi3+0x178>
 800838c:	010b      	lsls	r3, r1, #4
 800838e:	1ac0      	subs	r0, r0, r3
 8008390:	4152      	adcs	r2, r2
 8008392:	08c3      	lsrs	r3, r0, #3
 8008394:	428b      	cmp	r3, r1
 8008396:	d301      	bcc.n	800839c <__divsi3+0x184>
 8008398:	00cb      	lsls	r3, r1, #3
 800839a:	1ac0      	subs	r0, r0, r3
 800839c:	4152      	adcs	r2, r2
 800839e:	0883      	lsrs	r3, r0, #2
 80083a0:	428b      	cmp	r3, r1
 80083a2:	d301      	bcc.n	80083a8 <__divsi3+0x190>
 80083a4:	008b      	lsls	r3, r1, #2
 80083a6:	1ac0      	subs	r0, r0, r3
 80083a8:	4152      	adcs	r2, r2
 80083aa:	d2d9      	bcs.n	8008360 <__divsi3+0x148>
 80083ac:	0843      	lsrs	r3, r0, #1
 80083ae:	428b      	cmp	r3, r1
 80083b0:	d301      	bcc.n	80083b6 <__divsi3+0x19e>
 80083b2:	004b      	lsls	r3, r1, #1
 80083b4:	1ac0      	subs	r0, r0, r3
 80083b6:	4152      	adcs	r2, r2
 80083b8:	1a41      	subs	r1, r0, r1
 80083ba:	d200      	bcs.n	80083be <__divsi3+0x1a6>
 80083bc:	4601      	mov	r1, r0
 80083be:	4663      	mov	r3, ip
 80083c0:	4152      	adcs	r2, r2
 80083c2:	105b      	asrs	r3, r3, #1
 80083c4:	4610      	mov	r0, r2
 80083c6:	d301      	bcc.n	80083cc <__divsi3+0x1b4>
 80083c8:	4240      	negs	r0, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d500      	bpl.n	80083d0 <__divsi3+0x1b8>
 80083ce:	4249      	negs	r1, r1
 80083d0:	4770      	bx	lr
 80083d2:	4663      	mov	r3, ip
 80083d4:	105b      	asrs	r3, r3, #1
 80083d6:	d300      	bcc.n	80083da <__divsi3+0x1c2>
 80083d8:	4240      	negs	r0, r0
 80083da:	b501      	push	{r0, lr}
 80083dc:	2000      	movs	r0, #0
 80083de:	f000 f805 	bl	80083ec <__aeabi_idiv0>
 80083e2:	bd02      	pop	{r1, pc}

080083e4 <__aeabi_idivmod>:
 80083e4:	2900      	cmp	r1, #0
 80083e6:	d0f8      	beq.n	80083da <__divsi3+0x1c2>
 80083e8:	e716      	b.n	8008218 <__divsi3>
 80083ea:	4770      	bx	lr

080083ec <__aeabi_idiv0>:
 80083ec:	4770      	bx	lr
 80083ee:	46c0      	nop			@ (mov r8, r8)

080083f0 <__aeabi_uldivmod>:
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d111      	bne.n	8008418 <__aeabi_uldivmod+0x28>
 80083f4:	2a00      	cmp	r2, #0
 80083f6:	d10f      	bne.n	8008418 <__aeabi_uldivmod+0x28>
 80083f8:	2900      	cmp	r1, #0
 80083fa:	d100      	bne.n	80083fe <__aeabi_uldivmod+0xe>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d002      	beq.n	8008406 <__aeabi_uldivmod+0x16>
 8008400:	2100      	movs	r1, #0
 8008402:	43c9      	mvns	r1, r1
 8008404:	0008      	movs	r0, r1
 8008406:	b407      	push	{r0, r1, r2}
 8008408:	4802      	ldr	r0, [pc, #8]	@ (8008414 <__aeabi_uldivmod+0x24>)
 800840a:	a102      	add	r1, pc, #8	@ (adr r1, 8008414 <__aeabi_uldivmod+0x24>)
 800840c:	1840      	adds	r0, r0, r1
 800840e:	9002      	str	r0, [sp, #8]
 8008410:	bd03      	pop	{r0, r1, pc}
 8008412:	46c0      	nop			@ (mov r8, r8)
 8008414:	ffffffd9 	.word	0xffffffd9
 8008418:	b403      	push	{r0, r1}
 800841a:	4668      	mov	r0, sp
 800841c:	b501      	push	{r0, lr}
 800841e:	9802      	ldr	r0, [sp, #8]
 8008420:	f000 f806 	bl	8008430 <__udivmoddi4>
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	469e      	mov	lr, r3
 8008428:	b002      	add	sp, #8
 800842a:	bc0c      	pop	{r2, r3}
 800842c:	4770      	bx	lr
 800842e:	46c0      	nop			@ (mov r8, r8)

08008430 <__udivmoddi4>:
 8008430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008432:	4657      	mov	r7, sl
 8008434:	464e      	mov	r6, r9
 8008436:	4645      	mov	r5, r8
 8008438:	46de      	mov	lr, fp
 800843a:	b5e0      	push	{r5, r6, r7, lr}
 800843c:	0004      	movs	r4, r0
 800843e:	000d      	movs	r5, r1
 8008440:	4692      	mov	sl, r2
 8008442:	4699      	mov	r9, r3
 8008444:	b083      	sub	sp, #12
 8008446:	428b      	cmp	r3, r1
 8008448:	d830      	bhi.n	80084ac <__udivmoddi4+0x7c>
 800844a:	d02d      	beq.n	80084a8 <__udivmoddi4+0x78>
 800844c:	4649      	mov	r1, r9
 800844e:	4650      	mov	r0, sl
 8008450:	f000 f8ba 	bl	80085c8 <__clzdi2>
 8008454:	0029      	movs	r1, r5
 8008456:	0006      	movs	r6, r0
 8008458:	0020      	movs	r0, r4
 800845a:	f000 f8b5 	bl	80085c8 <__clzdi2>
 800845e:	1a33      	subs	r3, r6, r0
 8008460:	4698      	mov	r8, r3
 8008462:	3b20      	subs	r3, #32
 8008464:	d434      	bmi.n	80084d0 <__udivmoddi4+0xa0>
 8008466:	469b      	mov	fp, r3
 8008468:	4653      	mov	r3, sl
 800846a:	465a      	mov	r2, fp
 800846c:	4093      	lsls	r3, r2
 800846e:	4642      	mov	r2, r8
 8008470:	001f      	movs	r7, r3
 8008472:	4653      	mov	r3, sl
 8008474:	4093      	lsls	r3, r2
 8008476:	001e      	movs	r6, r3
 8008478:	42af      	cmp	r7, r5
 800847a:	d83b      	bhi.n	80084f4 <__udivmoddi4+0xc4>
 800847c:	42af      	cmp	r7, r5
 800847e:	d100      	bne.n	8008482 <__udivmoddi4+0x52>
 8008480:	e079      	b.n	8008576 <__udivmoddi4+0x146>
 8008482:	465b      	mov	r3, fp
 8008484:	1ba4      	subs	r4, r4, r6
 8008486:	41bd      	sbcs	r5, r7
 8008488:	2b00      	cmp	r3, #0
 800848a:	da00      	bge.n	800848e <__udivmoddi4+0x5e>
 800848c:	e076      	b.n	800857c <__udivmoddi4+0x14c>
 800848e:	2200      	movs	r2, #0
 8008490:	2300      	movs	r3, #0
 8008492:	9200      	str	r2, [sp, #0]
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	2301      	movs	r3, #1
 8008498:	465a      	mov	r2, fp
 800849a:	4093      	lsls	r3, r2
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	2301      	movs	r3, #1
 80084a0:	4642      	mov	r2, r8
 80084a2:	4093      	lsls	r3, r2
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	e029      	b.n	80084fc <__udivmoddi4+0xcc>
 80084a8:	4282      	cmp	r2, r0
 80084aa:	d9cf      	bls.n	800844c <__udivmoddi4+0x1c>
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	9200      	str	r2, [sp, #0]
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <__udivmoddi4+0x8e>
 80084ba:	601c      	str	r4, [r3, #0]
 80084bc:	605d      	str	r5, [r3, #4]
 80084be:	9800      	ldr	r0, [sp, #0]
 80084c0:	9901      	ldr	r1, [sp, #4]
 80084c2:	b003      	add	sp, #12
 80084c4:	bcf0      	pop	{r4, r5, r6, r7}
 80084c6:	46bb      	mov	fp, r7
 80084c8:	46b2      	mov	sl, r6
 80084ca:	46a9      	mov	r9, r5
 80084cc:	46a0      	mov	r8, r4
 80084ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d0:	4642      	mov	r2, r8
 80084d2:	469b      	mov	fp, r3
 80084d4:	2320      	movs	r3, #32
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	4652      	mov	r2, sl
 80084da:	40da      	lsrs	r2, r3
 80084dc:	4641      	mov	r1, r8
 80084de:	0013      	movs	r3, r2
 80084e0:	464a      	mov	r2, r9
 80084e2:	408a      	lsls	r2, r1
 80084e4:	0017      	movs	r7, r2
 80084e6:	4642      	mov	r2, r8
 80084e8:	431f      	orrs	r7, r3
 80084ea:	4653      	mov	r3, sl
 80084ec:	4093      	lsls	r3, r2
 80084ee:	001e      	movs	r6, r3
 80084f0:	42af      	cmp	r7, r5
 80084f2:	d9c3      	bls.n	800847c <__udivmoddi4+0x4c>
 80084f4:	2200      	movs	r2, #0
 80084f6:	2300      	movs	r3, #0
 80084f8:	9200      	str	r2, [sp, #0]
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	4643      	mov	r3, r8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0d8      	beq.n	80084b4 <__udivmoddi4+0x84>
 8008502:	07fb      	lsls	r3, r7, #31
 8008504:	0872      	lsrs	r2, r6, #1
 8008506:	431a      	orrs	r2, r3
 8008508:	4646      	mov	r6, r8
 800850a:	087b      	lsrs	r3, r7, #1
 800850c:	e00e      	b.n	800852c <__udivmoddi4+0xfc>
 800850e:	42ab      	cmp	r3, r5
 8008510:	d101      	bne.n	8008516 <__udivmoddi4+0xe6>
 8008512:	42a2      	cmp	r2, r4
 8008514:	d80c      	bhi.n	8008530 <__udivmoddi4+0x100>
 8008516:	1aa4      	subs	r4, r4, r2
 8008518:	419d      	sbcs	r5, r3
 800851a:	2001      	movs	r0, #1
 800851c:	1924      	adds	r4, r4, r4
 800851e:	416d      	adcs	r5, r5
 8008520:	2100      	movs	r1, #0
 8008522:	3e01      	subs	r6, #1
 8008524:	1824      	adds	r4, r4, r0
 8008526:	414d      	adcs	r5, r1
 8008528:	2e00      	cmp	r6, #0
 800852a:	d006      	beq.n	800853a <__udivmoddi4+0x10a>
 800852c:	42ab      	cmp	r3, r5
 800852e:	d9ee      	bls.n	800850e <__udivmoddi4+0xde>
 8008530:	3e01      	subs	r6, #1
 8008532:	1924      	adds	r4, r4, r4
 8008534:	416d      	adcs	r5, r5
 8008536:	2e00      	cmp	r6, #0
 8008538:	d1f8      	bne.n	800852c <__udivmoddi4+0xfc>
 800853a:	9800      	ldr	r0, [sp, #0]
 800853c:	9901      	ldr	r1, [sp, #4]
 800853e:	465b      	mov	r3, fp
 8008540:	1900      	adds	r0, r0, r4
 8008542:	4169      	adcs	r1, r5
 8008544:	2b00      	cmp	r3, #0
 8008546:	db24      	blt.n	8008592 <__udivmoddi4+0x162>
 8008548:	002b      	movs	r3, r5
 800854a:	465a      	mov	r2, fp
 800854c:	4644      	mov	r4, r8
 800854e:	40d3      	lsrs	r3, r2
 8008550:	002a      	movs	r2, r5
 8008552:	40e2      	lsrs	r2, r4
 8008554:	001c      	movs	r4, r3
 8008556:	465b      	mov	r3, fp
 8008558:	0015      	movs	r5, r2
 800855a:	2b00      	cmp	r3, #0
 800855c:	db2a      	blt.n	80085b4 <__udivmoddi4+0x184>
 800855e:	0026      	movs	r6, r4
 8008560:	409e      	lsls	r6, r3
 8008562:	0033      	movs	r3, r6
 8008564:	0026      	movs	r6, r4
 8008566:	4647      	mov	r7, r8
 8008568:	40be      	lsls	r6, r7
 800856a:	0032      	movs	r2, r6
 800856c:	1a80      	subs	r0, r0, r2
 800856e:	4199      	sbcs	r1, r3
 8008570:	9000      	str	r0, [sp, #0]
 8008572:	9101      	str	r1, [sp, #4]
 8008574:	e79e      	b.n	80084b4 <__udivmoddi4+0x84>
 8008576:	42a3      	cmp	r3, r4
 8008578:	d8bc      	bhi.n	80084f4 <__udivmoddi4+0xc4>
 800857a:	e782      	b.n	8008482 <__udivmoddi4+0x52>
 800857c:	4642      	mov	r2, r8
 800857e:	2320      	movs	r3, #32
 8008580:	2100      	movs	r1, #0
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	2200      	movs	r2, #0
 8008586:	9100      	str	r1, [sp, #0]
 8008588:	9201      	str	r2, [sp, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	40da      	lsrs	r2, r3
 800858e:	9201      	str	r2, [sp, #4]
 8008590:	e785      	b.n	800849e <__udivmoddi4+0x6e>
 8008592:	4642      	mov	r2, r8
 8008594:	2320      	movs	r3, #32
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	002a      	movs	r2, r5
 800859a:	4646      	mov	r6, r8
 800859c:	409a      	lsls	r2, r3
 800859e:	0023      	movs	r3, r4
 80085a0:	40f3      	lsrs	r3, r6
 80085a2:	4644      	mov	r4, r8
 80085a4:	4313      	orrs	r3, r2
 80085a6:	002a      	movs	r2, r5
 80085a8:	40e2      	lsrs	r2, r4
 80085aa:	001c      	movs	r4, r3
 80085ac:	465b      	mov	r3, fp
 80085ae:	0015      	movs	r5, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dad4      	bge.n	800855e <__udivmoddi4+0x12e>
 80085b4:	4642      	mov	r2, r8
 80085b6:	002f      	movs	r7, r5
 80085b8:	2320      	movs	r3, #32
 80085ba:	0026      	movs	r6, r4
 80085bc:	4097      	lsls	r7, r2
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	40de      	lsrs	r6, r3
 80085c2:	003b      	movs	r3, r7
 80085c4:	4333      	orrs	r3, r6
 80085c6:	e7cd      	b.n	8008564 <__udivmoddi4+0x134>

080085c8 <__clzdi2>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	2900      	cmp	r1, #0
 80085cc:	d103      	bne.n	80085d6 <__clzdi2+0xe>
 80085ce:	f000 f807 	bl	80085e0 <__clzsi2>
 80085d2:	3020      	adds	r0, #32
 80085d4:	e002      	b.n	80085dc <__clzdi2+0x14>
 80085d6:	0008      	movs	r0, r1
 80085d8:	f000 f802 	bl	80085e0 <__clzsi2>
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	46c0      	nop			@ (mov r8, r8)

080085e0 <__clzsi2>:
 80085e0:	211c      	movs	r1, #28
 80085e2:	2301      	movs	r3, #1
 80085e4:	041b      	lsls	r3, r3, #16
 80085e6:	4298      	cmp	r0, r3
 80085e8:	d301      	bcc.n	80085ee <__clzsi2+0xe>
 80085ea:	0c00      	lsrs	r0, r0, #16
 80085ec:	3910      	subs	r1, #16
 80085ee:	0a1b      	lsrs	r3, r3, #8
 80085f0:	4298      	cmp	r0, r3
 80085f2:	d301      	bcc.n	80085f8 <__clzsi2+0x18>
 80085f4:	0a00      	lsrs	r0, r0, #8
 80085f6:	3908      	subs	r1, #8
 80085f8:	091b      	lsrs	r3, r3, #4
 80085fa:	4298      	cmp	r0, r3
 80085fc:	d301      	bcc.n	8008602 <__clzsi2+0x22>
 80085fe:	0900      	lsrs	r0, r0, #4
 8008600:	3904      	subs	r1, #4
 8008602:	a202      	add	r2, pc, #8	@ (adr r2, 800860c <__clzsi2+0x2c>)
 8008604:	5c10      	ldrb	r0, [r2, r0]
 8008606:	1840      	adds	r0, r0, r1
 8008608:	4770      	bx	lr
 800860a:	46c0      	nop			@ (mov r8, r8)
 800860c:	02020304 	.word	0x02020304
 8008610:	01010101 	.word	0x01010101
	...

0800861c <_write>:
	void(*TurnOn)(void);
	void(*TurnOff)(void);
};


int _write(int file, char *ptr, int len){
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e00a      	b.n	8008644 <_write+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	1c4b      	adds	r3, r1, #1
 8008632:	60bb      	str	r3, [r7, #8]
 8008634:	4808      	ldr	r0, [pc, #32]	@ (8008658 <_write+0x3c>)
 8008636:	2364      	movs	r3, #100	@ 0x64
 8008638:	2201      	movs	r2, #1
 800863a:	f001 fc65 	bl	8009f08 <HAL_UART_Transmit>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	3301      	adds	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	dbf0      	blt.n	800862e <_write+0x12>
	}
	return len;
 800864c:	687b      	ldr	r3, [r7, #4]
}
 800864e:	0018      	movs	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	b006      	add	sp, #24
 8008654:	bd80      	pop	{r7, pc}
 8008656:	46c0      	nop			@ (mov r8, r8)
 8008658:	20000104 	.word	0x20000104

0800865c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
	struct BootloaderAPI *api = (struct BootloaderAPI *) 0x8018000;
 8008662:	4b0c      	ldr	r3, [pc, #48]	@ (8008694 <main+0x38>)
 8008664:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008666:	f000 fa51 	bl	8008b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800866a:	f000 f817 	bl	800869c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800866e:	f000 f8ab 	bl	80087c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008672:	f000 f85b 	bl	800872c <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
#ifdef FIRST_VIDEO
	 (*Functions[0])(100);
#endif
	 printf("Application Running \r\n");
 8008676:	4b08      	ldr	r3, [pc, #32]	@ (8008698 <main+0x3c>)
 8008678:	0018      	movs	r0, r3
 800867a:	f002 fc0f 	bl	800ae9c <puts>
	 api->Blink(200);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	20c8      	movs	r0, #200	@ 0xc8
 8008684:	4798      	blx	r3
	 HAL_Delay(1000);
 8008686:	23fa      	movs	r3, #250	@ 0xfa
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	0018      	movs	r0, r3
 800868c:	f000 fac4 	bl	8008c18 <HAL_Delay>
	 printf("Application Running \r\n");
 8008690:	46c0      	nop			@ (mov r8, r8)
 8008692:	e7f0      	b.n	8008676 <main+0x1a>
 8008694:	08018000 	.word	0x08018000
 8008698:	0800b648 	.word	0x0800b648

0800869c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b093      	sub	sp, #76	@ 0x4c
 80086a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086a2:	2410      	movs	r4, #16
 80086a4:	193b      	adds	r3, r7, r4
 80086a6:	0018      	movs	r0, r3
 80086a8:	2338      	movs	r3, #56	@ 0x38
 80086aa:	001a      	movs	r2, r3
 80086ac:	2100      	movs	r1, #0
 80086ae:	f002 fceb 	bl	800b088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80086b2:	003b      	movs	r3, r7
 80086b4:	0018      	movs	r0, r3
 80086b6:	2310      	movs	r3, #16
 80086b8:	001a      	movs	r2, r3
 80086ba:	2100      	movs	r1, #0
 80086bc:	f002 fce4 	bl	800b088 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80086c0:	2380      	movs	r3, #128	@ 0x80
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f000 fd01 	bl	80090cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80086ca:	193b      	adds	r3, r7, r4
 80086cc:	2202      	movs	r2, #2
 80086ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80086d0:	193b      	adds	r3, r7, r4
 80086d2:	2280      	movs	r2, #128	@ 0x80
 80086d4:	0052      	lsls	r2, r2, #1
 80086d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80086d8:	193b      	adds	r3, r7, r4
 80086da:	2200      	movs	r2, #0
 80086dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80086de:	193b      	adds	r3, r7, r4
 80086e0:	2240      	movs	r2, #64	@ 0x40
 80086e2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80086e4:	193b      	adds	r3, r7, r4
 80086e6:	2200      	movs	r2, #0
 80086e8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086ea:	193b      	adds	r3, r7, r4
 80086ec:	0018      	movs	r0, r3
 80086ee:	f000 fd39 	bl	8009164 <HAL_RCC_OscConfig>
 80086f2:	1e03      	subs	r3, r0, #0
 80086f4:	d001      	beq.n	80086fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80086f6:	f000 f8b7 	bl	8008868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086fa:	003b      	movs	r3, r7
 80086fc:	2207      	movs	r2, #7
 80086fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008700:	003b      	movs	r3, r7
 8008702:	2200      	movs	r2, #0
 8008704:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008706:	003b      	movs	r3, r7
 8008708:	2200      	movs	r2, #0
 800870a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800870c:	003b      	movs	r3, r7
 800870e:	2200      	movs	r2, #0
 8008710:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008712:	003b      	movs	r3, r7
 8008714:	2100      	movs	r1, #0
 8008716:	0018      	movs	r0, r3
 8008718:	f001 f83e 	bl	8009798 <HAL_RCC_ClockConfig>
 800871c:	1e03      	subs	r3, r0, #0
 800871e:	d001      	beq.n	8008724 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8008720:	f000 f8a2 	bl	8008868 <Error_Handler>
  }
}
 8008724:	46c0      	nop			@ (mov r8, r8)
 8008726:	46bd      	mov	sp, r7
 8008728:	b013      	add	sp, #76	@ 0x4c
 800872a:	bd90      	pop	{r4, r7, pc}

0800872c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008730:	4b23      	ldr	r3, [pc, #140]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008732:	4a24      	ldr	r2, [pc, #144]	@ (80087c4 <MX_USART2_UART_Init+0x98>)
 8008734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008736:	4b22      	ldr	r3, [pc, #136]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008738:	22e1      	movs	r2, #225	@ 0xe1
 800873a:	0252      	lsls	r2, r2, #9
 800873c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800873e:	4b20      	ldr	r3, [pc, #128]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008740:	2200      	movs	r2, #0
 8008742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008744:	4b1e      	ldr	r3, [pc, #120]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008746:	2200      	movs	r2, #0
 8008748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800874a:	4b1d      	ldr	r3, [pc, #116]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 800874c:	2200      	movs	r2, #0
 800874e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008750:	4b1b      	ldr	r3, [pc, #108]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008752:	220c      	movs	r2, #12
 8008754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008756:	4b1a      	ldr	r3, [pc, #104]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008758:	2200      	movs	r2, #0
 800875a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800875c:	4b18      	ldr	r3, [pc, #96]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 800875e:	2200      	movs	r2, #0
 8008760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008762:	4b17      	ldr	r3, [pc, #92]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008764:	2200      	movs	r2, #0
 8008766:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008768:	4b15      	ldr	r3, [pc, #84]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 800876a:	2200      	movs	r2, #0
 800876c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800876e:	4b14      	ldr	r3, [pc, #80]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008770:	2200      	movs	r2, #0
 8008772:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008774:	4b12      	ldr	r3, [pc, #72]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008776:	0018      	movs	r0, r3
 8008778:	f001 fb70 	bl	8009e5c <HAL_UART_Init>
 800877c:	1e03      	subs	r3, r0, #0
 800877e:	d001      	beq.n	8008784 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008780:	f000 f872 	bl	8008868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008784:	4b0e      	ldr	r3, [pc, #56]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008786:	2100      	movs	r1, #0
 8008788:	0018      	movs	r0, r3
 800878a:	f002 f98d 	bl	800aaa8 <HAL_UARTEx_SetTxFifoThreshold>
 800878e:	1e03      	subs	r3, r0, #0
 8008790:	d001      	beq.n	8008796 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008792:	f000 f869 	bl	8008868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008796:	4b0a      	ldr	r3, [pc, #40]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 8008798:	2100      	movs	r1, #0
 800879a:	0018      	movs	r0, r3
 800879c:	f002 f9c4 	bl	800ab28 <HAL_UARTEx_SetRxFifoThreshold>
 80087a0:	1e03      	subs	r3, r0, #0
 80087a2:	d001      	beq.n	80087a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80087a4:	f000 f860 	bl	8008868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80087a8:	4b05      	ldr	r3, [pc, #20]	@ (80087c0 <MX_USART2_UART_Init+0x94>)
 80087aa:	0018      	movs	r0, r3
 80087ac:	f002 f942 	bl	800aa34 <HAL_UARTEx_DisableFifoMode>
 80087b0:	1e03      	subs	r3, r0, #0
 80087b2:	d001      	beq.n	80087b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80087b4:	f000 f858 	bl	8008868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80087b8:	46c0      	nop			@ (mov r8, r8)
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			@ (mov r8, r8)
 80087c0:	20000104 	.word	0x20000104
 80087c4:	40004400 	.word	0x40004400

080087c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80087c8:	b590      	push	{r4, r7, lr}
 80087ca:	b089      	sub	sp, #36	@ 0x24
 80087cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087ce:	240c      	movs	r4, #12
 80087d0:	193b      	adds	r3, r7, r4
 80087d2:	0018      	movs	r0, r3
 80087d4:	2314      	movs	r3, #20
 80087d6:	001a      	movs	r2, r3
 80087d8:	2100      	movs	r1, #0
 80087da:	f002 fc55 	bl	800b088 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087de:	4b21      	ldr	r3, [pc, #132]	@ (8008864 <MX_GPIO_Init+0x9c>)
 80087e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087e2:	4b20      	ldr	r3, [pc, #128]	@ (8008864 <MX_GPIO_Init+0x9c>)
 80087e4:	2104      	movs	r1, #4
 80087e6:	430a      	orrs	r2, r1
 80087e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80087ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008864 <MX_GPIO_Init+0x9c>)
 80087ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ee:	2204      	movs	r2, #4
 80087f0:	4013      	ands	r3, r2
 80087f2:	60bb      	str	r3, [r7, #8]
 80087f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80087f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008864 <MX_GPIO_Init+0x9c>)
 80087f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008864 <MX_GPIO_Init+0x9c>)
 80087fc:	2120      	movs	r1, #32
 80087fe:	430a      	orrs	r2, r1
 8008800:	635a      	str	r2, [r3, #52]	@ 0x34
 8008802:	4b18      	ldr	r3, [pc, #96]	@ (8008864 <MX_GPIO_Init+0x9c>)
 8008804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008806:	2220      	movs	r2, #32
 8008808:	4013      	ands	r3, r2
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800880e:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <MX_GPIO_Init+0x9c>)
 8008810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008812:	4b14      	ldr	r3, [pc, #80]	@ (8008864 <MX_GPIO_Init+0x9c>)
 8008814:	2101      	movs	r1, #1
 8008816:	430a      	orrs	r2, r1
 8008818:	635a      	str	r2, [r3, #52]	@ 0x34
 800881a:	4b12      	ldr	r3, [pc, #72]	@ (8008864 <MX_GPIO_Init+0x9c>)
 800881c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800881e:	2201      	movs	r2, #1
 8008820:	4013      	ands	r3, r2
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8008826:	23a0      	movs	r3, #160	@ 0xa0
 8008828:	05db      	lsls	r3, r3, #23
 800882a:	2200      	movs	r2, #0
 800882c:	2120      	movs	r1, #32
 800882e:	0018      	movs	r0, r3
 8008830:	f000 fc2e 	bl	8009090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8008834:	0021      	movs	r1, r4
 8008836:	187b      	adds	r3, r7, r1
 8008838:	2220      	movs	r2, #32
 800883a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800883c:	187b      	adds	r3, r7, r1
 800883e:	2201      	movs	r2, #1
 8008840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008842:	187b      	adds	r3, r7, r1
 8008844:	2200      	movs	r2, #0
 8008846:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008848:	187b      	adds	r3, r7, r1
 800884a:	2202      	movs	r2, #2
 800884c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800884e:	187a      	adds	r2, r7, r1
 8008850:	23a0      	movs	r3, #160	@ 0xa0
 8008852:	05db      	lsls	r3, r3, #23
 8008854:	0011      	movs	r1, r2
 8008856:	0018      	movs	r0, r3
 8008858:	f000 fab6 	bl	8008dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800885c:	46c0      	nop			@ (mov r8, r8)
 800885e:	46bd      	mov	sp, r7
 8008860:	b009      	add	sp, #36	@ 0x24
 8008862:	bd90      	pop	{r4, r7, pc}
 8008864:	40021000 	.word	0x40021000

08008868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800886c:	b672      	cpsid	i
}
 800886e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008870:	46c0      	nop			@ (mov r8, r8)
 8008872:	e7fd      	b.n	8008870 <Error_Handler+0x8>

08008874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800887a:	4b0f      	ldr	r3, [pc, #60]	@ (80088b8 <HAL_MspInit+0x44>)
 800887c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800887e:	4b0e      	ldr	r3, [pc, #56]	@ (80088b8 <HAL_MspInit+0x44>)
 8008880:	2101      	movs	r1, #1
 8008882:	430a      	orrs	r2, r1
 8008884:	641a      	str	r2, [r3, #64]	@ 0x40
 8008886:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <HAL_MspInit+0x44>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	2201      	movs	r2, #1
 800888c:	4013      	ands	r3, r2
 800888e:	607b      	str	r3, [r7, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008892:	4b09      	ldr	r3, [pc, #36]	@ (80088b8 <HAL_MspInit+0x44>)
 8008894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008896:	4b08      	ldr	r3, [pc, #32]	@ (80088b8 <HAL_MspInit+0x44>)
 8008898:	2180      	movs	r1, #128	@ 0x80
 800889a:	0549      	lsls	r1, r1, #21
 800889c:	430a      	orrs	r2, r1
 800889e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80088a0:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <HAL_MspInit+0x44>)
 80088a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088a4:	2380      	movs	r3, #128	@ 0x80
 80088a6:	055b      	lsls	r3, r3, #21
 80088a8:	4013      	ands	r3, r2
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088ae:	46c0      	nop			@ (mov r8, r8)
 80088b0:	46bd      	mov	sp, r7
 80088b2:	b002      	add	sp, #8
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	46c0      	nop			@ (mov r8, r8)
 80088b8:	40021000 	.word	0x40021000

080088bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b097      	sub	sp, #92	@ 0x5c
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088c4:	2344      	movs	r3, #68	@ 0x44
 80088c6:	18fb      	adds	r3, r7, r3
 80088c8:	0018      	movs	r0, r3
 80088ca:	2314      	movs	r3, #20
 80088cc:	001a      	movs	r2, r3
 80088ce:	2100      	movs	r1, #0
 80088d0:	f002 fbda 	bl	800b088 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80088d4:	2410      	movs	r4, #16
 80088d6:	193b      	adds	r3, r7, r4
 80088d8:	0018      	movs	r0, r3
 80088da:	2334      	movs	r3, #52	@ 0x34
 80088dc:	001a      	movs	r2, r3
 80088de:	2100      	movs	r1, #0
 80088e0:	f002 fbd2 	bl	800b088 <memset>
  if(huart->Instance==USART2)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a22      	ldr	r2, [pc, #136]	@ (8008974 <HAL_UART_MspInit+0xb8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d13e      	bne.n	800896c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80088ee:	193b      	adds	r3, r7, r4
 80088f0:	2202      	movs	r2, #2
 80088f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80088f4:	193b      	adds	r3, r7, r4
 80088f6:	2200      	movs	r2, #0
 80088f8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088fa:	193b      	adds	r3, r7, r4
 80088fc:	0018      	movs	r0, r3
 80088fe:	f001 f8f5 	bl	8009aec <HAL_RCCEx_PeriphCLKConfig>
 8008902:	1e03      	subs	r3, r0, #0
 8008904:	d001      	beq.n	800890a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008906:	f7ff ffaf 	bl	8008868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800890a:	4b1b      	ldr	r3, [pc, #108]	@ (8008978 <HAL_UART_MspInit+0xbc>)
 800890c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800890e:	4b1a      	ldr	r3, [pc, #104]	@ (8008978 <HAL_UART_MspInit+0xbc>)
 8008910:	2180      	movs	r1, #128	@ 0x80
 8008912:	0289      	lsls	r1, r1, #10
 8008914:	430a      	orrs	r2, r1
 8008916:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008918:	4b17      	ldr	r3, [pc, #92]	@ (8008978 <HAL_UART_MspInit+0xbc>)
 800891a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800891c:	2380      	movs	r3, #128	@ 0x80
 800891e:	029b      	lsls	r3, r3, #10
 8008920:	4013      	ands	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008926:	4b14      	ldr	r3, [pc, #80]	@ (8008978 <HAL_UART_MspInit+0xbc>)
 8008928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800892a:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <HAL_UART_MspInit+0xbc>)
 800892c:	2101      	movs	r1, #1
 800892e:	430a      	orrs	r2, r1
 8008930:	635a      	str	r2, [r3, #52]	@ 0x34
 8008932:	4b11      	ldr	r3, [pc, #68]	@ (8008978 <HAL_UART_MspInit+0xbc>)
 8008934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008936:	2201      	movs	r2, #1
 8008938:	4013      	ands	r3, r2
 800893a:	60bb      	str	r3, [r7, #8]
 800893c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800893e:	2144      	movs	r1, #68	@ 0x44
 8008940:	187b      	adds	r3, r7, r1
 8008942:	220c      	movs	r2, #12
 8008944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008946:	187b      	adds	r3, r7, r1
 8008948:	2202      	movs	r2, #2
 800894a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800894c:	187b      	adds	r3, r7, r1
 800894e:	2201      	movs	r2, #1
 8008950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008952:	187b      	adds	r3, r7, r1
 8008954:	2200      	movs	r2, #0
 8008956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008958:	187b      	adds	r3, r7, r1
 800895a:	2201      	movs	r2, #1
 800895c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800895e:	187a      	adds	r2, r7, r1
 8008960:	23a0      	movs	r3, #160	@ 0xa0
 8008962:	05db      	lsls	r3, r3, #23
 8008964:	0011      	movs	r1, r2
 8008966:	0018      	movs	r0, r3
 8008968:	f000 fa2e 	bl	8008dc8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800896c:	46c0      	nop			@ (mov r8, r8)
 800896e:	46bd      	mov	sp, r7
 8008970:	b017      	add	sp, #92	@ 0x5c
 8008972:	bd90      	pop	{r4, r7, pc}
 8008974:	40004400 	.word	0x40004400
 8008978:	40021000 	.word	0x40021000

0800897c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008980:	46c0      	nop			@ (mov r8, r8)
 8008982:	e7fd      	b.n	8008980 <NMI_Handler+0x4>

08008984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008988:	46c0      	nop			@ (mov r8, r8)
 800898a:	e7fd      	b.n	8008988 <HardFault_Handler+0x4>

0800898c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008990:	46c0      	nop			@ (mov r8, r8)
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800899a:	46c0      	nop			@ (mov r8, r8)
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089a4:	f000 f91c 	bl	8008be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089a8:	46c0      	nop			@ (mov r8, r8)
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b086      	sub	sp, #24
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	e00a      	b.n	80089d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80089c0:	e000      	b.n	80089c4 <_read+0x16>
 80089c2:	bf00      	nop
 80089c4:	0001      	movs	r1, r0
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	60ba      	str	r2, [r7, #8]
 80089cc:	b2ca      	uxtb	r2, r1
 80089ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	3301      	adds	r3, #1
 80089d4:	617b      	str	r3, [r7, #20]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	dbf0      	blt.n	80089c0 <_read+0x12>
  }

  return len;
 80089de:	687b      	ldr	r3, [r7, #4]
}
 80089e0:	0018      	movs	r0, r3
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b006      	add	sp, #24
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80089f0:	2301      	movs	r3, #1
 80089f2:	425b      	negs	r3, r3
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b002      	add	sp, #8
 80089fa:	bd80      	pop	{r7, pc}

080089fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2280      	movs	r2, #128	@ 0x80
 8008a0a:	0192      	lsls	r2, r2, #6
 8008a0c:	605a      	str	r2, [r3, #4]
  return 0;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	0018      	movs	r0, r3
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b002      	add	sp, #8
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <_isatty>:

int _isatty(int file)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008a20:	2301      	movs	r3, #1
}
 8008a22:	0018      	movs	r0, r3
 8008a24:	46bd      	mov	sp, r7
 8008a26:	b002      	add	sp, #8
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	0018      	movs	r0, r3
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b004      	add	sp, #16
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a48:	4a14      	ldr	r2, [pc, #80]	@ (8008a9c <_sbrk+0x5c>)
 8008a4a:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <_sbrk+0x60>)
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a54:	4b13      	ldr	r3, [pc, #76]	@ (8008aa4 <_sbrk+0x64>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a5c:	4b11      	ldr	r3, [pc, #68]	@ (8008aa4 <_sbrk+0x64>)
 8008a5e:	4a12      	ldr	r2, [pc, #72]	@ (8008aa8 <_sbrk+0x68>)
 8008a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a62:	4b10      	ldr	r3, [pc, #64]	@ (8008aa4 <_sbrk+0x64>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	18d3      	adds	r3, r2, r3
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d207      	bcs.n	8008a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a70:	f002 fb60 	bl	800b134 <__errno>
 8008a74:	0003      	movs	r3, r0
 8008a76:	220c      	movs	r2, #12
 8008a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	425b      	negs	r3, r3
 8008a7e:	e009      	b.n	8008a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a80:	4b08      	ldr	r3, [pc, #32]	@ (8008aa4 <_sbrk+0x64>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a86:	4b07      	ldr	r3, [pc, #28]	@ (8008aa4 <_sbrk+0x64>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	18d2      	adds	r2, r2, r3
 8008a8e:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <_sbrk+0x64>)
 8008a90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008a92:	68fb      	ldr	r3, [r7, #12]
}
 8008a94:	0018      	movs	r0, r3
 8008a96:	46bd      	mov	sp, r7
 8008a98:	b006      	add	sp, #24
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20009000 	.word	0x20009000
 8008aa0:	00000400 	.word	0x00000400
 8008aa4:	20000198 	.word	0x20000198
 8008aa8:	200002f0 	.word	0x200002f0

08008aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008ab0:	46c0      	nop			@ (mov r8, r8)
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008ab8:	480d      	ldr	r0, [pc, #52]	@ (8008af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008aba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008abc:	f7ff fff6 	bl	8008aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ac0:	480c      	ldr	r0, [pc, #48]	@ (8008af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008ac2:	490d      	ldr	r1, [pc, #52]	@ (8008af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8008afc <LoopForever+0xe>)
  movs r3, #0
 8008ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ac8:	e002      	b.n	8008ad0 <LoopCopyDataInit>

08008aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ace:	3304      	adds	r3, #4

08008ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ad4:	d3f9      	bcc.n	8008aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8008b04 <LoopForever+0x16>)
  movs r3, #0
 8008ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008adc:	e001      	b.n	8008ae2 <LoopFillZerobss>

08008ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ae0:	3204      	adds	r2, #4

08008ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ae4:	d3fb      	bcc.n	8008ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008ae6:	f002 fb2b 	bl	800b140 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008aea:	f7ff fdb7 	bl	800865c <main>

08008aee <LoopForever>:

LoopForever:
  b LoopForever
 8008aee:	e7fe      	b.n	8008aee <LoopForever>
  ldr   r0, =_estack
 8008af0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008af4:	20000080 	.word	0x20000080
  ldr r1, =_edata
 8008af8:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8008afc:	0800b6f8 	.word	0x0800b6f8
  ldr r2, =_sbss
 8008b00:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8008b04:	200002ec 	.word	0x200002ec

08008b08 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008b08:	e7fe      	b.n	8008b08 <ADC1_COMP_IRQHandler>
	...

08008b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b12:	1dfb      	adds	r3, r7, #7
 8008b14:	2200      	movs	r2, #0
 8008b16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b18:	4b0b      	ldr	r3, [pc, #44]	@ (8008b48 <HAL_Init+0x3c>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <HAL_Init+0x3c>)
 8008b1e:	2180      	movs	r1, #128	@ 0x80
 8008b20:	0049      	lsls	r1, r1, #1
 8008b22:	430a      	orrs	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b26:	2000      	movs	r0, #0
 8008b28:	f000 f810 	bl	8008b4c <HAL_InitTick>
 8008b2c:	1e03      	subs	r3, r0, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008b30:	1dfb      	adds	r3, r7, #7
 8008b32:	2201      	movs	r2, #1
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	e001      	b.n	8008b3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008b38:	f7ff fe9c 	bl	8008874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b3c:	1dfb      	adds	r3, r7, #7
 8008b3e:	781b      	ldrb	r3, [r3, #0]
}
 8008b40:	0018      	movs	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	b002      	add	sp, #8
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	40022000 	.word	0x40022000

08008b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b54:	230f      	movs	r3, #15
 8008b56:	18fb      	adds	r3, r7, r3
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd4 <HAL_InitTick+0x88>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d02b      	beq.n	8008bbc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008b64:	4b1c      	ldr	r3, [pc, #112]	@ (8008bd8 <HAL_InitTick+0x8c>)
 8008b66:	681c      	ldr	r4, [r3, #0]
 8008b68:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd4 <HAL_InitTick+0x88>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	0019      	movs	r1, r3
 8008b6e:	23fa      	movs	r3, #250	@ 0xfa
 8008b70:	0098      	lsls	r0, r3, #2
 8008b72:	f7ff fac7 	bl	8008104 <__udivsi3>
 8008b76:	0003      	movs	r3, r0
 8008b78:	0019      	movs	r1, r3
 8008b7a:	0020      	movs	r0, r4
 8008b7c:	f7ff fac2 	bl	8008104 <__udivsi3>
 8008b80:	0003      	movs	r3, r0
 8008b82:	0018      	movs	r0, r3
 8008b84:	f000 f913 	bl	8008dae <HAL_SYSTICK_Config>
 8008b88:	1e03      	subs	r3, r0, #0
 8008b8a:	d112      	bne.n	8008bb2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d80a      	bhi.n	8008ba8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	2301      	movs	r3, #1
 8008b96:	425b      	negs	r3, r3
 8008b98:	2200      	movs	r2, #0
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f000 f8f2 	bl	8008d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8008bdc <HAL_InitTick+0x90>)
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	e00d      	b.n	8008bc4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008ba8:	230f      	movs	r3, #15
 8008baa:	18fb      	adds	r3, r7, r3
 8008bac:	2201      	movs	r2, #1
 8008bae:	701a      	strb	r2, [r3, #0]
 8008bb0:	e008      	b.n	8008bc4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008bb2:	230f      	movs	r3, #15
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	e003      	b.n	8008bc4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bbc:	230f      	movs	r3, #15
 8008bbe:	18fb      	adds	r3, r7, r3
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008bc4:	230f      	movs	r3, #15
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	781b      	ldrb	r3, [r3, #0]
}
 8008bca:	0018      	movs	r0, r3
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b005      	add	sp, #20
 8008bd0:	bd90      	pop	{r4, r7, pc}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	20000088 	.word	0x20000088
 8008bd8:	20000080 	.word	0x20000080
 8008bdc:	20000084 	.word	0x20000084

08008be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008be4:	4b05      	ldr	r3, [pc, #20]	@ (8008bfc <HAL_IncTick+0x1c>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	001a      	movs	r2, r3
 8008bea:	4b05      	ldr	r3, [pc, #20]	@ (8008c00 <HAL_IncTick+0x20>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	18d2      	adds	r2, r2, r3
 8008bf0:	4b03      	ldr	r3, [pc, #12]	@ (8008c00 <HAL_IncTick+0x20>)
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	46c0      	nop			@ (mov r8, r8)
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	46c0      	nop			@ (mov r8, r8)
 8008bfc:	20000088 	.word	0x20000088
 8008c00:	2000019c 	.word	0x2000019c

08008c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  return uwTick;
 8008c08:	4b02      	ldr	r3, [pc, #8]	@ (8008c14 <HAL_GetTick+0x10>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
}
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	46c0      	nop			@ (mov r8, r8)
 8008c14:	2000019c 	.word	0x2000019c

08008c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c20:	f7ff fff0 	bl	8008c04 <HAL_GetTick>
 8008c24:	0003      	movs	r3, r0
 8008c26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	d005      	beq.n	8008c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <HAL_Delay+0x44>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	001a      	movs	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	189b      	adds	r3, r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c3e:	46c0      	nop			@ (mov r8, r8)
 8008c40:	f7ff ffe0 	bl	8008c04 <HAL_GetTick>
 8008c44:	0002      	movs	r2, r0
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d8f7      	bhi.n	8008c40 <HAL_Delay+0x28>
  {
  }
}
 8008c50:	46c0      	nop			@ (mov r8, r8)
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	46bd      	mov	sp, r7
 8008c56:	b004      	add	sp, #16
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	20000088 	.word	0x20000088

08008c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c60:	b590      	push	{r4, r7, lr}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	0002      	movs	r2, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	1dfb      	adds	r3, r7, #7
 8008c6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008c6e:	1dfb      	adds	r3, r7, #7
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c74:	d828      	bhi.n	8008cc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008c76:	4a2f      	ldr	r2, [pc, #188]	@ (8008d34 <__NVIC_SetPriority+0xd4>)
 8008c78:	1dfb      	adds	r3, r7, #7
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b25b      	sxtb	r3, r3
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	33c0      	adds	r3, #192	@ 0xc0
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	589b      	ldr	r3, [r3, r2]
 8008c86:	1dfa      	adds	r2, r7, #7
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	0011      	movs	r1, r2
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	400a      	ands	r2, r1
 8008c90:	00d2      	lsls	r2, r2, #3
 8008c92:	21ff      	movs	r1, #255	@ 0xff
 8008c94:	4091      	lsls	r1, r2
 8008c96:	000a      	movs	r2, r1
 8008c98:	43d2      	mvns	r2, r2
 8008c9a:	401a      	ands	r2, r3
 8008c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	019b      	lsls	r3, r3, #6
 8008ca2:	22ff      	movs	r2, #255	@ 0xff
 8008ca4:	401a      	ands	r2, r3
 8008ca6:	1dfb      	adds	r3, r7, #7
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	0018      	movs	r0, r3
 8008cac:	2303      	movs	r3, #3
 8008cae:	4003      	ands	r3, r0
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008cb4:	481f      	ldr	r0, [pc, #124]	@ (8008d34 <__NVIC_SetPriority+0xd4>)
 8008cb6:	1dfb      	adds	r3, r7, #7
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	b25b      	sxtb	r3, r3
 8008cbc:	089b      	lsrs	r3, r3, #2
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	33c0      	adds	r3, #192	@ 0xc0
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008cc6:	e031      	b.n	8008d2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d38 <__NVIC_SetPriority+0xd8>)
 8008cca:	1dfb      	adds	r3, r7, #7
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	0019      	movs	r1, r3
 8008cd0:	230f      	movs	r3, #15
 8008cd2:	400b      	ands	r3, r1
 8008cd4:	3b08      	subs	r3, #8
 8008cd6:	089b      	lsrs	r3, r3, #2
 8008cd8:	3306      	adds	r3, #6
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	18d3      	adds	r3, r2, r3
 8008cde:	3304      	adds	r3, #4
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	1dfa      	adds	r2, r7, #7
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	0011      	movs	r1, r2
 8008ce8:	2203      	movs	r2, #3
 8008cea:	400a      	ands	r2, r1
 8008cec:	00d2      	lsls	r2, r2, #3
 8008cee:	21ff      	movs	r1, #255	@ 0xff
 8008cf0:	4091      	lsls	r1, r2
 8008cf2:	000a      	movs	r2, r1
 8008cf4:	43d2      	mvns	r2, r2
 8008cf6:	401a      	ands	r2, r3
 8008cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	019b      	lsls	r3, r3, #6
 8008cfe:	22ff      	movs	r2, #255	@ 0xff
 8008d00:	401a      	ands	r2, r3
 8008d02:	1dfb      	adds	r3, r7, #7
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	0018      	movs	r0, r3
 8008d08:	2303      	movs	r3, #3
 8008d0a:	4003      	ands	r3, r0
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008d10:	4809      	ldr	r0, [pc, #36]	@ (8008d38 <__NVIC_SetPriority+0xd8>)
 8008d12:	1dfb      	adds	r3, r7, #7
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	001c      	movs	r4, r3
 8008d18:	230f      	movs	r3, #15
 8008d1a:	4023      	ands	r3, r4
 8008d1c:	3b08      	subs	r3, #8
 8008d1e:	089b      	lsrs	r3, r3, #2
 8008d20:	430a      	orrs	r2, r1
 8008d22:	3306      	adds	r3, #6
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	18c3      	adds	r3, r0, r3
 8008d28:	3304      	adds	r3, #4
 8008d2a:	601a      	str	r2, [r3, #0]
}
 8008d2c:	46c0      	nop			@ (mov r8, r8)
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b003      	add	sp, #12
 8008d32:	bd90      	pop	{r4, r7, pc}
 8008d34:	e000e100 	.word	0xe000e100
 8008d38:	e000ed00 	.word	0xe000ed00

08008d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	1e5a      	subs	r2, r3, #1
 8008d48:	2380      	movs	r3, #128	@ 0x80
 8008d4a:	045b      	lsls	r3, r3, #17
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d301      	bcc.n	8008d54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d50:	2301      	movs	r3, #1
 8008d52:	e010      	b.n	8008d76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d54:	4b0a      	ldr	r3, [pc, #40]	@ (8008d80 <SysTick_Config+0x44>)
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	3a01      	subs	r2, #1
 8008d5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	425b      	negs	r3, r3
 8008d60:	2103      	movs	r1, #3
 8008d62:	0018      	movs	r0, r3
 8008d64:	f7ff ff7c 	bl	8008c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d68:	4b05      	ldr	r3, [pc, #20]	@ (8008d80 <SysTick_Config+0x44>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d6e:	4b04      	ldr	r3, [pc, #16]	@ (8008d80 <SysTick_Config+0x44>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	0018      	movs	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	b002      	add	sp, #8
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	46c0      	nop			@ (mov r8, r8)
 8008d80:	e000e010 	.word	0xe000e010

08008d84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	210f      	movs	r1, #15
 8008d90:	187b      	adds	r3, r7, r1
 8008d92:	1c02      	adds	r2, r0, #0
 8008d94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	187b      	adds	r3, r7, r1
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	0011      	movs	r1, r2
 8008da0:	0018      	movs	r0, r3
 8008da2:	f7ff ff5d 	bl	8008c60 <__NVIC_SetPriority>
}
 8008da6:	46c0      	nop			@ (mov r8, r8)
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b004      	add	sp, #16
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	0018      	movs	r0, r3
 8008dba:	f7ff ffbf 	bl	8008d3c <SysTick_Config>
 8008dbe:	0003      	movs	r3, r0
}
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	b002      	add	sp, #8
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dd6:	e147      	b.n	8009068 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2101      	movs	r1, #1
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4091      	lsls	r1, r2
 8008de2:	000a      	movs	r2, r1
 8008de4:	4013      	ands	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d100      	bne.n	8008df0 <HAL_GPIO_Init+0x28>
 8008dee:	e138      	b.n	8009062 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2203      	movs	r2, #3
 8008df6:	4013      	ands	r3, r2
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d005      	beq.n	8008e08 <HAL_GPIO_Init+0x40>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2203      	movs	r2, #3
 8008e02:	4013      	ands	r3, r2
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d130      	bne.n	8008e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	2203      	movs	r2, #3
 8008e14:	409a      	lsls	r2, r3
 8008e16:	0013      	movs	r3, r2
 8008e18:	43da      	mvns	r2, r3
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	409a      	lsls	r2, r3
 8008e2a:	0013      	movs	r3, r2
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e3e:	2201      	movs	r2, #1
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	409a      	lsls	r2, r3
 8008e44:	0013      	movs	r3, r2
 8008e46:	43da      	mvns	r2, r3
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	091b      	lsrs	r3, r3, #4
 8008e54:	2201      	movs	r2, #1
 8008e56:	401a      	ands	r2, r3
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	409a      	lsls	r2, r3
 8008e5c:	0013      	movs	r3, r2
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d017      	beq.n	8008ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	2203      	movs	r2, #3
 8008e82:	409a      	lsls	r2, r3
 8008e84:	0013      	movs	r3, r2
 8008e86:	43da      	mvns	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	689a      	ldr	r2, [r3, #8]
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	409a      	lsls	r2, r3
 8008e98:	0013      	movs	r3, r2
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2203      	movs	r2, #3
 8008eac:	4013      	ands	r3, r2
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d123      	bne.n	8008efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	08da      	lsrs	r2, r3, #3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3208      	adds	r2, #8
 8008eba:	0092      	lsls	r2, r2, #2
 8008ebc:	58d3      	ldr	r3, [r2, r3]
 8008ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2207      	movs	r2, #7
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	220f      	movs	r2, #15
 8008eca:	409a      	lsls	r2, r3
 8008ecc:	0013      	movs	r3, r2
 8008ece:	43da      	mvns	r2, r3
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2107      	movs	r1, #7
 8008ede:	400b      	ands	r3, r1
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	409a      	lsls	r2, r3
 8008ee4:	0013      	movs	r3, r2
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	08da      	lsrs	r2, r3, #3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3208      	adds	r2, #8
 8008ef4:	0092      	lsls	r2, r2, #2
 8008ef6:	6939      	ldr	r1, [r7, #16]
 8008ef8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	2203      	movs	r2, #3
 8008f06:	409a      	lsls	r2, r3
 8008f08:	0013      	movs	r3, r2
 8008f0a:	43da      	mvns	r2, r3
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2203      	movs	r2, #3
 8008f18:	401a      	ands	r2, r3
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	409a      	lsls	r2, r3
 8008f20:	0013      	movs	r3, r2
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	23c0      	movs	r3, #192	@ 0xc0
 8008f34:	029b      	lsls	r3, r3, #10
 8008f36:	4013      	ands	r3, r2
 8008f38:	d100      	bne.n	8008f3c <HAL_GPIO_Init+0x174>
 8008f3a:	e092      	b.n	8009062 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008f3c:	4a50      	ldr	r2, [pc, #320]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	089b      	lsrs	r3, r3, #2
 8008f42:	3318      	adds	r3, #24
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	589b      	ldr	r3, [r3, r2]
 8008f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	4013      	ands	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	220f      	movs	r2, #15
 8008f54:	409a      	lsls	r2, r3
 8008f56:	0013      	movs	r3, r2
 8008f58:	43da      	mvns	r2, r3
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	23a0      	movs	r3, #160	@ 0xa0
 8008f64:	05db      	lsls	r3, r3, #23
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d013      	beq.n	8008f92 <HAL_GPIO_Init+0x1ca>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a45      	ldr	r2, [pc, #276]	@ (8009084 <HAL_GPIO_Init+0x2bc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00d      	beq.n	8008f8e <HAL_GPIO_Init+0x1c6>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a44      	ldr	r2, [pc, #272]	@ (8009088 <HAL_GPIO_Init+0x2c0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d007      	beq.n	8008f8a <HAL_GPIO_Init+0x1c2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a43      	ldr	r2, [pc, #268]	@ (800908c <HAL_GPIO_Init+0x2c4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d101      	bne.n	8008f86 <HAL_GPIO_Init+0x1be>
 8008f82:	2303      	movs	r3, #3
 8008f84:	e006      	b.n	8008f94 <HAL_GPIO_Init+0x1cc>
 8008f86:	2305      	movs	r3, #5
 8008f88:	e004      	b.n	8008f94 <HAL_GPIO_Init+0x1cc>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e002      	b.n	8008f94 <HAL_GPIO_Init+0x1cc>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <HAL_GPIO_Init+0x1cc>
 8008f92:	2300      	movs	r3, #0
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	2103      	movs	r1, #3
 8008f98:	400a      	ands	r2, r1
 8008f9a:	00d2      	lsls	r2, r2, #3
 8008f9c:	4093      	lsls	r3, r2
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008fa4:	4936      	ldr	r1, [pc, #216]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	089b      	lsrs	r3, r3, #2
 8008faa:	3318      	adds	r3, #24
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fb2:	4b33      	ldr	r3, [pc, #204]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	43da      	mvns	r2, r3
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	2380      	movs	r3, #128	@ 0x80
 8008fc8:	035b      	lsls	r3, r3, #13
 8008fca:	4013      	ands	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008fdc:	4b28      	ldr	r3, [pc, #160]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	43da      	mvns	r2, r3
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	2380      	movs	r3, #128	@ 0x80
 8008ff2:	039b      	lsls	r3, r3, #14
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	d003      	beq.n	8009000 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009000:	4b1f      	ldr	r3, [pc, #124]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009006:	4a1e      	ldr	r2, [pc, #120]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8009008:	2384      	movs	r3, #132	@ 0x84
 800900a:	58d3      	ldr	r3, [r2, r3]
 800900c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	43da      	mvns	r2, r3
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	4013      	ands	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	2380      	movs	r3, #128	@ 0x80
 800901e:	029b      	lsls	r3, r3, #10
 8009020:	4013      	ands	r3, r2
 8009022:	d003      	beq.n	800902c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4313      	orrs	r3, r2
 800902a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800902c:	4914      	ldr	r1, [pc, #80]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 800902e:	2284      	movs	r2, #132	@ 0x84
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009034:	4a12      	ldr	r2, [pc, #72]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 8009036:	2380      	movs	r3, #128	@ 0x80
 8009038:	58d3      	ldr	r3, [r2, r3]
 800903a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	43da      	mvns	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	4013      	ands	r3, r2
 8009044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	2380      	movs	r3, #128	@ 0x80
 800904c:	025b      	lsls	r3, r3, #9
 800904e:	4013      	ands	r3, r2
 8009050:	d003      	beq.n	800905a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800905a:	4909      	ldr	r1, [pc, #36]	@ (8009080 <HAL_GPIO_Init+0x2b8>)
 800905c:	2280      	movs	r2, #128	@ 0x80
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	3301      	adds	r3, #1
 8009066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	40da      	lsrs	r2, r3
 8009070:	1e13      	subs	r3, r2, #0
 8009072:	d000      	beq.n	8009076 <HAL_GPIO_Init+0x2ae>
 8009074:	e6b0      	b.n	8008dd8 <HAL_GPIO_Init+0x10>
  }
}
 8009076:	46c0      	nop			@ (mov r8, r8)
 8009078:	46c0      	nop			@ (mov r8, r8)
 800907a:	46bd      	mov	sp, r7
 800907c:	b006      	add	sp, #24
 800907e:	bd80      	pop	{r7, pc}
 8009080:	40021800 	.word	0x40021800
 8009084:	50000400 	.word	0x50000400
 8009088:	50000800 	.word	0x50000800
 800908c:	50000c00 	.word	0x50000c00

08009090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	0008      	movs	r0, r1
 800909a:	0011      	movs	r1, r2
 800909c:	1cbb      	adds	r3, r7, #2
 800909e:	1c02      	adds	r2, r0, #0
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	1c7b      	adds	r3, r7, #1
 80090a4:	1c0a      	adds	r2, r1, #0
 80090a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090a8:	1c7b      	adds	r3, r7, #1
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80090b0:	1cbb      	adds	r3, r7, #2
 80090b2:	881a      	ldrh	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80090b8:	e003      	b.n	80090c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80090ba:	1cbb      	adds	r3, r7, #2
 80090bc:	881a      	ldrh	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80090c2:	46c0      	nop			@ (mov r8, r8)
 80090c4:	46bd      	mov	sp, r7
 80090c6:	b002      	add	sp, #8
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80090d4:	4b19      	ldr	r3, [pc, #100]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a19      	ldr	r2, [pc, #100]	@ (8009140 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80090da:	4013      	ands	r3, r2
 80090dc:	0019      	movs	r1, r3
 80090de:	4b17      	ldr	r3, [pc, #92]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	2380      	movs	r3, #128	@ 0x80
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d11f      	bne.n	8009130 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80090f0:	4b14      	ldr	r3, [pc, #80]	@ (8009144 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	0013      	movs	r3, r2
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	189b      	adds	r3, r3, r2
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	4912      	ldr	r1, [pc, #72]	@ (8009148 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80090fe:	0018      	movs	r0, r3
 8009100:	f7ff f800 	bl	8008104 <__udivsi3>
 8009104:	0003      	movs	r3, r0
 8009106:	3301      	adds	r3, #1
 8009108:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800910a:	e008      	b.n	800911e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3b01      	subs	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	e001      	b.n	800911e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e009      	b.n	8009132 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800911e:	4b07      	ldr	r3, [pc, #28]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009120:	695a      	ldr	r2, [r3, #20]
 8009122:	2380      	movs	r3, #128	@ 0x80
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	401a      	ands	r2, r3
 8009128:	2380      	movs	r3, #128	@ 0x80
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	429a      	cmp	r2, r3
 800912e:	d0ed      	beq.n	800910c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	0018      	movs	r0, r3
 8009134:	46bd      	mov	sp, r7
 8009136:	b004      	add	sp, #16
 8009138:	bd80      	pop	{r7, pc}
 800913a:	46c0      	nop			@ (mov r8, r8)
 800913c:	40007000 	.word	0x40007000
 8009140:	fffff9ff 	.word	0xfffff9ff
 8009144:	20000080 	.word	0x20000080
 8009148:	000f4240 	.word	0x000f4240

0800914c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009150:	4b03      	ldr	r3, [pc, #12]	@ (8009160 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	23e0      	movs	r3, #224	@ 0xe0
 8009156:	01db      	lsls	r3, r3, #7
 8009158:	4013      	ands	r3, r2
}
 800915a:	0018      	movs	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	40021000 	.word	0x40021000

08009164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e2fe      	b.n	8009774 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2201      	movs	r2, #1
 800917c:	4013      	ands	r3, r2
 800917e:	d100      	bne.n	8009182 <HAL_RCC_OscConfig+0x1e>
 8009180:	e07c      	b.n	800927c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009182:	4bc3      	ldr	r3, [pc, #780]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	2238      	movs	r2, #56	@ 0x38
 8009188:	4013      	ands	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800918c:	4bc0      	ldr	r3, [pc, #768]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2203      	movs	r2, #3
 8009192:	4013      	ands	r3, r2
 8009194:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b10      	cmp	r3, #16
 800919a:	d102      	bne.n	80091a2 <HAL_RCC_OscConfig+0x3e>
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d002      	beq.n	80091a8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d10b      	bne.n	80091c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091a8:	4bb9      	ldr	r3, [pc, #740]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	2380      	movs	r3, #128	@ 0x80
 80091ae:	029b      	lsls	r3, r3, #10
 80091b0:	4013      	ands	r3, r2
 80091b2:	d062      	beq.n	800927a <HAL_RCC_OscConfig+0x116>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d15e      	bne.n	800927a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e2d9      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	2380      	movs	r3, #128	@ 0x80
 80091c6:	025b      	lsls	r3, r3, #9
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d107      	bne.n	80091dc <HAL_RCC_OscConfig+0x78>
 80091cc:	4bb0      	ldr	r3, [pc, #704]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4baf      	ldr	r3, [pc, #700]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80091d2:	2180      	movs	r1, #128	@ 0x80
 80091d4:	0249      	lsls	r1, r1, #9
 80091d6:	430a      	orrs	r2, r1
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	e020      	b.n	800921e <HAL_RCC_OscConfig+0xba>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	23a0      	movs	r3, #160	@ 0xa0
 80091e2:	02db      	lsls	r3, r3, #11
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d10e      	bne.n	8009206 <HAL_RCC_OscConfig+0xa2>
 80091e8:	4ba9      	ldr	r3, [pc, #676]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	4ba8      	ldr	r3, [pc, #672]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80091ee:	2180      	movs	r1, #128	@ 0x80
 80091f0:	02c9      	lsls	r1, r1, #11
 80091f2:	430a      	orrs	r2, r1
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	4ba6      	ldr	r3, [pc, #664]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4ba5      	ldr	r3, [pc, #660]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80091fc:	2180      	movs	r1, #128	@ 0x80
 80091fe:	0249      	lsls	r1, r1, #9
 8009200:	430a      	orrs	r2, r1
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e00b      	b.n	800921e <HAL_RCC_OscConfig+0xba>
 8009206:	4ba2      	ldr	r3, [pc, #648]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	4ba1      	ldr	r3, [pc, #644]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800920c:	49a1      	ldr	r1, [pc, #644]	@ (8009494 <HAL_RCC_OscConfig+0x330>)
 800920e:	400a      	ands	r2, r1
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	4b9f      	ldr	r3, [pc, #636]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b9e      	ldr	r3, [pc, #632]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009218:	499f      	ldr	r1, [pc, #636]	@ (8009498 <HAL_RCC_OscConfig+0x334>)
 800921a:	400a      	ands	r2, r1
 800921c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d014      	beq.n	8009250 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009226:	f7ff fced 	bl	8008c04 <HAL_GetTick>
 800922a:	0003      	movs	r3, r0
 800922c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009230:	f7ff fce8 	bl	8008c04 <HAL_GetTick>
 8009234:	0002      	movs	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b64      	cmp	r3, #100	@ 0x64
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e298      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009242:	4b93      	ldr	r3, [pc, #588]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	2380      	movs	r3, #128	@ 0x80
 8009248:	029b      	lsls	r3, r3, #10
 800924a:	4013      	ands	r3, r2
 800924c:	d0f0      	beq.n	8009230 <HAL_RCC_OscConfig+0xcc>
 800924e:	e015      	b.n	800927c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009250:	f7ff fcd8 	bl	8008c04 <HAL_GetTick>
 8009254:	0003      	movs	r3, r0
 8009256:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009258:	e008      	b.n	800926c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800925a:	f7ff fcd3 	bl	8008c04 <HAL_GetTick>
 800925e:	0002      	movs	r2, r0
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b64      	cmp	r3, #100	@ 0x64
 8009266:	d901      	bls.n	800926c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e283      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800926c:	4b88      	ldr	r3, [pc, #544]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	2380      	movs	r3, #128	@ 0x80
 8009272:	029b      	lsls	r3, r3, #10
 8009274:	4013      	ands	r3, r2
 8009276:	d1f0      	bne.n	800925a <HAL_RCC_OscConfig+0xf6>
 8009278:	e000      	b.n	800927c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800927a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2202      	movs	r2, #2
 8009282:	4013      	ands	r3, r2
 8009284:	d100      	bne.n	8009288 <HAL_RCC_OscConfig+0x124>
 8009286:	e099      	b.n	80093bc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009288:	4b81      	ldr	r3, [pc, #516]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	2238      	movs	r2, #56	@ 0x38
 800928e:	4013      	ands	r3, r2
 8009290:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009292:	4b7f      	ldr	r3, [pc, #508]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	2203      	movs	r2, #3
 8009298:	4013      	ands	r3, r2
 800929a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b10      	cmp	r3, #16
 80092a0:	d102      	bne.n	80092a8 <HAL_RCC_OscConfig+0x144>
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d002      	beq.n	80092ae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d135      	bne.n	800931a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092ae:	4b78      	ldr	r3, [pc, #480]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	2380      	movs	r3, #128	@ 0x80
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	4013      	ands	r3, r2
 80092b8:	d005      	beq.n	80092c6 <HAL_RCC_OscConfig+0x162>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e256      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092c6:	4b72      	ldr	r3, [pc, #456]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	4a74      	ldr	r2, [pc, #464]	@ (800949c <HAL_RCC_OscConfig+0x338>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	0019      	movs	r1, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	021a      	lsls	r2, r3, #8
 80092d6:	4b6e      	ldr	r3, [pc, #440]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80092d8:	430a      	orrs	r2, r1
 80092da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d112      	bne.n	8009308 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80092e2:	4b6b      	ldr	r3, [pc, #428]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a6e      	ldr	r2, [pc, #440]	@ (80094a0 <HAL_RCC_OscConfig+0x33c>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	0019      	movs	r1, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	4b67      	ldr	r3, [pc, #412]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80092f2:	430a      	orrs	r2, r1
 80092f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80092f6:	4b66      	ldr	r3, [pc, #408]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	0adb      	lsrs	r3, r3, #11
 80092fc:	2207      	movs	r2, #7
 80092fe:	4013      	ands	r3, r2
 8009300:	4a68      	ldr	r2, [pc, #416]	@ (80094a4 <HAL_RCC_OscConfig+0x340>)
 8009302:	40da      	lsrs	r2, r3
 8009304:	4b68      	ldr	r3, [pc, #416]	@ (80094a8 <HAL_RCC_OscConfig+0x344>)
 8009306:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009308:	4b68      	ldr	r3, [pc, #416]	@ (80094ac <HAL_RCC_OscConfig+0x348>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	0018      	movs	r0, r3
 800930e:	f7ff fc1d 	bl	8008b4c <HAL_InitTick>
 8009312:	1e03      	subs	r3, r0, #0
 8009314:	d051      	beq.n	80093ba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e22c      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d030      	beq.n	8009384 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009322:	4b5b      	ldr	r3, [pc, #364]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a5e      	ldr	r2, [pc, #376]	@ (80094a0 <HAL_RCC_OscConfig+0x33c>)
 8009328:	4013      	ands	r3, r2
 800932a:	0019      	movs	r1, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691a      	ldr	r2, [r3, #16]
 8009330:	4b57      	ldr	r3, [pc, #348]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009332:	430a      	orrs	r2, r1
 8009334:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009336:	4b56      	ldr	r3, [pc, #344]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b55      	ldr	r3, [pc, #340]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800933c:	2180      	movs	r1, #128	@ 0x80
 800933e:	0049      	lsls	r1, r1, #1
 8009340:	430a      	orrs	r2, r1
 8009342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7ff fc5e 	bl	8008c04 <HAL_GetTick>
 8009348:	0003      	movs	r3, r0
 800934a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800934c:	e008      	b.n	8009360 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800934e:	f7ff fc59 	bl	8008c04 <HAL_GetTick>
 8009352:	0002      	movs	r2, r0
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	2b02      	cmp	r3, #2
 800935a:	d901      	bls.n	8009360 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e209      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009360:	4b4b      	ldr	r3, [pc, #300]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	2380      	movs	r3, #128	@ 0x80
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4013      	ands	r3, r2
 800936a:	d0f0      	beq.n	800934e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800936c:	4b48      	ldr	r3, [pc, #288]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	4a4a      	ldr	r2, [pc, #296]	@ (800949c <HAL_RCC_OscConfig+0x338>)
 8009372:	4013      	ands	r3, r2
 8009374:	0019      	movs	r1, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	021a      	lsls	r2, r3, #8
 800937c:	4b44      	ldr	r3, [pc, #272]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
 8009382:	e01b      	b.n	80093bc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009384:	4b42      	ldr	r3, [pc, #264]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	4b41      	ldr	r3, [pc, #260]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800938a:	4949      	ldr	r1, [pc, #292]	@ (80094b0 <HAL_RCC_OscConfig+0x34c>)
 800938c:	400a      	ands	r2, r1
 800938e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009390:	f7ff fc38 	bl	8008c04 <HAL_GetTick>
 8009394:	0003      	movs	r3, r0
 8009396:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009398:	e008      	b.n	80093ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800939a:	f7ff fc33 	bl	8008c04 <HAL_GetTick>
 800939e:	0002      	movs	r2, r0
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d901      	bls.n	80093ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e1e3      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80093ac:	4b38      	ldr	r3, [pc, #224]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	2380      	movs	r3, #128	@ 0x80
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	4013      	ands	r3, r2
 80093b6:	d1f0      	bne.n	800939a <HAL_RCC_OscConfig+0x236>
 80093b8:	e000      	b.n	80093bc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093ba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2208      	movs	r2, #8
 80093c2:	4013      	ands	r3, r2
 80093c4:	d047      	beq.n	8009456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80093c6:	4b32      	ldr	r3, [pc, #200]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2238      	movs	r2, #56	@ 0x38
 80093cc:	4013      	ands	r3, r2
 80093ce:	2b18      	cmp	r3, #24
 80093d0:	d10a      	bne.n	80093e8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80093d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80093d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d6:	2202      	movs	r2, #2
 80093d8:	4013      	ands	r3, r2
 80093da:	d03c      	beq.n	8009456 <HAL_RCC_OscConfig+0x2f2>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d138      	bne.n	8009456 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e1c5      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d019      	beq.n	8009424 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80093f0:	4b27      	ldr	r3, [pc, #156]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80093f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80093f4:	4b26      	ldr	r3, [pc, #152]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 80093f6:	2101      	movs	r1, #1
 80093f8:	430a      	orrs	r2, r1
 80093fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093fc:	f7ff fc02 	bl	8008c04 <HAL_GetTick>
 8009400:	0003      	movs	r3, r0
 8009402:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009404:	e008      	b.n	8009418 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009406:	f7ff fbfd 	bl	8008c04 <HAL_GetTick>
 800940a:	0002      	movs	r2, r0
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d901      	bls.n	8009418 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e1ad      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009418:	4b1d      	ldr	r3, [pc, #116]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800941a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941c:	2202      	movs	r2, #2
 800941e:	4013      	ands	r3, r2
 8009420:	d0f1      	beq.n	8009406 <HAL_RCC_OscConfig+0x2a2>
 8009422:	e018      	b.n	8009456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009424:	4b1a      	ldr	r3, [pc, #104]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009426:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009428:	4b19      	ldr	r3, [pc, #100]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800942a:	2101      	movs	r1, #1
 800942c:	438a      	bics	r2, r1
 800942e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009430:	f7ff fbe8 	bl	8008c04 <HAL_GetTick>
 8009434:	0003      	movs	r3, r0
 8009436:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009438:	e008      	b.n	800944c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800943a:	f7ff fbe3 	bl	8008c04 <HAL_GetTick>
 800943e:	0002      	movs	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e193      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800944c:	4b10      	ldr	r3, [pc, #64]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800944e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009450:	2202      	movs	r2, #2
 8009452:	4013      	ands	r3, r2
 8009454:	d1f1      	bne.n	800943a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2204      	movs	r2, #4
 800945c:	4013      	ands	r3, r2
 800945e:	d100      	bne.n	8009462 <HAL_RCC_OscConfig+0x2fe>
 8009460:	e0c6      	b.n	80095f0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009462:	231f      	movs	r3, #31
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800946a:	4b09      	ldr	r3, [pc, #36]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	2238      	movs	r2, #56	@ 0x38
 8009470:	4013      	ands	r3, r2
 8009472:	2b20      	cmp	r3, #32
 8009474:	d11e      	bne.n	80094b4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009476:	4b06      	ldr	r3, [pc, #24]	@ (8009490 <HAL_RCC_OscConfig+0x32c>)
 8009478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800947a:	2202      	movs	r2, #2
 800947c:	4013      	ands	r3, r2
 800947e:	d100      	bne.n	8009482 <HAL_RCC_OscConfig+0x31e>
 8009480:	e0b6      	b.n	80095f0 <HAL_RCC_OscConfig+0x48c>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d000      	beq.n	800948c <HAL_RCC_OscConfig+0x328>
 800948a:	e0b1      	b.n	80095f0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e171      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
 8009490:	40021000 	.word	0x40021000
 8009494:	fffeffff 	.word	0xfffeffff
 8009498:	fffbffff 	.word	0xfffbffff
 800949c:	ffff80ff 	.word	0xffff80ff
 80094a0:	ffffc7ff 	.word	0xffffc7ff
 80094a4:	00f42400 	.word	0x00f42400
 80094a8:	20000080 	.word	0x20000080
 80094ac:	20000084 	.word	0x20000084
 80094b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80094b4:	4bb1      	ldr	r3, [pc, #708]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80094b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094b8:	2380      	movs	r3, #128	@ 0x80
 80094ba:	055b      	lsls	r3, r3, #21
 80094bc:	4013      	ands	r3, r2
 80094be:	d101      	bne.n	80094c4 <HAL_RCC_OscConfig+0x360>
 80094c0:	2301      	movs	r3, #1
 80094c2:	e000      	b.n	80094c6 <HAL_RCC_OscConfig+0x362>
 80094c4:	2300      	movs	r3, #0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d011      	beq.n	80094ee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80094ca:	4bac      	ldr	r3, [pc, #688]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80094cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094ce:	4bab      	ldr	r3, [pc, #684]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80094d0:	2180      	movs	r1, #128	@ 0x80
 80094d2:	0549      	lsls	r1, r1, #21
 80094d4:	430a      	orrs	r2, r1
 80094d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80094d8:	4ba8      	ldr	r3, [pc, #672]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80094da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094dc:	2380      	movs	r3, #128	@ 0x80
 80094de:	055b      	lsls	r3, r3, #21
 80094e0:	4013      	ands	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80094e6:	231f      	movs	r3, #31
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	2201      	movs	r2, #1
 80094ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094ee:	4ba4      	ldr	r3, [pc, #656]	@ (8009780 <HAL_RCC_OscConfig+0x61c>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	2380      	movs	r3, #128	@ 0x80
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	4013      	ands	r3, r2
 80094f8:	d11a      	bne.n	8009530 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094fa:	4ba1      	ldr	r3, [pc, #644]	@ (8009780 <HAL_RCC_OscConfig+0x61c>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4ba0      	ldr	r3, [pc, #640]	@ (8009780 <HAL_RCC_OscConfig+0x61c>)
 8009500:	2180      	movs	r1, #128	@ 0x80
 8009502:	0049      	lsls	r1, r1, #1
 8009504:	430a      	orrs	r2, r1
 8009506:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009508:	f7ff fb7c 	bl	8008c04 <HAL_GetTick>
 800950c:	0003      	movs	r3, r0
 800950e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009510:	e008      	b.n	8009524 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009512:	f7ff fb77 	bl	8008c04 <HAL_GetTick>
 8009516:	0002      	movs	r2, r0
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d901      	bls.n	8009524 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e127      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009524:	4b96      	ldr	r3, [pc, #600]	@ (8009780 <HAL_RCC_OscConfig+0x61c>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	2380      	movs	r3, #128	@ 0x80
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	4013      	ands	r3, r2
 800952e:	d0f0      	beq.n	8009512 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d106      	bne.n	8009546 <HAL_RCC_OscConfig+0x3e2>
 8009538:	4b90      	ldr	r3, [pc, #576]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800953a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800953c:	4b8f      	ldr	r3, [pc, #572]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800953e:	2101      	movs	r1, #1
 8009540:	430a      	orrs	r2, r1
 8009542:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009544:	e01c      	b.n	8009580 <HAL_RCC_OscConfig+0x41c>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	2b05      	cmp	r3, #5
 800954c:	d10c      	bne.n	8009568 <HAL_RCC_OscConfig+0x404>
 800954e:	4b8b      	ldr	r3, [pc, #556]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009552:	4b8a      	ldr	r3, [pc, #552]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009554:	2104      	movs	r1, #4
 8009556:	430a      	orrs	r2, r1
 8009558:	65da      	str	r2, [r3, #92]	@ 0x5c
 800955a:	4b88      	ldr	r3, [pc, #544]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800955c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800955e:	4b87      	ldr	r3, [pc, #540]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009560:	2101      	movs	r1, #1
 8009562:	430a      	orrs	r2, r1
 8009564:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009566:	e00b      	b.n	8009580 <HAL_RCC_OscConfig+0x41c>
 8009568:	4b84      	ldr	r3, [pc, #528]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800956a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800956c:	4b83      	ldr	r3, [pc, #524]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800956e:	2101      	movs	r1, #1
 8009570:	438a      	bics	r2, r1
 8009572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009574:	4b81      	ldr	r3, [pc, #516]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009576:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009578:	4b80      	ldr	r3, [pc, #512]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800957a:	2104      	movs	r1, #4
 800957c:	438a      	bics	r2, r1
 800957e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d014      	beq.n	80095b2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009588:	f7ff fb3c 	bl	8008c04 <HAL_GetTick>
 800958c:	0003      	movs	r3, r0
 800958e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009590:	e009      	b.n	80095a6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009592:	f7ff fb37 	bl	8008c04 <HAL_GetTick>
 8009596:	0002      	movs	r2, r0
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	4a79      	ldr	r2, [pc, #484]	@ (8009784 <HAL_RCC_OscConfig+0x620>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e0e6      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095a6:	4b75      	ldr	r3, [pc, #468]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80095a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095aa:	2202      	movs	r2, #2
 80095ac:	4013      	ands	r3, r2
 80095ae:	d0f0      	beq.n	8009592 <HAL_RCC_OscConfig+0x42e>
 80095b0:	e013      	b.n	80095da <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b2:	f7ff fb27 	bl	8008c04 <HAL_GetTick>
 80095b6:	0003      	movs	r3, r0
 80095b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80095ba:	e009      	b.n	80095d0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095bc:	f7ff fb22 	bl	8008c04 <HAL_GetTick>
 80095c0:	0002      	movs	r2, r0
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	4a6f      	ldr	r2, [pc, #444]	@ (8009784 <HAL_RCC_OscConfig+0x620>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e0d1      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80095d0:	4b6a      	ldr	r3, [pc, #424]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80095d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095d4:	2202      	movs	r2, #2
 80095d6:	4013      	ands	r3, r2
 80095d8:	d1f0      	bne.n	80095bc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80095da:	231f      	movs	r3, #31
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d105      	bne.n	80095f0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80095e4:	4b65      	ldr	r3, [pc, #404]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80095e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095e8:	4b64      	ldr	r3, [pc, #400]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80095ea:	4967      	ldr	r1, [pc, #412]	@ (8009788 <HAL_RCC_OscConfig+0x624>)
 80095ec:	400a      	ands	r2, r1
 80095ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d100      	bne.n	80095fa <HAL_RCC_OscConfig+0x496>
 80095f8:	e0bb      	b.n	8009772 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095fa:	4b60      	ldr	r3, [pc, #384]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	2238      	movs	r2, #56	@ 0x38
 8009600:	4013      	ands	r3, r2
 8009602:	2b10      	cmp	r3, #16
 8009604:	d100      	bne.n	8009608 <HAL_RCC_OscConfig+0x4a4>
 8009606:	e07b      	b.n	8009700 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	2b02      	cmp	r3, #2
 800960e:	d156      	bne.n	80096be <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009610:	4b5a      	ldr	r3, [pc, #360]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4b59      	ldr	r3, [pc, #356]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009616:	495d      	ldr	r1, [pc, #372]	@ (800978c <HAL_RCC_OscConfig+0x628>)
 8009618:	400a      	ands	r2, r1
 800961a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800961c:	f7ff faf2 	bl	8008c04 <HAL_GetTick>
 8009620:	0003      	movs	r3, r0
 8009622:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009624:	e008      	b.n	8009638 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009626:	f7ff faed 	bl	8008c04 <HAL_GetTick>
 800962a:	0002      	movs	r2, r0
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	2b02      	cmp	r3, #2
 8009632:	d901      	bls.n	8009638 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e09d      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009638:	4b50      	ldr	r3, [pc, #320]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	2380      	movs	r3, #128	@ 0x80
 800963e:	049b      	lsls	r3, r3, #18
 8009640:	4013      	ands	r3, r2
 8009642:	d1f0      	bne.n	8009626 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009644:	4b4d      	ldr	r3, [pc, #308]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a51      	ldr	r2, [pc, #324]	@ (8009790 <HAL_RCC_OscConfig+0x62c>)
 800964a:	4013      	ands	r3, r2
 800964c:	0019      	movs	r1, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1a      	ldr	r2, [r3, #32]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009664:	431a      	orrs	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009670:	431a      	orrs	r2, r3
 8009672:	4b42      	ldr	r3, [pc, #264]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009674:	430a      	orrs	r2, r1
 8009676:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009678:	4b40      	ldr	r3, [pc, #256]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4b3f      	ldr	r3, [pc, #252]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800967e:	2180      	movs	r1, #128	@ 0x80
 8009680:	0449      	lsls	r1, r1, #17
 8009682:	430a      	orrs	r2, r1
 8009684:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009686:	4b3d      	ldr	r3, [pc, #244]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	4b3c      	ldr	r3, [pc, #240]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800968c:	2180      	movs	r1, #128	@ 0x80
 800968e:	0549      	lsls	r1, r1, #21
 8009690:	430a      	orrs	r2, r1
 8009692:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009694:	f7ff fab6 	bl	8008c04 <HAL_GetTick>
 8009698:	0003      	movs	r3, r0
 800969a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800969c:	e008      	b.n	80096b0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800969e:	f7ff fab1 	bl	8008c04 <HAL_GetTick>
 80096a2:	0002      	movs	r2, r0
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d901      	bls.n	80096b0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e061      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096b0:	4b32      	ldr	r3, [pc, #200]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	2380      	movs	r3, #128	@ 0x80
 80096b6:	049b      	lsls	r3, r3, #18
 80096b8:	4013      	ands	r3, r2
 80096ba:	d0f0      	beq.n	800969e <HAL_RCC_OscConfig+0x53a>
 80096bc:	e059      	b.n	8009772 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096be:	4b2f      	ldr	r3, [pc, #188]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b2e      	ldr	r3, [pc, #184]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80096c4:	4931      	ldr	r1, [pc, #196]	@ (800978c <HAL_RCC_OscConfig+0x628>)
 80096c6:	400a      	ands	r2, r1
 80096c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ca:	f7ff fa9b 	bl	8008c04 <HAL_GetTick>
 80096ce:	0003      	movs	r3, r0
 80096d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096d2:	e008      	b.n	80096e6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096d4:	f7ff fa96 	bl	8008c04 <HAL_GetTick>
 80096d8:	0002      	movs	r2, r0
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e046      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096e6:	4b25      	ldr	r3, [pc, #148]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	2380      	movs	r3, #128	@ 0x80
 80096ec:	049b      	lsls	r3, r3, #18
 80096ee:	4013      	ands	r3, r2
 80096f0:	d1f0      	bne.n	80096d4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80096f2:	4b22      	ldr	r3, [pc, #136]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	4b21      	ldr	r3, [pc, #132]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 80096f8:	4926      	ldr	r1, [pc, #152]	@ (8009794 <HAL_RCC_OscConfig+0x630>)
 80096fa:	400a      	ands	r2, r1
 80096fc:	60da      	str	r2, [r3, #12]
 80096fe:	e038      	b.n	8009772 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e033      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800970c:	4b1b      	ldr	r3, [pc, #108]	@ (800977c <HAL_RCC_OscConfig+0x618>)
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2203      	movs	r2, #3
 8009716:	401a      	ands	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	429a      	cmp	r2, r3
 800971e:	d126      	bne.n	800976e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2270      	movs	r2, #112	@ 0x70
 8009724:	401a      	ands	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800972a:	429a      	cmp	r2, r3
 800972c:	d11f      	bne.n	800976e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	23fe      	movs	r3, #254	@ 0xfe
 8009732:	01db      	lsls	r3, r3, #7
 8009734:	401a      	ands	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800973c:	429a      	cmp	r2, r3
 800973e:	d116      	bne.n	800976e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	23f8      	movs	r3, #248	@ 0xf8
 8009744:	039b      	lsls	r3, r3, #14
 8009746:	401a      	ands	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800974c:	429a      	cmp	r2, r3
 800974e:	d10e      	bne.n	800976e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	23e0      	movs	r3, #224	@ 0xe0
 8009754:	051b      	lsls	r3, r3, #20
 8009756:	401a      	ands	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800975c:	429a      	cmp	r2, r3
 800975e:	d106      	bne.n	800976e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	0f5b      	lsrs	r3, r3, #29
 8009764:	075a      	lsls	r2, r3, #29
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800976a:	429a      	cmp	r2, r3
 800976c:	d001      	beq.n	8009772 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e000      	b.n	8009774 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	0018      	movs	r0, r3
 8009776:	46bd      	mov	sp, r7
 8009778:	b008      	add	sp, #32
 800977a:	bd80      	pop	{r7, pc}
 800977c:	40021000 	.word	0x40021000
 8009780:	40007000 	.word	0x40007000
 8009784:	00001388 	.word	0x00001388
 8009788:	efffffff 	.word	0xefffffff
 800978c:	feffffff 	.word	0xfeffffff
 8009790:	11c1808c 	.word	0x11c1808c
 8009794:	eefefffc 	.word	0xeefefffc

08009798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e0e9      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097ac:	4b76      	ldr	r3, [pc, #472]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2207      	movs	r2, #7
 80097b2:	4013      	ands	r3, r2
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d91e      	bls.n	80097f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097ba:	4b73      	ldr	r3, [pc, #460]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2207      	movs	r2, #7
 80097c0:	4393      	bics	r3, r2
 80097c2:	0019      	movs	r1, r3
 80097c4:	4b70      	ldr	r3, [pc, #448]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80097cc:	f7ff fa1a 	bl	8008c04 <HAL_GetTick>
 80097d0:	0003      	movs	r3, r0
 80097d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80097d4:	e009      	b.n	80097ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d6:	f7ff fa15 	bl	8008c04 <HAL_GetTick>
 80097da:	0002      	movs	r2, r0
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	4a6a      	ldr	r2, [pc, #424]	@ (800998c <HAL_RCC_ClockConfig+0x1f4>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e0ca      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80097ea:	4b67      	ldr	r3, [pc, #412]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2207      	movs	r2, #7
 80097f0:	4013      	ands	r3, r2
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d1ee      	bne.n	80097d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2202      	movs	r2, #2
 80097fe:	4013      	ands	r3, r2
 8009800:	d015      	beq.n	800982e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2204      	movs	r2, #4
 8009808:	4013      	ands	r3, r2
 800980a:	d006      	beq.n	800981a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800980c:	4b60      	ldr	r3, [pc, #384]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	4b5f      	ldr	r3, [pc, #380]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 8009812:	21e0      	movs	r1, #224	@ 0xe0
 8009814:	01c9      	lsls	r1, r1, #7
 8009816:	430a      	orrs	r2, r1
 8009818:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800981a:	4b5d      	ldr	r3, [pc, #372]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	4a5d      	ldr	r2, [pc, #372]	@ (8009994 <HAL_RCC_ClockConfig+0x1fc>)
 8009820:	4013      	ands	r3, r2
 8009822:	0019      	movs	r1, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	4b59      	ldr	r3, [pc, #356]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 800982a:	430a      	orrs	r2, r1
 800982c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2201      	movs	r2, #1
 8009834:	4013      	ands	r3, r2
 8009836:	d057      	beq.n	80098e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d107      	bne.n	8009850 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009840:	4b53      	ldr	r3, [pc, #332]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	2380      	movs	r3, #128	@ 0x80
 8009846:	029b      	lsls	r3, r3, #10
 8009848:	4013      	ands	r3, r2
 800984a:	d12b      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e097      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d107      	bne.n	8009868 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009858:	4b4d      	ldr	r3, [pc, #308]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	2380      	movs	r3, #128	@ 0x80
 800985e:	049b      	lsls	r3, r3, #18
 8009860:	4013      	ands	r3, r2
 8009862:	d11f      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e08b      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d107      	bne.n	8009880 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009870:	4b47      	ldr	r3, [pc, #284]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	2380      	movs	r3, #128	@ 0x80
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	4013      	ands	r3, r2
 800987a:	d113      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e07f      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d106      	bne.n	8009896 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009888:	4b41      	ldr	r3, [pc, #260]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 800988a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800988c:	2202      	movs	r2, #2
 800988e:	4013      	ands	r3, r2
 8009890:	d108      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e074      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009896:	4b3e      	ldr	r3, [pc, #248]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 8009898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800989a:	2202      	movs	r2, #2
 800989c:	4013      	ands	r3, r2
 800989e:	d101      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e06d      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80098a4:	4b3a      	ldr	r3, [pc, #232]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	2207      	movs	r2, #7
 80098aa:	4393      	bics	r3, r2
 80098ac:	0019      	movs	r1, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	4b37      	ldr	r3, [pc, #220]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 80098b4:	430a      	orrs	r2, r1
 80098b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098b8:	f7ff f9a4 	bl	8008c04 <HAL_GetTick>
 80098bc:	0003      	movs	r3, r0
 80098be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098c0:	e009      	b.n	80098d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098c2:	f7ff f99f 	bl	8008c04 <HAL_GetTick>
 80098c6:	0002      	movs	r2, r0
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	4a2f      	ldr	r2, [pc, #188]	@ (800998c <HAL_RCC_ClockConfig+0x1f4>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d901      	bls.n	80098d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e054      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	2238      	movs	r2, #56	@ 0x38
 80098dc:	401a      	ands	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d1ec      	bne.n	80098c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098e8:	4b27      	ldr	r3, [pc, #156]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2207      	movs	r2, #7
 80098ee:	4013      	ands	r3, r2
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d21e      	bcs.n	8009934 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098f6:	4b24      	ldr	r3, [pc, #144]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2207      	movs	r2, #7
 80098fc:	4393      	bics	r3, r2
 80098fe:	0019      	movs	r1, r3
 8009900:	4b21      	ldr	r3, [pc, #132]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009908:	f7ff f97c 	bl	8008c04 <HAL_GetTick>
 800990c:	0003      	movs	r3, r0
 800990e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009910:	e009      	b.n	8009926 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009912:	f7ff f977 	bl	8008c04 <HAL_GetTick>
 8009916:	0002      	movs	r2, r0
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	4a1b      	ldr	r2, [pc, #108]	@ (800998c <HAL_RCC_ClockConfig+0x1f4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d901      	bls.n	8009926 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e02c      	b.n	8009980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009926:	4b18      	ldr	r3, [pc, #96]	@ (8009988 <HAL_RCC_ClockConfig+0x1f0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2207      	movs	r2, #7
 800992c:	4013      	ands	r3, r2
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d1ee      	bne.n	8009912 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2204      	movs	r2, #4
 800993a:	4013      	ands	r3, r2
 800993c:	d009      	beq.n	8009952 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800993e:	4b14      	ldr	r3, [pc, #80]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	4a15      	ldr	r2, [pc, #84]	@ (8009998 <HAL_RCC_ClockConfig+0x200>)
 8009944:	4013      	ands	r3, r2
 8009946:	0019      	movs	r1, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	4b10      	ldr	r3, [pc, #64]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 800994e:	430a      	orrs	r2, r1
 8009950:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009952:	f000 f829 	bl	80099a8 <HAL_RCC_GetSysClockFreq>
 8009956:	0001      	movs	r1, r0
 8009958:	4b0d      	ldr	r3, [pc, #52]	@ (8009990 <HAL_RCC_ClockConfig+0x1f8>)
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	0a1b      	lsrs	r3, r3, #8
 800995e:	220f      	movs	r2, #15
 8009960:	401a      	ands	r2, r3
 8009962:	4b0e      	ldr	r3, [pc, #56]	@ (800999c <HAL_RCC_ClockConfig+0x204>)
 8009964:	0092      	lsls	r2, r2, #2
 8009966:	58d3      	ldr	r3, [r2, r3]
 8009968:	221f      	movs	r2, #31
 800996a:	4013      	ands	r3, r2
 800996c:	000a      	movs	r2, r1
 800996e:	40da      	lsrs	r2, r3
 8009970:	4b0b      	ldr	r3, [pc, #44]	@ (80099a0 <HAL_RCC_ClockConfig+0x208>)
 8009972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009974:	4b0b      	ldr	r3, [pc, #44]	@ (80099a4 <HAL_RCC_ClockConfig+0x20c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	0018      	movs	r0, r3
 800997a:	f7ff f8e7 	bl	8008b4c <HAL_InitTick>
 800997e:	0003      	movs	r3, r0
}
 8009980:	0018      	movs	r0, r3
 8009982:	46bd      	mov	sp, r7
 8009984:	b004      	add	sp, #16
 8009986:	bd80      	pop	{r7, pc}
 8009988:	40022000 	.word	0x40022000
 800998c:	00001388 	.word	0x00001388
 8009990:	40021000 	.word	0x40021000
 8009994:	fffff0ff 	.word	0xfffff0ff
 8009998:	ffff8fff 	.word	0xffff8fff
 800999c:	0800b660 	.word	0x0800b660
 80099a0:	20000080 	.word	0x20000080
 80099a4:	20000084 	.word	0x20000084

080099a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80099ae:	4b3c      	ldr	r3, [pc, #240]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	2238      	movs	r2, #56	@ 0x38
 80099b4:	4013      	ands	r3, r2
 80099b6:	d10f      	bne.n	80099d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80099b8:	4b39      	ldr	r3, [pc, #228]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	0adb      	lsrs	r3, r3, #11
 80099be:	2207      	movs	r2, #7
 80099c0:	4013      	ands	r3, r2
 80099c2:	2201      	movs	r2, #1
 80099c4:	409a      	lsls	r2, r3
 80099c6:	0013      	movs	r3, r2
 80099c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	4835      	ldr	r0, [pc, #212]	@ (8009aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80099ce:	f7fe fb99 	bl	8008104 <__udivsi3>
 80099d2:	0003      	movs	r3, r0
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	e05d      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80099d8:	4b31      	ldr	r3, [pc, #196]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2238      	movs	r2, #56	@ 0x38
 80099de:	4013      	ands	r3, r2
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d102      	bne.n	80099ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80099e4:	4b30      	ldr	r3, [pc, #192]	@ (8009aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 80099e6:	613b      	str	r3, [r7, #16]
 80099e8:	e054      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80099ea:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	2238      	movs	r2, #56	@ 0x38
 80099f0:	4013      	ands	r3, r2
 80099f2:	2b10      	cmp	r3, #16
 80099f4:	d138      	bne.n	8009a68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80099f6:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	2203      	movs	r2, #3
 80099fc:	4013      	ands	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a00:	4b27      	ldr	r3, [pc, #156]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	091b      	lsrs	r3, r3, #4
 8009a06:	2207      	movs	r2, #7
 8009a08:	4013      	ands	r3, r2
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d10d      	bne.n	8009a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a14:	68b9      	ldr	r1, [r7, #8]
 8009a16:	4824      	ldr	r0, [pc, #144]	@ (8009aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8009a18:	f7fe fb74 	bl	8008104 <__udivsi3>
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	0019      	movs	r1, r3
 8009a20:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	0a1b      	lsrs	r3, r3, #8
 8009a26:	227f      	movs	r2, #127	@ 0x7f
 8009a28:	4013      	ands	r3, r2
 8009a2a:	434b      	muls	r3, r1
 8009a2c:	617b      	str	r3, [r7, #20]
        break;
 8009a2e:	e00d      	b.n	8009a4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	481c      	ldr	r0, [pc, #112]	@ (8009aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009a34:	f7fe fb66 	bl	8008104 <__udivsi3>
 8009a38:	0003      	movs	r3, r0
 8009a3a:	0019      	movs	r1, r3
 8009a3c:	4b18      	ldr	r3, [pc, #96]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	0a1b      	lsrs	r3, r3, #8
 8009a42:	227f      	movs	r2, #127	@ 0x7f
 8009a44:	4013      	ands	r3, r2
 8009a46:	434b      	muls	r3, r1
 8009a48:	617b      	str	r3, [r7, #20]
        break;
 8009a4a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009a4c:	4b14      	ldr	r3, [pc, #80]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	0f5b      	lsrs	r3, r3, #29
 8009a52:	2207      	movs	r2, #7
 8009a54:	4013      	ands	r3, r2
 8009a56:	3301      	adds	r3, #1
 8009a58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	6978      	ldr	r0, [r7, #20]
 8009a5e:	f7fe fb51 	bl	8008104 <__udivsi3>
 8009a62:	0003      	movs	r3, r0
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	e015      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009a68:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2238      	movs	r2, #56	@ 0x38
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d103      	bne.n	8009a7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009a74:	2380      	movs	r3, #128	@ 0x80
 8009a76:	021b      	lsls	r3, r3, #8
 8009a78:	613b      	str	r3, [r7, #16]
 8009a7a:	e00b      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009a7c:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2238      	movs	r2, #56	@ 0x38
 8009a82:	4013      	ands	r3, r2
 8009a84:	2b18      	cmp	r3, #24
 8009a86:	d103      	bne.n	8009a90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009a88:	23fa      	movs	r3, #250	@ 0xfa
 8009a8a:	01db      	lsls	r3, r3, #7
 8009a8c:	613b      	str	r3, [r7, #16]
 8009a8e:	e001      	b.n	8009a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009a94:	693b      	ldr	r3, [r7, #16]
}
 8009a96:	0018      	movs	r0, r3
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	b006      	add	sp, #24
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	46c0      	nop			@ (mov r8, r8)
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	00f42400 	.word	0x00f42400
 8009aa8:	007a1200 	.word	0x007a1200

08009aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ab0:	4b02      	ldr	r3, [pc, #8]	@ (8009abc <HAL_RCC_GetHCLKFreq+0x10>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
}
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	46c0      	nop			@ (mov r8, r8)
 8009abc:	20000080 	.word	0x20000080

08009ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ac0:	b5b0      	push	{r4, r5, r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009ac4:	f7ff fff2 	bl	8009aac <HAL_RCC_GetHCLKFreq>
 8009ac8:	0004      	movs	r4, r0
 8009aca:	f7ff fb3f 	bl	800914c <LL_RCC_GetAPB1Prescaler>
 8009ace:	0003      	movs	r3, r0
 8009ad0:	0b1a      	lsrs	r2, r3, #12
 8009ad2:	4b05      	ldr	r3, [pc, #20]	@ (8009ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ad4:	0092      	lsls	r2, r2, #2
 8009ad6:	58d3      	ldr	r3, [r2, r3]
 8009ad8:	221f      	movs	r2, #31
 8009ada:	4013      	ands	r3, r2
 8009adc:	40dc      	lsrs	r4, r3
 8009ade:	0023      	movs	r3, r4
}
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ae6:	46c0      	nop			@ (mov r8, r8)
 8009ae8:	0800b6a0 	.word	0x0800b6a0

08009aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009af4:	2313      	movs	r3, #19
 8009af6:	18fb      	adds	r3, r7, r3
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009afc:	2312      	movs	r3, #18
 8009afe:	18fb      	adds	r3, r7, r3
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	2380      	movs	r3, #128	@ 0x80
 8009b0a:	029b      	lsls	r3, r3, #10
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	d100      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009b10:	e0a3      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b12:	2011      	movs	r0, #17
 8009b14:	183b      	adds	r3, r7, r0
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b1a:	4bc3      	ldr	r3, [pc, #780]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b1e:	2380      	movs	r3, #128	@ 0x80
 8009b20:	055b      	lsls	r3, r3, #21
 8009b22:	4013      	ands	r3, r2
 8009b24:	d110      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b26:	4bc0      	ldr	r3, [pc, #768]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b2a:	4bbf      	ldr	r3, [pc, #764]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009b2c:	2180      	movs	r1, #128	@ 0x80
 8009b2e:	0549      	lsls	r1, r1, #21
 8009b30:	430a      	orrs	r2, r1
 8009b32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009b34:	4bbc      	ldr	r3, [pc, #752]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009b36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b38:	2380      	movs	r3, #128	@ 0x80
 8009b3a:	055b      	lsls	r3, r3, #21
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	60bb      	str	r3, [r7, #8]
 8009b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b42:	183b      	adds	r3, r7, r0
 8009b44:	2201      	movs	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b48:	4bb8      	ldr	r3, [pc, #736]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	4bb7      	ldr	r3, [pc, #732]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009b4e:	2180      	movs	r1, #128	@ 0x80
 8009b50:	0049      	lsls	r1, r1, #1
 8009b52:	430a      	orrs	r2, r1
 8009b54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b56:	f7ff f855 	bl	8008c04 <HAL_GetTick>
 8009b5a:	0003      	movs	r3, r0
 8009b5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b5e:	e00b      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b60:	f7ff f850 	bl	8008c04 <HAL_GetTick>
 8009b64:	0002      	movs	r2, r0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d904      	bls.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009b6e:	2313      	movs	r3, #19
 8009b70:	18fb      	adds	r3, r7, r3
 8009b72:	2203      	movs	r2, #3
 8009b74:	701a      	strb	r2, [r3, #0]
        break;
 8009b76:	e005      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b78:	4bac      	ldr	r3, [pc, #688]	@ (8009e2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	2380      	movs	r3, #128	@ 0x80
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4013      	ands	r3, r2
 8009b82:	d0ed      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009b84:	2313      	movs	r3, #19
 8009b86:	18fb      	adds	r3, r7, r3
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d154      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b8e:	4ba6      	ldr	r3, [pc, #664]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009b90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b92:	23c0      	movs	r3, #192	@ 0xc0
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4013      	ands	r3, r2
 8009b98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d019      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d014      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009baa:	4b9f      	ldr	r3, [pc, #636]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bae:	4aa0      	ldr	r2, [pc, #640]	@ (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009bb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bb8:	4b9b      	ldr	r3, [pc, #620]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009bba:	2180      	movs	r1, #128	@ 0x80
 8009bbc:	0249      	lsls	r1, r1, #9
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009bc2:	4b99      	ldr	r3, [pc, #612]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009bc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bc6:	4b98      	ldr	r3, [pc, #608]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009bc8:	499a      	ldr	r1, [pc, #616]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8009bca:	400a      	ands	r2, r1
 8009bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009bce:	4b96      	ldr	r3, [pc, #600]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4013      	ands	r3, r2
 8009bda:	d016      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bdc:	f7ff f812 	bl	8008c04 <HAL_GetTick>
 8009be0:	0003      	movs	r3, r0
 8009be2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009be4:	e00c      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009be6:	f7ff f80d 	bl	8008c04 <HAL_GetTick>
 8009bea:	0002      	movs	r2, r0
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	4a91      	ldr	r2, [pc, #580]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d904      	bls.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009bf6:	2313      	movs	r3, #19
 8009bf8:	18fb      	adds	r3, r7, r3
 8009bfa:	2203      	movs	r2, #3
 8009bfc:	701a      	strb	r2, [r3, #0]
            break;
 8009bfe:	e004      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c00:	4b89      	ldr	r3, [pc, #548]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c04:	2202      	movs	r2, #2
 8009c06:	4013      	ands	r3, r2
 8009c08:	d0ed      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009c0a:	2313      	movs	r3, #19
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c14:	4b84      	ldr	r3, [pc, #528]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c18:	4a85      	ldr	r2, [pc, #532]	@ (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	0019      	movs	r1, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c22:	4b81      	ldr	r3, [pc, #516]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c24:	430a      	orrs	r2, r1
 8009c26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009c28:	e00c      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c2a:	2312      	movs	r3, #18
 8009c2c:	18fb      	adds	r3, r7, r3
 8009c2e:	2213      	movs	r2, #19
 8009c30:	18ba      	adds	r2, r7, r2
 8009c32:	7812      	ldrb	r2, [r2, #0]
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	e005      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c38:	2312      	movs	r3, #18
 8009c3a:	18fb      	adds	r3, r7, r3
 8009c3c:	2213      	movs	r2, #19
 8009c3e:	18ba      	adds	r2, r7, r2
 8009c40:	7812      	ldrb	r2, [r2, #0]
 8009c42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c44:	2311      	movs	r3, #17
 8009c46:	18fb      	adds	r3, r7, r3
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d105      	bne.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c4e:	4b76      	ldr	r3, [pc, #472]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c52:	4b75      	ldr	r3, [pc, #468]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c54:	4979      	ldr	r1, [pc, #484]	@ (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8009c56:	400a      	ands	r2, r1
 8009c58:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4013      	ands	r3, r2
 8009c62:	d009      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c64:	4b70      	ldr	r3, [pc, #448]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c68:	2203      	movs	r2, #3
 8009c6a:	4393      	bics	r3, r2
 8009c6c:	0019      	movs	r1, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	4b6d      	ldr	r3, [pc, #436]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c74:	430a      	orrs	r2, r1
 8009c76:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	4013      	ands	r3, r2
 8009c80:	d009      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c82:	4b69      	ldr	r3, [pc, #420]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c86:	220c      	movs	r2, #12
 8009c88:	4393      	bics	r3, r2
 8009c8a:	0019      	movs	r1, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	4b65      	ldr	r3, [pc, #404]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009c92:	430a      	orrs	r2, r1
 8009c94:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2210      	movs	r2, #16
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	d009      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ca0:	4b61      	ldr	r3, [pc, #388]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca4:	4a66      	ldr	r2, [pc, #408]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	0019      	movs	r1, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	4b5e      	ldr	r3, [pc, #376]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	2380      	movs	r3, #128	@ 0x80
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	d009      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cc0:	4b59      	ldr	r3, [pc, #356]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc4:	4a5f      	ldr	r2, [pc, #380]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	0019      	movs	r1, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699a      	ldr	r2, [r3, #24]
 8009cce:	4b56      	ldr	r3, [pc, #344]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	2380      	movs	r3, #128	@ 0x80
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	4013      	ands	r3, r2
 8009cde:	d009      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ce0:	4b51      	ldr	r3, [pc, #324]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce4:	4a58      	ldr	r2, [pc, #352]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	0019      	movs	r1, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69da      	ldr	r2, [r3, #28]
 8009cee:	4b4e      	ldr	r3, [pc, #312]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	d009      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d02:	4a52      	ldr	r2, [pc, #328]	@ (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	0019      	movs	r1, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691a      	ldr	r2, [r3, #16]
 8009d0c:	4b46      	ldr	r3, [pc, #280]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	2380      	movs	r3, #128	@ 0x80
 8009d18:	01db      	lsls	r3, r3, #7
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	d015      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d1e:	4b42      	ldr	r3, [pc, #264]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	0899      	lsrs	r1, r3, #2
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1a      	ldr	r2, [r3, #32]
 8009d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1a      	ldr	r2, [r3, #32]
 8009d34:	2380      	movs	r3, #128	@ 0x80
 8009d36:	05db      	lsls	r3, r3, #23
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d106      	bne.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	4b39      	ldr	r3, [pc, #228]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d42:	2180      	movs	r1, #128	@ 0x80
 8009d44:	0249      	lsls	r1, r1, #9
 8009d46:	430a      	orrs	r2, r1
 8009d48:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	2380      	movs	r3, #128	@ 0x80
 8009d50:	031b      	lsls	r3, r3, #12
 8009d52:	4013      	ands	r3, r2
 8009d54:	d009      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d56:	4b34      	ldr	r3, [pc, #208]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d5a:	2240      	movs	r2, #64	@ 0x40
 8009d5c:	4393      	bics	r3, r2
 8009d5e:	0019      	movs	r1, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d64:	4b30      	ldr	r3, [pc, #192]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d66:	430a      	orrs	r2, r1
 8009d68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	2380      	movs	r3, #128	@ 0x80
 8009d70:	039b      	lsls	r3, r3, #14
 8009d72:	4013      	ands	r3, r2
 8009d74:	d016      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009d76:	4b2c      	ldr	r3, [pc, #176]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d7a:	4a35      	ldr	r2, [pc, #212]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	0019      	movs	r1, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d84:	4b28      	ldr	r3, [pc, #160]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d86:	430a      	orrs	r2, r1
 8009d88:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d8e:	2380      	movs	r3, #128	@ 0x80
 8009d90:	03db      	lsls	r3, r3, #15
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d106      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009d96:	4b24      	ldr	r3, [pc, #144]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	4b23      	ldr	r3, [pc, #140]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009d9c:	2180      	movs	r1, #128	@ 0x80
 8009d9e:	0449      	lsls	r1, r1, #17
 8009da0:	430a      	orrs	r2, r1
 8009da2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	2380      	movs	r3, #128	@ 0x80
 8009daa:	03db      	lsls	r3, r3, #15
 8009dac:	4013      	ands	r3, r2
 8009dae:	d016      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009db0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db4:	4a27      	ldr	r2, [pc, #156]	@ (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8009db6:	4013      	ands	r3, r2
 8009db8:	0019      	movs	r1, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc8:	2380      	movs	r3, #128	@ 0x80
 8009dca:	045b      	lsls	r3, r3, #17
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d106      	bne.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009dd0:	4b15      	ldr	r3, [pc, #84]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	4b14      	ldr	r3, [pc, #80]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009dd6:	2180      	movs	r1, #128	@ 0x80
 8009dd8:	0449      	lsls	r1, r1, #17
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	2380      	movs	r3, #128	@ 0x80
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	4013      	ands	r3, r2
 8009de8:	d016      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009dea:	4b0f      	ldr	r3, [pc, #60]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dee:	4a1a      	ldr	r2, [pc, #104]	@ (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	0019      	movs	r1, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	695a      	ldr	r2, [r3, #20]
 8009df8:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	695a      	ldr	r2, [r3, #20]
 8009e02:	2380      	movs	r3, #128	@ 0x80
 8009e04:	01db      	lsls	r3, r3, #7
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d106      	bne.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009e0a:	4b07      	ldr	r3, [pc, #28]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	4b06      	ldr	r3, [pc, #24]	@ (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009e10:	2180      	movs	r1, #128	@ 0x80
 8009e12:	0249      	lsls	r1, r1, #9
 8009e14:	430a      	orrs	r2, r1
 8009e16:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009e18:	2312      	movs	r3, #18
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	781b      	ldrb	r3, [r3, #0]
}
 8009e1e:	0018      	movs	r0, r3
 8009e20:	46bd      	mov	sp, r7
 8009e22:	b006      	add	sp, #24
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	46c0      	nop			@ (mov r8, r8)
 8009e28:	40021000 	.word	0x40021000
 8009e2c:	40007000 	.word	0x40007000
 8009e30:	fffffcff 	.word	0xfffffcff
 8009e34:	fffeffff 	.word	0xfffeffff
 8009e38:	00001388 	.word	0x00001388
 8009e3c:	efffffff 	.word	0xefffffff
 8009e40:	fffff3ff 	.word	0xfffff3ff
 8009e44:	fff3ffff 	.word	0xfff3ffff
 8009e48:	ffcfffff 	.word	0xffcfffff
 8009e4c:	ffffcfff 	.word	0xffffcfff
 8009e50:	ffbfffff 	.word	0xffbfffff
 8009e54:	feffffff 	.word	0xfeffffff
 8009e58:	ffff3fff 	.word	0xffff3fff

08009e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e046      	b.n	8009efc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2288      	movs	r2, #136	@ 0x88
 8009e72:	589b      	ldr	r3, [r3, r2]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d107      	bne.n	8009e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2284      	movs	r2, #132	@ 0x84
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	0018      	movs	r0, r3
 8009e84:	f7fe fd1a 	bl	80088bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2288      	movs	r2, #136	@ 0x88
 8009e8c:	2124      	movs	r1, #36	@ 0x24
 8009e8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	438a      	bics	r2, r1
 8009e9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f000 fb8e 	bl	800a5cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f000 f8cc 	bl	800a050 <UART_SetConfig>
 8009eb8:	0003      	movs	r3, r0
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d101      	bne.n	8009ec2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e01c      	b.n	8009efc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	490d      	ldr	r1, [pc, #52]	@ (8009f04 <HAL_UART_Init+0xa8>)
 8009ece:	400a      	ands	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	212a      	movs	r1, #42	@ 0x2a
 8009ede:	438a      	bics	r2, r1
 8009ee0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2101      	movs	r1, #1
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f000 fc1d 	bl	800a734 <UART_CheckIdleState>
 8009efa:	0003      	movs	r3, r0
}
 8009efc:	0018      	movs	r0, r3
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b002      	add	sp, #8
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	ffffb7ff 	.word	0xffffb7ff

08009f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	@ 0x28
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	603b      	str	r3, [r7, #0]
 8009f14:	1dbb      	adds	r3, r7, #6
 8009f16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2288      	movs	r2, #136	@ 0x88
 8009f1c:	589b      	ldr	r3, [r3, r2]
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d000      	beq.n	8009f24 <HAL_UART_Transmit+0x1c>
 8009f22:	e090      	b.n	800a046 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_UART_Transmit+0x2a>
 8009f2a:	1dbb      	adds	r3, r7, #6
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e088      	b.n	800a048 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	2380      	movs	r3, #128	@ 0x80
 8009f3c:	015b      	lsls	r3, r3, #5
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d109      	bne.n	8009f56 <HAL_UART_Transmit+0x4e>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	4013      	ands	r3, r2
 8009f50:	d001      	beq.n	8009f56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e078      	b.n	800a048 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2290      	movs	r2, #144	@ 0x90
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2288      	movs	r2, #136	@ 0x88
 8009f62:	2121      	movs	r1, #33	@ 0x21
 8009f64:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f66:	f7fe fe4d 	bl	8008c04 <HAL_GetTick>
 8009f6a:	0003      	movs	r3, r0
 8009f6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1dba      	adds	r2, r7, #6
 8009f72:	2154      	movs	r1, #84	@ 0x54
 8009f74:	8812      	ldrh	r2, [r2, #0]
 8009f76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	1dba      	adds	r2, r7, #6
 8009f7c:	2156      	movs	r1, #86	@ 0x56
 8009f7e:	8812      	ldrh	r2, [r2, #0]
 8009f80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	2380      	movs	r3, #128	@ 0x80
 8009f88:	015b      	lsls	r3, r3, #5
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d108      	bne.n	8009fa0 <HAL_UART_Transmit+0x98>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d104      	bne.n	8009fa0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	61bb      	str	r3, [r7, #24]
 8009f9e:	e003      	b.n	8009fa8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009fa8:	e030      	b.n	800a00c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	0013      	movs	r3, r2
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2180      	movs	r1, #128	@ 0x80
 8009fb8:	f000 fc66 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 8009fbc:	1e03      	subs	r3, r0, #0
 8009fbe:	d005      	beq.n	8009fcc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2288      	movs	r2, #136	@ 0x88
 8009fc4:	2120      	movs	r1, #32
 8009fc6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e03d      	b.n	800a048 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10b      	bne.n	8009fea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	001a      	movs	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	05d2      	lsls	r2, r2, #23
 8009fde:	0dd2      	lsrs	r2, r2, #23
 8009fe0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	3302      	adds	r3, #2
 8009fe6:	61bb      	str	r3, [r7, #24]
 8009fe8:	e007      	b.n	8009ffa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	781a      	ldrb	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2256      	movs	r2, #86	@ 0x56
 8009ffe:	5a9b      	ldrh	r3, [r3, r2]
 800a000:	b29b      	uxth	r3, r3
 800a002:	3b01      	subs	r3, #1
 800a004:	b299      	uxth	r1, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2256      	movs	r2, #86	@ 0x56
 800a00a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2256      	movs	r2, #86	@ 0x56
 800a010:	5a9b      	ldrh	r3, [r3, r2]
 800a012:	b29b      	uxth	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1c8      	bne.n	8009faa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	0013      	movs	r3, r2
 800a022:	2200      	movs	r2, #0
 800a024:	2140      	movs	r1, #64	@ 0x40
 800a026:	f000 fc2f 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 800a02a:	1e03      	subs	r3, r0, #0
 800a02c:	d005      	beq.n	800a03a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2288      	movs	r2, #136	@ 0x88
 800a032:	2120      	movs	r1, #32
 800a034:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e006      	b.n	800a048 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2288      	movs	r2, #136	@ 0x88
 800a03e:	2120      	movs	r1, #32
 800a040:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	e000      	b.n	800a048 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800a046:	2302      	movs	r3, #2
  }
}
 800a048:	0018      	movs	r0, r3
 800a04a:	46bd      	mov	sp, r7
 800a04c:	b008      	add	sp, #32
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a050:	b5b0      	push	{r4, r5, r7, lr}
 800a052:	b090      	sub	sp, #64	@ 0x40
 800a054:	af00      	add	r7, sp, #0
 800a056:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a058:	231a      	movs	r3, #26
 800a05a:	2220      	movs	r2, #32
 800a05c:	189b      	adds	r3, r3, r2
 800a05e:	19db      	adds	r3, r3, r7
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	431a      	orrs	r2, r3
 800a074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	4313      	orrs	r3, r2
 800a07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4aaf      	ldr	r2, [pc, #700]	@ (800a340 <UART_SetConfig+0x2f0>)
 800a084:	4013      	ands	r3, r2
 800a086:	0019      	movs	r1, r3
 800a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08e:	430b      	orrs	r3, r1
 800a090:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	4aaa      	ldr	r2, [pc, #680]	@ (800a344 <UART_SetConfig+0x2f4>)
 800a09a:	4013      	ands	r3, r2
 800a09c:	0018      	movs	r0, r3
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	68d9      	ldr	r1, [r3, #12]
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	0003      	movs	r3, r0
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4aa4      	ldr	r2, [pc, #656]	@ (800a348 <UART_SetConfig+0x2f8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d004      	beq.n	800a0c6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	4a9f      	ldr	r2, [pc, #636]	@ (800a34c <UART_SetConfig+0x2fc>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	0019      	movs	r1, r3
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e2:	220f      	movs	r2, #15
 800a0e4:	4393      	bics	r3, r2
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	0003      	movs	r3, r0
 800a0f2:	430b      	orrs	r3, r1
 800a0f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a95      	ldr	r2, [pc, #596]	@ (800a350 <UART_SetConfig+0x300>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d131      	bne.n	800a164 <UART_SetConfig+0x114>
 800a100:	4b94      	ldr	r3, [pc, #592]	@ (800a354 <UART_SetConfig+0x304>)
 800a102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a104:	2203      	movs	r2, #3
 800a106:	4013      	ands	r3, r2
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d01d      	beq.n	800a148 <UART_SetConfig+0xf8>
 800a10c:	d823      	bhi.n	800a156 <UART_SetConfig+0x106>
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d00c      	beq.n	800a12c <UART_SetConfig+0xdc>
 800a112:	d820      	bhi.n	800a156 <UART_SetConfig+0x106>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <UART_SetConfig+0xce>
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d00e      	beq.n	800a13a <UART_SetConfig+0xea>
 800a11c:	e01b      	b.n	800a156 <UART_SetConfig+0x106>
 800a11e:	231b      	movs	r3, #27
 800a120:	2220      	movs	r2, #32
 800a122:	189b      	adds	r3, r3, r2
 800a124:	19db      	adds	r3, r3, r7
 800a126:	2200      	movs	r2, #0
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	e0b4      	b.n	800a296 <UART_SetConfig+0x246>
 800a12c:	231b      	movs	r3, #27
 800a12e:	2220      	movs	r2, #32
 800a130:	189b      	adds	r3, r3, r2
 800a132:	19db      	adds	r3, r3, r7
 800a134:	2202      	movs	r2, #2
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	e0ad      	b.n	800a296 <UART_SetConfig+0x246>
 800a13a:	231b      	movs	r3, #27
 800a13c:	2220      	movs	r2, #32
 800a13e:	189b      	adds	r3, r3, r2
 800a140:	19db      	adds	r3, r3, r7
 800a142:	2204      	movs	r2, #4
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	e0a6      	b.n	800a296 <UART_SetConfig+0x246>
 800a148:	231b      	movs	r3, #27
 800a14a:	2220      	movs	r2, #32
 800a14c:	189b      	adds	r3, r3, r2
 800a14e:	19db      	adds	r3, r3, r7
 800a150:	2208      	movs	r2, #8
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	e09f      	b.n	800a296 <UART_SetConfig+0x246>
 800a156:	231b      	movs	r3, #27
 800a158:	2220      	movs	r2, #32
 800a15a:	189b      	adds	r3, r3, r2
 800a15c:	19db      	adds	r3, r3, r7
 800a15e:	2210      	movs	r2, #16
 800a160:	701a      	strb	r2, [r3, #0]
 800a162:	e098      	b.n	800a296 <UART_SetConfig+0x246>
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a7b      	ldr	r2, [pc, #492]	@ (800a358 <UART_SetConfig+0x308>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d131      	bne.n	800a1d2 <UART_SetConfig+0x182>
 800a16e:	4b79      	ldr	r3, [pc, #484]	@ (800a354 <UART_SetConfig+0x304>)
 800a170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a172:	220c      	movs	r2, #12
 800a174:	4013      	ands	r3, r2
 800a176:	2b0c      	cmp	r3, #12
 800a178:	d01d      	beq.n	800a1b6 <UART_SetConfig+0x166>
 800a17a:	d823      	bhi.n	800a1c4 <UART_SetConfig+0x174>
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d00c      	beq.n	800a19a <UART_SetConfig+0x14a>
 800a180:	d820      	bhi.n	800a1c4 <UART_SetConfig+0x174>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <UART_SetConfig+0x13c>
 800a186:	2b04      	cmp	r3, #4
 800a188:	d00e      	beq.n	800a1a8 <UART_SetConfig+0x158>
 800a18a:	e01b      	b.n	800a1c4 <UART_SetConfig+0x174>
 800a18c:	231b      	movs	r3, #27
 800a18e:	2220      	movs	r2, #32
 800a190:	189b      	adds	r3, r3, r2
 800a192:	19db      	adds	r3, r3, r7
 800a194:	2200      	movs	r2, #0
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	e07d      	b.n	800a296 <UART_SetConfig+0x246>
 800a19a:	231b      	movs	r3, #27
 800a19c:	2220      	movs	r2, #32
 800a19e:	189b      	adds	r3, r3, r2
 800a1a0:	19db      	adds	r3, r3, r7
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	701a      	strb	r2, [r3, #0]
 800a1a6:	e076      	b.n	800a296 <UART_SetConfig+0x246>
 800a1a8:	231b      	movs	r3, #27
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	189b      	adds	r3, r3, r2
 800a1ae:	19db      	adds	r3, r3, r7
 800a1b0:	2204      	movs	r2, #4
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e06f      	b.n	800a296 <UART_SetConfig+0x246>
 800a1b6:	231b      	movs	r3, #27
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	189b      	adds	r3, r3, r2
 800a1bc:	19db      	adds	r3, r3, r7
 800a1be:	2208      	movs	r2, #8
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e068      	b.n	800a296 <UART_SetConfig+0x246>
 800a1c4:	231b      	movs	r3, #27
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	189b      	adds	r3, r3, r2
 800a1ca:	19db      	adds	r3, r3, r7
 800a1cc:	2210      	movs	r2, #16
 800a1ce:	701a      	strb	r2, [r3, #0]
 800a1d0:	e061      	b.n	800a296 <UART_SetConfig+0x246>
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a61      	ldr	r2, [pc, #388]	@ (800a35c <UART_SetConfig+0x30c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d106      	bne.n	800a1ea <UART_SetConfig+0x19a>
 800a1dc:	231b      	movs	r3, #27
 800a1de:	2220      	movs	r2, #32
 800a1e0:	189b      	adds	r3, r3, r2
 800a1e2:	19db      	adds	r3, r3, r7
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	701a      	strb	r2, [r3, #0]
 800a1e8:	e055      	b.n	800a296 <UART_SetConfig+0x246>
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a5c      	ldr	r2, [pc, #368]	@ (800a360 <UART_SetConfig+0x310>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d106      	bne.n	800a202 <UART_SetConfig+0x1b2>
 800a1f4:	231b      	movs	r3, #27
 800a1f6:	2220      	movs	r2, #32
 800a1f8:	189b      	adds	r3, r3, r2
 800a1fa:	19db      	adds	r3, r3, r7
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	e049      	b.n	800a296 <UART_SetConfig+0x246>
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a50      	ldr	r2, [pc, #320]	@ (800a348 <UART_SetConfig+0x2f8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d13e      	bne.n	800a28a <UART_SetConfig+0x23a>
 800a20c:	4b51      	ldr	r3, [pc, #324]	@ (800a354 <UART_SetConfig+0x304>)
 800a20e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a210:	23c0      	movs	r3, #192	@ 0xc0
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	4013      	ands	r3, r2
 800a216:	22c0      	movs	r2, #192	@ 0xc0
 800a218:	0112      	lsls	r2, r2, #4
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d027      	beq.n	800a26e <UART_SetConfig+0x21e>
 800a21e:	22c0      	movs	r2, #192	@ 0xc0
 800a220:	0112      	lsls	r2, r2, #4
 800a222:	4293      	cmp	r3, r2
 800a224:	d82a      	bhi.n	800a27c <UART_SetConfig+0x22c>
 800a226:	2280      	movs	r2, #128	@ 0x80
 800a228:	0112      	lsls	r2, r2, #4
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d011      	beq.n	800a252 <UART_SetConfig+0x202>
 800a22e:	2280      	movs	r2, #128	@ 0x80
 800a230:	0112      	lsls	r2, r2, #4
 800a232:	4293      	cmp	r3, r2
 800a234:	d822      	bhi.n	800a27c <UART_SetConfig+0x22c>
 800a236:	2b00      	cmp	r3, #0
 800a238:	d004      	beq.n	800a244 <UART_SetConfig+0x1f4>
 800a23a:	2280      	movs	r2, #128	@ 0x80
 800a23c:	00d2      	lsls	r2, r2, #3
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00e      	beq.n	800a260 <UART_SetConfig+0x210>
 800a242:	e01b      	b.n	800a27c <UART_SetConfig+0x22c>
 800a244:	231b      	movs	r3, #27
 800a246:	2220      	movs	r2, #32
 800a248:	189b      	adds	r3, r3, r2
 800a24a:	19db      	adds	r3, r3, r7
 800a24c:	2200      	movs	r2, #0
 800a24e:	701a      	strb	r2, [r3, #0]
 800a250:	e021      	b.n	800a296 <UART_SetConfig+0x246>
 800a252:	231b      	movs	r3, #27
 800a254:	2220      	movs	r2, #32
 800a256:	189b      	adds	r3, r3, r2
 800a258:	19db      	adds	r3, r3, r7
 800a25a:	2202      	movs	r2, #2
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	e01a      	b.n	800a296 <UART_SetConfig+0x246>
 800a260:	231b      	movs	r3, #27
 800a262:	2220      	movs	r2, #32
 800a264:	189b      	adds	r3, r3, r2
 800a266:	19db      	adds	r3, r3, r7
 800a268:	2204      	movs	r2, #4
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	e013      	b.n	800a296 <UART_SetConfig+0x246>
 800a26e:	231b      	movs	r3, #27
 800a270:	2220      	movs	r2, #32
 800a272:	189b      	adds	r3, r3, r2
 800a274:	19db      	adds	r3, r3, r7
 800a276:	2208      	movs	r2, #8
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	e00c      	b.n	800a296 <UART_SetConfig+0x246>
 800a27c:	231b      	movs	r3, #27
 800a27e:	2220      	movs	r2, #32
 800a280:	189b      	adds	r3, r3, r2
 800a282:	19db      	adds	r3, r3, r7
 800a284:	2210      	movs	r2, #16
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	e005      	b.n	800a296 <UART_SetConfig+0x246>
 800a28a:	231b      	movs	r3, #27
 800a28c:	2220      	movs	r2, #32
 800a28e:	189b      	adds	r3, r3, r2
 800a290:	19db      	adds	r3, r3, r7
 800a292:	2210      	movs	r2, #16
 800a294:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a2b      	ldr	r2, [pc, #172]	@ (800a348 <UART_SetConfig+0x2f8>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d000      	beq.n	800a2a2 <UART_SetConfig+0x252>
 800a2a0:	e0a9      	b.n	800a3f6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2a2:	231b      	movs	r3, #27
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	189b      	adds	r3, r3, r2
 800a2a8:	19db      	adds	r3, r3, r7
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d015      	beq.n	800a2dc <UART_SetConfig+0x28c>
 800a2b0:	dc18      	bgt.n	800a2e4 <UART_SetConfig+0x294>
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	d00d      	beq.n	800a2d2 <UART_SetConfig+0x282>
 800a2b6:	dc15      	bgt.n	800a2e4 <UART_SetConfig+0x294>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <UART_SetConfig+0x272>
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d005      	beq.n	800a2cc <UART_SetConfig+0x27c>
 800a2c0:	e010      	b.n	800a2e4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2c2:	f7ff fbfd 	bl	8009ac0 <HAL_RCC_GetPCLK1Freq>
 800a2c6:	0003      	movs	r3, r0
 800a2c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2ca:	e014      	b.n	800a2f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2cc:	4b25      	ldr	r3, [pc, #148]	@ (800a364 <UART_SetConfig+0x314>)
 800a2ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2d0:	e011      	b.n	800a2f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2d2:	f7ff fb69 	bl	80099a8 <HAL_RCC_GetSysClockFreq>
 800a2d6:	0003      	movs	r3, r0
 800a2d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2da:	e00c      	b.n	800a2f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2dc:	2380      	movs	r3, #128	@ 0x80
 800a2de:	021b      	lsls	r3, r3, #8
 800a2e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2e2:	e008      	b.n	800a2f6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a2e8:	231a      	movs	r3, #26
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	189b      	adds	r3, r3, r2
 800a2ee:	19db      	adds	r3, r3, r7
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	701a      	strb	r2, [r3, #0]
        break;
 800a2f4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d100      	bne.n	800a2fe <UART_SetConfig+0x2ae>
 800a2fc:	e14b      	b.n	800a596 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a302:	4b19      	ldr	r3, [pc, #100]	@ (800a368 <UART_SetConfig+0x318>)
 800a304:	0052      	lsls	r2, r2, #1
 800a306:	5ad3      	ldrh	r3, [r2, r3]
 800a308:	0019      	movs	r1, r3
 800a30a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a30c:	f7fd fefa 	bl	8008104 <__udivsi3>
 800a310:	0003      	movs	r3, r0
 800a312:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	0013      	movs	r3, r2
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	189b      	adds	r3, r3, r2
 800a31e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a320:	429a      	cmp	r2, r3
 800a322:	d305      	bcc.n	800a330 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a32a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d91d      	bls.n	800a36c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a330:	231a      	movs	r3, #26
 800a332:	2220      	movs	r2, #32
 800a334:	189b      	adds	r3, r3, r2
 800a336:	19db      	adds	r3, r3, r7
 800a338:	2201      	movs	r2, #1
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e12b      	b.n	800a596 <UART_SetConfig+0x546>
 800a33e:	46c0      	nop			@ (mov r8, r8)
 800a340:	cfff69f3 	.word	0xcfff69f3
 800a344:	ffffcfff 	.word	0xffffcfff
 800a348:	40008000 	.word	0x40008000
 800a34c:	11fff4ff 	.word	0x11fff4ff
 800a350:	40013800 	.word	0x40013800
 800a354:	40021000 	.word	0x40021000
 800a358:	40004400 	.word	0x40004400
 800a35c:	40004800 	.word	0x40004800
 800a360:	40004c00 	.word	0x40004c00
 800a364:	00f42400 	.word	0x00f42400
 800a368:	0800b6c0 	.word	0x0800b6c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36e:	61bb      	str	r3, [r7, #24]
 800a370:	2300      	movs	r3, #0
 800a372:	61fb      	str	r3, [r7, #28]
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a378:	4b92      	ldr	r3, [pc, #584]	@ (800a5c4 <UART_SetConfig+0x574>)
 800a37a:	0052      	lsls	r2, r2, #1
 800a37c:	5ad3      	ldrh	r3, [r2, r3]
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	69b8      	ldr	r0, [r7, #24]
 800a38a:	69f9      	ldr	r1, [r7, #28]
 800a38c:	f7fe f830 	bl	80083f0 <__aeabi_uldivmod>
 800a390:	0002      	movs	r2, r0
 800a392:	000b      	movs	r3, r1
 800a394:	0e11      	lsrs	r1, r2, #24
 800a396:	021d      	lsls	r5, r3, #8
 800a398:	430d      	orrs	r5, r1
 800a39a:	0214      	lsls	r4, r2, #8
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	085b      	lsrs	r3, r3, #1
 800a3a2:	60bb      	str	r3, [r7, #8]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	60fb      	str	r3, [r7, #12]
 800a3a8:	68b8      	ldr	r0, [r7, #8]
 800a3aa:	68f9      	ldr	r1, [r7, #12]
 800a3ac:	1900      	adds	r0, r0, r4
 800a3ae:	4169      	adcs	r1, r5
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	603b      	str	r3, [r7, #0]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f7fe f817 	bl	80083f0 <__aeabi_uldivmod>
 800a3c2:	0002      	movs	r2, r0
 800a3c4:	000b      	movs	r3, r1
 800a3c6:	0013      	movs	r3, r2
 800a3c8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3cc:	23c0      	movs	r3, #192	@ 0xc0
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d309      	bcc.n	800a3e8 <UART_SetConfig+0x398>
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d6:	2380      	movs	r3, #128	@ 0x80
 800a3d8:	035b      	lsls	r3, r3, #13
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d204      	bcs.n	800a3e8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e4:	60da      	str	r2, [r3, #12]
 800a3e6:	e0d6      	b.n	800a596 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800a3e8:	231a      	movs	r3, #26
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	189b      	adds	r3, r3, r2
 800a3ee:	19db      	adds	r3, r3, r7
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
 800a3f4:	e0cf      	b.n	800a596 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	69da      	ldr	r2, [r3, #28]
 800a3fa:	2380      	movs	r3, #128	@ 0x80
 800a3fc:	021b      	lsls	r3, r3, #8
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d000      	beq.n	800a404 <UART_SetConfig+0x3b4>
 800a402:	e070      	b.n	800a4e6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800a404:	231b      	movs	r3, #27
 800a406:	2220      	movs	r2, #32
 800a408:	189b      	adds	r3, r3, r2
 800a40a:	19db      	adds	r3, r3, r7
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b08      	cmp	r3, #8
 800a410:	d015      	beq.n	800a43e <UART_SetConfig+0x3ee>
 800a412:	dc18      	bgt.n	800a446 <UART_SetConfig+0x3f6>
 800a414:	2b04      	cmp	r3, #4
 800a416:	d00d      	beq.n	800a434 <UART_SetConfig+0x3e4>
 800a418:	dc15      	bgt.n	800a446 <UART_SetConfig+0x3f6>
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <UART_SetConfig+0x3d4>
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d005      	beq.n	800a42e <UART_SetConfig+0x3de>
 800a422:	e010      	b.n	800a446 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a424:	f7ff fb4c 	bl	8009ac0 <HAL_RCC_GetPCLK1Freq>
 800a428:	0003      	movs	r3, r0
 800a42a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a42c:	e014      	b.n	800a458 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a42e:	4b66      	ldr	r3, [pc, #408]	@ (800a5c8 <UART_SetConfig+0x578>)
 800a430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a432:	e011      	b.n	800a458 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a434:	f7ff fab8 	bl	80099a8 <HAL_RCC_GetSysClockFreq>
 800a438:	0003      	movs	r3, r0
 800a43a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a43c:	e00c      	b.n	800a458 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a43e:	2380      	movs	r3, #128	@ 0x80
 800a440:	021b      	lsls	r3, r3, #8
 800a442:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a444:	e008      	b.n	800a458 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a44a:	231a      	movs	r3, #26
 800a44c:	2220      	movs	r2, #32
 800a44e:	189b      	adds	r3, r3, r2
 800a450:	19db      	adds	r3, r3, r7
 800a452:	2201      	movs	r2, #1
 800a454:	701a      	strb	r2, [r3, #0]
        break;
 800a456:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d100      	bne.n	800a460 <UART_SetConfig+0x410>
 800a45e:	e09a      	b.n	800a596 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a464:	4b57      	ldr	r3, [pc, #348]	@ (800a5c4 <UART_SetConfig+0x574>)
 800a466:	0052      	lsls	r2, r2, #1
 800a468:	5ad3      	ldrh	r3, [r2, r3]
 800a46a:	0019      	movs	r1, r3
 800a46c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a46e:	f7fd fe49 	bl	8008104 <__udivsi3>
 800a472:	0003      	movs	r3, r0
 800a474:	005a      	lsls	r2, r3, #1
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	085b      	lsrs	r3, r3, #1
 800a47c:	18d2      	adds	r2, r2, r3
 800a47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	0019      	movs	r1, r3
 800a484:	0010      	movs	r0, r2
 800a486:	f7fd fe3d 	bl	8008104 <__udivsi3>
 800a48a:	0003      	movs	r3, r0
 800a48c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	2b0f      	cmp	r3, #15
 800a492:	d921      	bls.n	800a4d8 <UART_SetConfig+0x488>
 800a494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a496:	2380      	movs	r3, #128	@ 0x80
 800a498:	025b      	lsls	r3, r3, #9
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d21c      	bcs.n	800a4d8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	200e      	movs	r0, #14
 800a4a4:	2420      	movs	r4, #32
 800a4a6:	1903      	adds	r3, r0, r4
 800a4a8:	19db      	adds	r3, r3, r7
 800a4aa:	210f      	movs	r1, #15
 800a4ac:	438a      	bics	r2, r1
 800a4ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	2207      	movs	r2, #7
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	b299      	uxth	r1, r3
 800a4bc:	1903      	adds	r3, r0, r4
 800a4be:	19db      	adds	r3, r3, r7
 800a4c0:	1902      	adds	r2, r0, r4
 800a4c2:	19d2      	adds	r2, r2, r7
 800a4c4:	8812      	ldrh	r2, [r2, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	1902      	adds	r2, r0, r4
 800a4d0:	19d2      	adds	r2, r2, r7
 800a4d2:	8812      	ldrh	r2, [r2, #0]
 800a4d4:	60da      	str	r2, [r3, #12]
 800a4d6:	e05e      	b.n	800a596 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800a4d8:	231a      	movs	r3, #26
 800a4da:	2220      	movs	r2, #32
 800a4dc:	189b      	adds	r3, r3, r2
 800a4de:	19db      	adds	r3, r3, r7
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	701a      	strb	r2, [r3, #0]
 800a4e4:	e057      	b.n	800a596 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4e6:	231b      	movs	r3, #27
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	19db      	adds	r3, r3, r7
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d015      	beq.n	800a520 <UART_SetConfig+0x4d0>
 800a4f4:	dc18      	bgt.n	800a528 <UART_SetConfig+0x4d8>
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d00d      	beq.n	800a516 <UART_SetConfig+0x4c6>
 800a4fa:	dc15      	bgt.n	800a528 <UART_SetConfig+0x4d8>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <UART_SetConfig+0x4b6>
 800a500:	2b02      	cmp	r3, #2
 800a502:	d005      	beq.n	800a510 <UART_SetConfig+0x4c0>
 800a504:	e010      	b.n	800a528 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a506:	f7ff fadb 	bl	8009ac0 <HAL_RCC_GetPCLK1Freq>
 800a50a:	0003      	movs	r3, r0
 800a50c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a50e:	e014      	b.n	800a53a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a510:	4b2d      	ldr	r3, [pc, #180]	@ (800a5c8 <UART_SetConfig+0x578>)
 800a512:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a514:	e011      	b.n	800a53a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a516:	f7ff fa47 	bl	80099a8 <HAL_RCC_GetSysClockFreq>
 800a51a:	0003      	movs	r3, r0
 800a51c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a51e:	e00c      	b.n	800a53a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a520:	2380      	movs	r3, #128	@ 0x80
 800a522:	021b      	lsls	r3, r3, #8
 800a524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a526:	e008      	b.n	800a53a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a52c:	231a      	movs	r3, #26
 800a52e:	2220      	movs	r2, #32
 800a530:	189b      	adds	r3, r3, r2
 800a532:	19db      	adds	r3, r3, r7
 800a534:	2201      	movs	r2, #1
 800a536:	701a      	strb	r2, [r3, #0]
        break;
 800a538:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a53a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d02a      	beq.n	800a596 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a544:	4b1f      	ldr	r3, [pc, #124]	@ (800a5c4 <UART_SetConfig+0x574>)
 800a546:	0052      	lsls	r2, r2, #1
 800a548:	5ad3      	ldrh	r3, [r2, r3]
 800a54a:	0019      	movs	r1, r3
 800a54c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a54e:	f7fd fdd9 	bl	8008104 <__udivsi3>
 800a552:	0003      	movs	r3, r0
 800a554:	001a      	movs	r2, r3
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	085b      	lsrs	r3, r3, #1
 800a55c:	18d2      	adds	r2, r2, r3
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	0019      	movs	r1, r3
 800a564:	0010      	movs	r0, r2
 800a566:	f7fd fdcd 	bl	8008104 <__udivsi3>
 800a56a:	0003      	movs	r3, r0
 800a56c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	2b0f      	cmp	r3, #15
 800a572:	d90a      	bls.n	800a58a <UART_SetConfig+0x53a>
 800a574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a576:	2380      	movs	r3, #128	@ 0x80
 800a578:	025b      	lsls	r3, r3, #9
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d205      	bcs.n	800a58a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a580:	b29a      	uxth	r2, r3
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60da      	str	r2, [r3, #12]
 800a588:	e005      	b.n	800a596 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800a58a:	231a      	movs	r3, #26
 800a58c:	2220      	movs	r2, #32
 800a58e:	189b      	adds	r3, r3, r2
 800a590:	19db      	adds	r3, r3, r7
 800a592:	2201      	movs	r2, #1
 800a594:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	226a      	movs	r2, #106	@ 0x6a
 800a59a:	2101      	movs	r1, #1
 800a59c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	2268      	movs	r2, #104	@ 0x68
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5b2:	231a      	movs	r3, #26
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	189b      	adds	r3, r3, r2
 800a5b8:	19db      	adds	r3, r3, r7
 800a5ba:	781b      	ldrb	r3, [r3, #0]
}
 800a5bc:	0018      	movs	r0, r3
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	b010      	add	sp, #64	@ 0x40
 800a5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5c4:	0800b6c0 	.word	0x0800b6c0
 800a5c8:	00f42400 	.word	0x00f42400

0800a5cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d8:	2208      	movs	r2, #8
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d00b      	beq.n	800a5f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	4a4a      	ldr	r2, [pc, #296]	@ (800a710 <UART_AdvFeatureConfig+0x144>)
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	0019      	movs	r1, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	d00b      	beq.n	800a618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	4a43      	ldr	r2, [pc, #268]	@ (800a714 <UART_AdvFeatureConfig+0x148>)
 800a608:	4013      	ands	r3, r2
 800a60a:	0019      	movs	r1, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61c:	2202      	movs	r2, #2
 800a61e:	4013      	ands	r3, r2
 800a620:	d00b      	beq.n	800a63a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	4a3b      	ldr	r2, [pc, #236]	@ (800a718 <UART_AdvFeatureConfig+0x14c>)
 800a62a:	4013      	ands	r3, r2
 800a62c:	0019      	movs	r1, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63e:	2204      	movs	r2, #4
 800a640:	4013      	ands	r3, r2
 800a642:	d00b      	beq.n	800a65c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	4a34      	ldr	r2, [pc, #208]	@ (800a71c <UART_AdvFeatureConfig+0x150>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	0019      	movs	r1, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a660:	2210      	movs	r2, #16
 800a662:	4013      	ands	r3, r2
 800a664:	d00b      	beq.n	800a67e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	4a2c      	ldr	r2, [pc, #176]	@ (800a720 <UART_AdvFeatureConfig+0x154>)
 800a66e:	4013      	ands	r3, r2
 800a670:	0019      	movs	r1, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a682:	2220      	movs	r2, #32
 800a684:	4013      	ands	r3, r2
 800a686:	d00b      	beq.n	800a6a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	4a25      	ldr	r2, [pc, #148]	@ (800a724 <UART_AdvFeatureConfig+0x158>)
 800a690:	4013      	ands	r3, r2
 800a692:	0019      	movs	r1, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a4:	2240      	movs	r2, #64	@ 0x40
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	d01d      	beq.n	800a6e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a728 <UART_AdvFeatureConfig+0x15c>)
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	0019      	movs	r1, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6c6:	2380      	movs	r3, #128	@ 0x80
 800a6c8:	035b      	lsls	r3, r3, #13
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d10b      	bne.n	800a6e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4a15      	ldr	r2, [pc, #84]	@ (800a72c <UART_AdvFeatureConfig+0x160>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	0019      	movs	r1, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ea:	2280      	movs	r2, #128	@ 0x80
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	d00b      	beq.n	800a708 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	4a0e      	ldr	r2, [pc, #56]	@ (800a730 <UART_AdvFeatureConfig+0x164>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	0019      	movs	r1, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	430a      	orrs	r2, r1
 800a706:	605a      	str	r2, [r3, #4]
  }
}
 800a708:	46c0      	nop			@ (mov r8, r8)
 800a70a:	46bd      	mov	sp, r7
 800a70c:	b002      	add	sp, #8
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	ffff7fff 	.word	0xffff7fff
 800a714:	fffdffff 	.word	0xfffdffff
 800a718:	fffeffff 	.word	0xfffeffff
 800a71c:	fffbffff 	.word	0xfffbffff
 800a720:	ffffefff 	.word	0xffffefff
 800a724:	ffffdfff 	.word	0xffffdfff
 800a728:	ffefffff 	.word	0xffefffff
 800a72c:	ff9fffff 	.word	0xff9fffff
 800a730:	fff7ffff 	.word	0xfff7ffff

0800a734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b092      	sub	sp, #72	@ 0x48
 800a738:	af02      	add	r7, sp, #8
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2290      	movs	r2, #144	@ 0x90
 800a740:	2100      	movs	r1, #0
 800a742:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a744:	f7fe fa5e 	bl	8008c04 <HAL_GetTick>
 800a748:	0003      	movs	r3, r0
 800a74a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2208      	movs	r2, #8
 800a754:	4013      	ands	r3, r2
 800a756:	2b08      	cmp	r3, #8
 800a758:	d12d      	bne.n	800a7b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75c:	2280      	movs	r2, #128	@ 0x80
 800a75e:	0391      	lsls	r1, r2, #14
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	4a47      	ldr	r2, [pc, #284]	@ (800a880 <UART_CheckIdleState+0x14c>)
 800a764:	9200      	str	r2, [sp, #0]
 800a766:	2200      	movs	r2, #0
 800a768:	f000 f88e 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 800a76c:	1e03      	subs	r3, r0, #0
 800a76e:	d022      	beq.n	800a7b6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a770:	f3ef 8310 	mrs	r3, PRIMASK
 800a774:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a778:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a77a:	2301      	movs	r3, #1
 800a77c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a780:	f383 8810 	msr	PRIMASK, r3
}
 800a784:	46c0      	nop			@ (mov r8, r8)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2180      	movs	r1, #128	@ 0x80
 800a792:	438a      	bics	r2, r1
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79c:	f383 8810 	msr	PRIMASK, r3
}
 800a7a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2288      	movs	r2, #136	@ 0x88
 800a7a6:	2120      	movs	r1, #32
 800a7a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2284      	movs	r2, #132	@ 0x84
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e060      	b.n	800a878 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2204      	movs	r2, #4
 800a7be:	4013      	ands	r3, r2
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d146      	bne.n	800a852 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c6:	2280      	movs	r2, #128	@ 0x80
 800a7c8:	03d1      	lsls	r1, r2, #15
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4a2c      	ldr	r2, [pc, #176]	@ (800a880 <UART_CheckIdleState+0x14c>)
 800a7ce:	9200      	str	r2, [sp, #0]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f000 f859 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 800a7d6:	1e03      	subs	r3, r0, #0
 800a7d8:	d03b      	beq.n	800a852 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7da:	f3ef 8310 	mrs	r3, PRIMASK
 800a7de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f383 8810 	msr	PRIMASK, r3
}
 800a7ee:	46c0      	nop			@ (mov r8, r8)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4922      	ldr	r1, [pc, #136]	@ (800a884 <UART_CheckIdleState+0x150>)
 800a7fc:	400a      	ands	r2, r1
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f383 8810 	msr	PRIMASK, r3
}
 800a80a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a80c:	f3ef 8310 	mrs	r3, PRIMASK
 800a810:	61bb      	str	r3, [r7, #24]
  return(result);
 800a812:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a814:	633b      	str	r3, [r7, #48]	@ 0x30
 800a816:	2301      	movs	r3, #1
 800a818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	f383 8810 	msr	PRIMASK, r3
}
 800a820:	46c0      	nop			@ (mov r8, r8)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2101      	movs	r1, #1
 800a82e:	438a      	bics	r2, r1
 800a830:	609a      	str	r2, [r3, #8]
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	f383 8810 	msr	PRIMASK, r3
}
 800a83c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	228c      	movs	r2, #140	@ 0x8c
 800a842:	2120      	movs	r1, #32
 800a844:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2284      	movs	r2, #132	@ 0x84
 800a84a:	2100      	movs	r1, #0
 800a84c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e012      	b.n	800a878 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2288      	movs	r2, #136	@ 0x88
 800a856:	2120      	movs	r1, #32
 800a858:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	228c      	movs	r2, #140	@ 0x8c
 800a85e:	2120      	movs	r1, #32
 800a860:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2284      	movs	r2, #132	@ 0x84
 800a872:	2100      	movs	r1, #0
 800a874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	0018      	movs	r0, r3
 800a87a:	46bd      	mov	sp, r7
 800a87c:	b010      	add	sp, #64	@ 0x40
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	01ffffff 	.word	0x01ffffff
 800a884:	fffffedf 	.word	0xfffffedf

0800a888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	1dfb      	adds	r3, r7, #7
 800a896:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a898:	e051      	b.n	800a93e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	3301      	adds	r3, #1
 800a89e:	d04e      	beq.n	800a93e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8a0:	f7fe f9b0 	bl	8008c04 <HAL_GetTick>
 800a8a4:	0002      	movs	r2, r0
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d302      	bcc.n	800a8b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e051      	b.n	800a95e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2204      	movs	r2, #4
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	d03b      	beq.n	800a93e <UART_WaitOnFlagUntilTimeout+0xb6>
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2b80      	cmp	r3, #128	@ 0x80
 800a8ca:	d038      	beq.n	800a93e <UART_WaitOnFlagUntilTimeout+0xb6>
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2b40      	cmp	r3, #64	@ 0x40
 800a8d0:	d035      	beq.n	800a93e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	69db      	ldr	r3, [r3, #28]
 800a8d8:	2208      	movs	r2, #8
 800a8da:	4013      	ands	r3, r2
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d111      	bne.n	800a904 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	0018      	movs	r0, r3
 800a8ec:	f000 f83c 	bl	800a968 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2290      	movs	r2, #144	@ 0x90
 800a8f4:	2108      	movs	r1, #8
 800a8f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2284      	movs	r2, #132	@ 0x84
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e02c      	b.n	800a95e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	69da      	ldr	r2, [r3, #28]
 800a90a:	2380      	movs	r3, #128	@ 0x80
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	401a      	ands	r2, r3
 800a910:	2380      	movs	r3, #128	@ 0x80
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	429a      	cmp	r2, r3
 800a916:	d112      	bne.n	800a93e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2280      	movs	r2, #128	@ 0x80
 800a91e:	0112      	lsls	r2, r2, #4
 800a920:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	0018      	movs	r0, r3
 800a926:	f000 f81f 	bl	800a968 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2290      	movs	r2, #144	@ 0x90
 800a92e:	2120      	movs	r1, #32
 800a930:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2284      	movs	r2, #132	@ 0x84
 800a936:	2100      	movs	r1, #0
 800a938:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e00f      	b.n	800a95e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	4013      	ands	r3, r2
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	425a      	negs	r2, r3
 800a94e:	4153      	adcs	r3, r2
 800a950:	b2db      	uxtb	r3, r3
 800a952:	001a      	movs	r2, r3
 800a954:	1dfb      	adds	r3, r7, #7
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d09e      	beq.n	800a89a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	0018      	movs	r0, r3
 800a960:	46bd      	mov	sp, r7
 800a962:	b004      	add	sp, #16
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08e      	sub	sp, #56	@ 0x38
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a970:	f3ef 8310 	mrs	r3, PRIMASK
 800a974:	617b      	str	r3, [r7, #20]
  return(result);
 800a976:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a978:	637b      	str	r3, [r7, #52]	@ 0x34
 800a97a:	2301      	movs	r3, #1
 800a97c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	f383 8810 	msr	PRIMASK, r3
}
 800a984:	46c0      	nop			@ (mov r8, r8)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4926      	ldr	r1, [pc, #152]	@ (800aa2c <UART_EndRxTransfer+0xc4>)
 800a992:	400a      	ands	r2, r1
 800a994:	601a      	str	r2, [r3, #0]
 800a996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	f383 8810 	msr	PRIMASK, r3
}
 800a9a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a9a6:	623b      	str	r3, [r7, #32]
  return(result);
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b2:	f383 8810 	msr	PRIMASK, r3
}
 800a9b6:	46c0      	nop			@ (mov r8, r8)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	689a      	ldr	r2, [r3, #8]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	491b      	ldr	r1, [pc, #108]	@ (800aa30 <UART_EndRxTransfer+0xc8>)
 800a9c4:	400a      	ands	r2, r1
 800a9c6:	609a      	str	r2, [r3, #8]
 800a9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	f383 8810 	msr	PRIMASK, r3
}
 800a9d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d118      	bne.n	800aa0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a9e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f383 8810 	msr	PRIMASK, r3
}
 800a9f0:	46c0      	nop			@ (mov r8, r8)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2110      	movs	r1, #16
 800a9fe:	438a      	bics	r2, r1
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f383 8810 	msr	PRIMASK, r3
}
 800aa0c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	228c      	movs	r2, #140	@ 0x8c
 800aa12:	2120      	movs	r1, #32
 800aa14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa22:	46c0      	nop			@ (mov r8, r8)
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b00e      	add	sp, #56	@ 0x38
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	46c0      	nop			@ (mov r8, r8)
 800aa2c:	fffffedf 	.word	0xfffffedf
 800aa30:	effffffe 	.word	0xeffffffe

0800aa34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2284      	movs	r2, #132	@ 0x84
 800aa40:	5c9b      	ldrb	r3, [r3, r2]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_UARTEx_DisableFifoMode+0x16>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e027      	b.n	800aa9a <HAL_UARTEx_DisableFifoMode+0x66>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2284      	movs	r2, #132	@ 0x84
 800aa4e:	2101      	movs	r1, #1
 800aa50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2288      	movs	r2, #136	@ 0x88
 800aa56:	2124      	movs	r1, #36	@ 0x24
 800aa58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	438a      	bics	r2, r1
 800aa70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4a0b      	ldr	r2, [pc, #44]	@ (800aaa4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800aa76:	4013      	ands	r3, r2
 800aa78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2288      	movs	r2, #136	@ 0x88
 800aa8c:	2120      	movs	r1, #32
 800aa8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2284      	movs	r2, #132	@ 0x84
 800aa94:	2100      	movs	r1, #0
 800aa96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	b004      	add	sp, #16
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	46c0      	nop			@ (mov r8, r8)
 800aaa4:	dfffffff 	.word	0xdfffffff

0800aaa8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2284      	movs	r2, #132	@ 0x84
 800aab6:	5c9b      	ldrb	r3, [r3, r2]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e02e      	b.n	800ab1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2284      	movs	r2, #132	@ 0x84
 800aac4:	2101      	movs	r1, #1
 800aac6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2288      	movs	r2, #136	@ 0x88
 800aacc:	2124      	movs	r1, #36	@ 0x24
 800aace:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2101      	movs	r1, #1
 800aae4:	438a      	bics	r2, r1
 800aae6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	08d9      	lsrs	r1, r3, #3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	0018      	movs	r0, r3
 800ab00:	f000 f854 	bl	800abac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2288      	movs	r2, #136	@ 0x88
 800ab10:	2120      	movs	r1, #32
 800ab12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2284      	movs	r2, #132	@ 0x84
 800ab18:	2100      	movs	r1, #0
 800ab1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	0018      	movs	r0, r3
 800ab20:	46bd      	mov	sp, r7
 800ab22:	b004      	add	sp, #16
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2284      	movs	r2, #132	@ 0x84
 800ab36:	5c9b      	ldrb	r3, [r3, r2]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d101      	bne.n	800ab40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e02f      	b.n	800aba0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2284      	movs	r2, #132	@ 0x84
 800ab44:	2101      	movs	r1, #1
 800ab46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2288      	movs	r2, #136	@ 0x88
 800ab4c:	2124      	movs	r1, #36	@ 0x24
 800ab4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2101      	movs	r1, #1
 800ab64:	438a      	bics	r2, r1
 800ab66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	4a0e      	ldr	r2, [pc, #56]	@ (800aba8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	0019      	movs	r1, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	0018      	movs	r0, r3
 800ab82:	f000 f813 	bl	800abac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2288      	movs	r2, #136	@ 0x88
 800ab92:	2120      	movs	r1, #32
 800ab94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2284      	movs	r2, #132	@ 0x84
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	0018      	movs	r0, r3
 800aba2:	46bd      	mov	sp, r7
 800aba4:	b004      	add	sp, #16
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	f1ffffff 	.word	0xf1ffffff

0800abac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d108      	bne.n	800abce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	226a      	movs	r2, #106	@ 0x6a
 800abc0:	2101      	movs	r1, #1
 800abc2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2268      	movs	r2, #104	@ 0x68
 800abc8:	2101      	movs	r1, #1
 800abca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abcc:	e043      	b.n	800ac56 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abce:	260f      	movs	r6, #15
 800abd0:	19bb      	adds	r3, r7, r6
 800abd2:	2208      	movs	r2, #8
 800abd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abd6:	200e      	movs	r0, #14
 800abd8:	183b      	adds	r3, r7, r0
 800abda:	2208      	movs	r2, #8
 800abdc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	0e5b      	lsrs	r3, r3, #25
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	240d      	movs	r4, #13
 800abea:	193b      	adds	r3, r7, r4
 800abec:	2107      	movs	r1, #7
 800abee:	400a      	ands	r2, r1
 800abf0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	0f5b      	lsrs	r3, r3, #29
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	250c      	movs	r5, #12
 800abfe:	197b      	adds	r3, r7, r5
 800ac00:	2107      	movs	r1, #7
 800ac02:	400a      	ands	r2, r1
 800ac04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac06:	183b      	adds	r3, r7, r0
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	197a      	adds	r2, r7, r5
 800ac0c:	7812      	ldrb	r2, [r2, #0]
 800ac0e:	4914      	ldr	r1, [pc, #80]	@ (800ac60 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac10:	5c8a      	ldrb	r2, [r1, r2]
 800ac12:	435a      	muls	r2, r3
 800ac14:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac16:	197b      	adds	r3, r7, r5
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	4a12      	ldr	r2, [pc, #72]	@ (800ac64 <UARTEx_SetNbDataToProcess+0xb8>)
 800ac1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac1e:	0019      	movs	r1, r3
 800ac20:	f7fd fafa 	bl	8008218 <__divsi3>
 800ac24:	0003      	movs	r3, r0
 800ac26:	b299      	uxth	r1, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	226a      	movs	r2, #106	@ 0x6a
 800ac2c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac2e:	19bb      	adds	r3, r7, r6
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	193a      	adds	r2, r7, r4
 800ac34:	7812      	ldrb	r2, [r2, #0]
 800ac36:	490a      	ldr	r1, [pc, #40]	@ (800ac60 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac38:	5c8a      	ldrb	r2, [r1, r2]
 800ac3a:	435a      	muls	r2, r3
 800ac3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac3e:	193b      	adds	r3, r7, r4
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	4a08      	ldr	r2, [pc, #32]	@ (800ac64 <UARTEx_SetNbDataToProcess+0xb8>)
 800ac44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac46:	0019      	movs	r1, r3
 800ac48:	f7fd fae6 	bl	8008218 <__divsi3>
 800ac4c:	0003      	movs	r3, r0
 800ac4e:	b299      	uxth	r1, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2268      	movs	r2, #104	@ 0x68
 800ac54:	5299      	strh	r1, [r3, r2]
}
 800ac56:	46c0      	nop			@ (mov r8, r8)
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	b005      	add	sp, #20
 800ac5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac5e:	46c0      	nop			@ (mov r8, r8)
 800ac60:	0800b6d8 	.word	0x0800b6d8
 800ac64:	0800b6e0 	.word	0x0800b6e0

0800ac68 <std>:
 800ac68:	2300      	movs	r3, #0
 800ac6a:	b510      	push	{r4, lr}
 800ac6c:	0004      	movs	r4, r0
 800ac6e:	6003      	str	r3, [r0, #0]
 800ac70:	6043      	str	r3, [r0, #4]
 800ac72:	6083      	str	r3, [r0, #8]
 800ac74:	8181      	strh	r1, [r0, #12]
 800ac76:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac78:	81c2      	strh	r2, [r0, #14]
 800ac7a:	6103      	str	r3, [r0, #16]
 800ac7c:	6143      	str	r3, [r0, #20]
 800ac7e:	6183      	str	r3, [r0, #24]
 800ac80:	0019      	movs	r1, r3
 800ac82:	2208      	movs	r2, #8
 800ac84:	305c      	adds	r0, #92	@ 0x5c
 800ac86:	f000 f9ff 	bl	800b088 <memset>
 800ac8a:	4b0b      	ldr	r3, [pc, #44]	@ (800acb8 <std+0x50>)
 800ac8c:	6224      	str	r4, [r4, #32]
 800ac8e:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac90:	4b0a      	ldr	r3, [pc, #40]	@ (800acbc <std+0x54>)
 800ac92:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac94:	4b0a      	ldr	r3, [pc, #40]	@ (800acc0 <std+0x58>)
 800ac96:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac98:	4b0a      	ldr	r3, [pc, #40]	@ (800acc4 <std+0x5c>)
 800ac9a:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac9c:	4b0a      	ldr	r3, [pc, #40]	@ (800acc8 <std+0x60>)
 800ac9e:	429c      	cmp	r4, r3
 800aca0:	d005      	beq.n	800acae <std+0x46>
 800aca2:	4b0a      	ldr	r3, [pc, #40]	@ (800accc <std+0x64>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	d002      	beq.n	800acae <std+0x46>
 800aca8:	4b09      	ldr	r3, [pc, #36]	@ (800acd0 <std+0x68>)
 800acaa:	429c      	cmp	r4, r3
 800acac:	d103      	bne.n	800acb6 <std+0x4e>
 800acae:	0020      	movs	r0, r4
 800acb0:	3058      	adds	r0, #88	@ 0x58
 800acb2:	f000 fa69 	bl	800b188 <__retarget_lock_init_recursive>
 800acb6:	bd10      	pop	{r4, pc}
 800acb8:	0800aeb1 	.word	0x0800aeb1
 800acbc:	0800aed9 	.word	0x0800aed9
 800acc0:	0800af11 	.word	0x0800af11
 800acc4:	0800af3d 	.word	0x0800af3d
 800acc8:	200001a0 	.word	0x200001a0
 800accc:	20000208 	.word	0x20000208
 800acd0:	20000270 	.word	0x20000270

0800acd4 <stdio_exit_handler>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	4a03      	ldr	r2, [pc, #12]	@ (800ace4 <stdio_exit_handler+0x10>)
 800acd8:	4903      	ldr	r1, [pc, #12]	@ (800ace8 <stdio_exit_handler+0x14>)
 800acda:	4804      	ldr	r0, [pc, #16]	@ (800acec <stdio_exit_handler+0x18>)
 800acdc:	f000 f86c 	bl	800adb8 <_fwalk_sglue>
 800ace0:	bd10      	pop	{r4, pc}
 800ace2:	46c0      	nop			@ (mov r8, r8)
 800ace4:	2000008c 	.word	0x2000008c
 800ace8:	0800b495 	.word	0x0800b495
 800acec:	2000009c 	.word	0x2000009c

0800acf0 <cleanup_stdio>:
 800acf0:	6841      	ldr	r1, [r0, #4]
 800acf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad20 <cleanup_stdio+0x30>)
 800acf4:	b510      	push	{r4, lr}
 800acf6:	0004      	movs	r4, r0
 800acf8:	4299      	cmp	r1, r3
 800acfa:	d001      	beq.n	800ad00 <cleanup_stdio+0x10>
 800acfc:	f000 fbca 	bl	800b494 <_fflush_r>
 800ad00:	68a1      	ldr	r1, [r4, #8]
 800ad02:	4b08      	ldr	r3, [pc, #32]	@ (800ad24 <cleanup_stdio+0x34>)
 800ad04:	4299      	cmp	r1, r3
 800ad06:	d002      	beq.n	800ad0e <cleanup_stdio+0x1e>
 800ad08:	0020      	movs	r0, r4
 800ad0a:	f000 fbc3 	bl	800b494 <_fflush_r>
 800ad0e:	68e1      	ldr	r1, [r4, #12]
 800ad10:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <cleanup_stdio+0x38>)
 800ad12:	4299      	cmp	r1, r3
 800ad14:	d002      	beq.n	800ad1c <cleanup_stdio+0x2c>
 800ad16:	0020      	movs	r0, r4
 800ad18:	f000 fbbc 	bl	800b494 <_fflush_r>
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	46c0      	nop			@ (mov r8, r8)
 800ad20:	200001a0 	.word	0x200001a0
 800ad24:	20000208 	.word	0x20000208
 800ad28:	20000270 	.word	0x20000270

0800ad2c <global_stdio_init.part.0>:
 800ad2c:	b510      	push	{r4, lr}
 800ad2e:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <global_stdio_init.part.0+0x28>)
 800ad30:	4a09      	ldr	r2, [pc, #36]	@ (800ad58 <global_stdio_init.part.0+0x2c>)
 800ad32:	2104      	movs	r1, #4
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	4809      	ldr	r0, [pc, #36]	@ (800ad5c <global_stdio_init.part.0+0x30>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f7ff ff95 	bl	800ac68 <std>
 800ad3e:	2201      	movs	r2, #1
 800ad40:	2109      	movs	r1, #9
 800ad42:	4807      	ldr	r0, [pc, #28]	@ (800ad60 <global_stdio_init.part.0+0x34>)
 800ad44:	f7ff ff90 	bl	800ac68 <std>
 800ad48:	2202      	movs	r2, #2
 800ad4a:	2112      	movs	r1, #18
 800ad4c:	4805      	ldr	r0, [pc, #20]	@ (800ad64 <global_stdio_init.part.0+0x38>)
 800ad4e:	f7ff ff8b 	bl	800ac68 <std>
 800ad52:	bd10      	pop	{r4, pc}
 800ad54:	200002d8 	.word	0x200002d8
 800ad58:	0800acd5 	.word	0x0800acd5
 800ad5c:	200001a0 	.word	0x200001a0
 800ad60:	20000208 	.word	0x20000208
 800ad64:	20000270 	.word	0x20000270

0800ad68 <__sfp_lock_acquire>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4802      	ldr	r0, [pc, #8]	@ (800ad74 <__sfp_lock_acquire+0xc>)
 800ad6c:	f000 fa0d 	bl	800b18a <__retarget_lock_acquire_recursive>
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	46c0      	nop			@ (mov r8, r8)
 800ad74:	200002e1 	.word	0x200002e1

0800ad78 <__sfp_lock_release>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	4802      	ldr	r0, [pc, #8]	@ (800ad84 <__sfp_lock_release+0xc>)
 800ad7c:	f000 fa06 	bl	800b18c <__retarget_lock_release_recursive>
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	46c0      	nop			@ (mov r8, r8)
 800ad84:	200002e1 	.word	0x200002e1

0800ad88 <__sinit>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	0004      	movs	r4, r0
 800ad8c:	f7ff ffec 	bl	800ad68 <__sfp_lock_acquire>
 800ad90:	6a23      	ldr	r3, [r4, #32]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <__sinit+0x14>
 800ad96:	f7ff ffef 	bl	800ad78 <__sfp_lock_release>
 800ad9a:	bd10      	pop	{r4, pc}
 800ad9c:	4b04      	ldr	r3, [pc, #16]	@ (800adb0 <__sinit+0x28>)
 800ad9e:	6223      	str	r3, [r4, #32]
 800ada0:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <__sinit+0x2c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1f6      	bne.n	800ad96 <__sinit+0xe>
 800ada8:	f7ff ffc0 	bl	800ad2c <global_stdio_init.part.0>
 800adac:	e7f3      	b.n	800ad96 <__sinit+0xe>
 800adae:	46c0      	nop			@ (mov r8, r8)
 800adb0:	0800acf1 	.word	0x0800acf1
 800adb4:	200002d8 	.word	0x200002d8

0800adb8 <_fwalk_sglue>:
 800adb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adba:	0014      	movs	r4, r2
 800adbc:	2600      	movs	r6, #0
 800adbe:	9000      	str	r0, [sp, #0]
 800adc0:	9101      	str	r1, [sp, #4]
 800adc2:	68a5      	ldr	r5, [r4, #8]
 800adc4:	6867      	ldr	r7, [r4, #4]
 800adc6:	3f01      	subs	r7, #1
 800adc8:	d504      	bpl.n	800add4 <_fwalk_sglue+0x1c>
 800adca:	6824      	ldr	r4, [r4, #0]
 800adcc:	2c00      	cmp	r4, #0
 800adce:	d1f8      	bne.n	800adc2 <_fwalk_sglue+0xa>
 800add0:	0030      	movs	r0, r6
 800add2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800add4:	89ab      	ldrh	r3, [r5, #12]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d908      	bls.n	800adec <_fwalk_sglue+0x34>
 800adda:	220e      	movs	r2, #14
 800addc:	5eab      	ldrsh	r3, [r5, r2]
 800adde:	3301      	adds	r3, #1
 800ade0:	d004      	beq.n	800adec <_fwalk_sglue+0x34>
 800ade2:	0029      	movs	r1, r5
 800ade4:	9800      	ldr	r0, [sp, #0]
 800ade6:	9b01      	ldr	r3, [sp, #4]
 800ade8:	4798      	blx	r3
 800adea:	4306      	orrs	r6, r0
 800adec:	3568      	adds	r5, #104	@ 0x68
 800adee:	e7ea      	b.n	800adc6 <_fwalk_sglue+0xe>

0800adf0 <_puts_r>:
 800adf0:	6a03      	ldr	r3, [r0, #32]
 800adf2:	b570      	push	{r4, r5, r6, lr}
 800adf4:	0005      	movs	r5, r0
 800adf6:	000e      	movs	r6, r1
 800adf8:	6884      	ldr	r4, [r0, #8]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <_puts_r+0x12>
 800adfe:	f7ff ffc3 	bl	800ad88 <__sinit>
 800ae02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae04:	07db      	lsls	r3, r3, #31
 800ae06:	d405      	bmi.n	800ae14 <_puts_r+0x24>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	059b      	lsls	r3, r3, #22
 800ae0c:	d402      	bmi.n	800ae14 <_puts_r+0x24>
 800ae0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae10:	f000 f9bb 	bl	800b18a <__retarget_lock_acquire_recursive>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	071b      	lsls	r3, r3, #28
 800ae18:	d502      	bpl.n	800ae20 <_puts_r+0x30>
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d11f      	bne.n	800ae60 <_puts_r+0x70>
 800ae20:	0021      	movs	r1, r4
 800ae22:	0028      	movs	r0, r5
 800ae24:	f000 f8d2 	bl	800afcc <__swsetup_r>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d019      	beq.n	800ae60 <_puts_r+0x70>
 800ae2c:	2501      	movs	r5, #1
 800ae2e:	426d      	negs	r5, r5
 800ae30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae32:	07db      	lsls	r3, r3, #31
 800ae34:	d405      	bmi.n	800ae42 <_puts_r+0x52>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	059b      	lsls	r3, r3, #22
 800ae3a:	d402      	bmi.n	800ae42 <_puts_r+0x52>
 800ae3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae3e:	f000 f9a5 	bl	800b18c <__retarget_lock_release_recursive>
 800ae42:	0028      	movs	r0, r5
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
 800ae46:	3601      	adds	r6, #1
 800ae48:	60a3      	str	r3, [r4, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	da04      	bge.n	800ae58 <_puts_r+0x68>
 800ae4e:	69a2      	ldr	r2, [r4, #24]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	dc16      	bgt.n	800ae82 <_puts_r+0x92>
 800ae54:	290a      	cmp	r1, #10
 800ae56:	d014      	beq.n	800ae82 <_puts_r+0x92>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	6022      	str	r2, [r4, #0]
 800ae5e:	7019      	strb	r1, [r3, #0]
 800ae60:	68a3      	ldr	r3, [r4, #8]
 800ae62:	7831      	ldrb	r1, [r6, #0]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	2900      	cmp	r1, #0
 800ae68:	d1ed      	bne.n	800ae46 <_puts_r+0x56>
 800ae6a:	60a3      	str	r3, [r4, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	da0f      	bge.n	800ae90 <_puts_r+0xa0>
 800ae70:	0022      	movs	r2, r4
 800ae72:	0028      	movs	r0, r5
 800ae74:	310a      	adds	r1, #10
 800ae76:	f000 f867 	bl	800af48 <__swbuf_r>
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	d0d6      	beq.n	800ae2c <_puts_r+0x3c>
 800ae7e:	250a      	movs	r5, #10
 800ae80:	e7d6      	b.n	800ae30 <_puts_r+0x40>
 800ae82:	0022      	movs	r2, r4
 800ae84:	0028      	movs	r0, r5
 800ae86:	f000 f85f 	bl	800af48 <__swbuf_r>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d1e8      	bne.n	800ae60 <_puts_r+0x70>
 800ae8e:	e7cd      	b.n	800ae2c <_puts_r+0x3c>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	6022      	str	r2, [r4, #0]
 800ae96:	220a      	movs	r2, #10
 800ae98:	701a      	strb	r2, [r3, #0]
 800ae9a:	e7f0      	b.n	800ae7e <_puts_r+0x8e>

0800ae9c <puts>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	4b03      	ldr	r3, [pc, #12]	@ (800aeac <puts+0x10>)
 800aea0:	0001      	movs	r1, r0
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	f7ff ffa4 	bl	800adf0 <_puts_r>
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	46c0      	nop			@ (mov r8, r8)
 800aeac:	20000098 	.word	0x20000098

0800aeb0 <__sread>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	000c      	movs	r4, r1
 800aeb4:	250e      	movs	r5, #14
 800aeb6:	5f49      	ldrsh	r1, [r1, r5]
 800aeb8:	f000 f914 	bl	800b0e4 <_read_r>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	db03      	blt.n	800aec8 <__sread+0x18>
 800aec0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aec2:	181b      	adds	r3, r3, r0
 800aec4:	6563      	str	r3, [r4, #84]	@ 0x54
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	4a02      	ldr	r2, [pc, #8]	@ (800aed4 <__sread+0x24>)
 800aecc:	4013      	ands	r3, r2
 800aece:	81a3      	strh	r3, [r4, #12]
 800aed0:	e7f9      	b.n	800aec6 <__sread+0x16>
 800aed2:	46c0      	nop			@ (mov r8, r8)
 800aed4:	ffffefff 	.word	0xffffefff

0800aed8 <__swrite>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	001f      	movs	r7, r3
 800aedc:	898b      	ldrh	r3, [r1, #12]
 800aede:	0005      	movs	r5, r0
 800aee0:	000c      	movs	r4, r1
 800aee2:	0016      	movs	r6, r2
 800aee4:	05db      	lsls	r3, r3, #23
 800aee6:	d505      	bpl.n	800aef4 <__swrite+0x1c>
 800aee8:	230e      	movs	r3, #14
 800aeea:	5ec9      	ldrsh	r1, [r1, r3]
 800aeec:	2200      	movs	r2, #0
 800aeee:	2302      	movs	r3, #2
 800aef0:	f000 f8e4 	bl	800b0bc <_lseek_r>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	4a05      	ldr	r2, [pc, #20]	@ (800af0c <__swrite+0x34>)
 800aef8:	0028      	movs	r0, r5
 800aefa:	4013      	ands	r3, r2
 800aefc:	81a3      	strh	r3, [r4, #12]
 800aefe:	0032      	movs	r2, r6
 800af00:	230e      	movs	r3, #14
 800af02:	5ee1      	ldrsh	r1, [r4, r3]
 800af04:	003b      	movs	r3, r7
 800af06:	f000 f901 	bl	800b10c <_write_r>
 800af0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0c:	ffffefff 	.word	0xffffefff

0800af10 <__sseek>:
 800af10:	b570      	push	{r4, r5, r6, lr}
 800af12:	000c      	movs	r4, r1
 800af14:	250e      	movs	r5, #14
 800af16:	5f49      	ldrsh	r1, [r1, r5]
 800af18:	f000 f8d0 	bl	800b0bc <_lseek_r>
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	1c42      	adds	r2, r0, #1
 800af20:	d103      	bne.n	800af2a <__sseek+0x1a>
 800af22:	4a05      	ldr	r2, [pc, #20]	@ (800af38 <__sseek+0x28>)
 800af24:	4013      	ands	r3, r2
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	bd70      	pop	{r4, r5, r6, pc}
 800af2a:	2280      	movs	r2, #128	@ 0x80
 800af2c:	0152      	lsls	r2, r2, #5
 800af2e:	4313      	orrs	r3, r2
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	6560      	str	r0, [r4, #84]	@ 0x54
 800af34:	e7f8      	b.n	800af28 <__sseek+0x18>
 800af36:	46c0      	nop			@ (mov r8, r8)
 800af38:	ffffefff 	.word	0xffffefff

0800af3c <__sclose>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	230e      	movs	r3, #14
 800af40:	5ec9      	ldrsh	r1, [r1, r3]
 800af42:	f000 f8a9 	bl	800b098 <_close_r>
 800af46:	bd10      	pop	{r4, pc}

0800af48 <__swbuf_r>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	0006      	movs	r6, r0
 800af4c:	000d      	movs	r5, r1
 800af4e:	0014      	movs	r4, r2
 800af50:	2800      	cmp	r0, #0
 800af52:	d004      	beq.n	800af5e <__swbuf_r+0x16>
 800af54:	6a03      	ldr	r3, [r0, #32]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <__swbuf_r+0x16>
 800af5a:	f7ff ff15 	bl	800ad88 <__sinit>
 800af5e:	69a3      	ldr	r3, [r4, #24]
 800af60:	60a3      	str	r3, [r4, #8]
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	071b      	lsls	r3, r3, #28
 800af66:	d502      	bpl.n	800af6e <__swbuf_r+0x26>
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d109      	bne.n	800af82 <__swbuf_r+0x3a>
 800af6e:	0021      	movs	r1, r4
 800af70:	0030      	movs	r0, r6
 800af72:	f000 f82b 	bl	800afcc <__swsetup_r>
 800af76:	2800      	cmp	r0, #0
 800af78:	d003      	beq.n	800af82 <__swbuf_r+0x3a>
 800af7a:	2501      	movs	r5, #1
 800af7c:	426d      	negs	r5, r5
 800af7e:	0028      	movs	r0, r5
 800af80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	6820      	ldr	r0, [r4, #0]
 800af86:	b2ef      	uxtb	r7, r5
 800af88:	1ac0      	subs	r0, r0, r3
 800af8a:	6963      	ldr	r3, [r4, #20]
 800af8c:	b2ed      	uxtb	r5, r5
 800af8e:	4283      	cmp	r3, r0
 800af90:	dc05      	bgt.n	800af9e <__swbuf_r+0x56>
 800af92:	0021      	movs	r1, r4
 800af94:	0030      	movs	r0, r6
 800af96:	f000 fa7d 	bl	800b494 <_fflush_r>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d1ed      	bne.n	800af7a <__swbuf_r+0x32>
 800af9e:	68a3      	ldr	r3, [r4, #8]
 800afa0:	3001      	adds	r0, #1
 800afa2:	3b01      	subs	r3, #1
 800afa4:	60a3      	str	r3, [r4, #8]
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	6022      	str	r2, [r4, #0]
 800afac:	701f      	strb	r7, [r3, #0]
 800afae:	6963      	ldr	r3, [r4, #20]
 800afb0:	4283      	cmp	r3, r0
 800afb2:	d004      	beq.n	800afbe <__swbuf_r+0x76>
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	07db      	lsls	r3, r3, #31
 800afb8:	d5e1      	bpl.n	800af7e <__swbuf_r+0x36>
 800afba:	2d0a      	cmp	r5, #10
 800afbc:	d1df      	bne.n	800af7e <__swbuf_r+0x36>
 800afbe:	0021      	movs	r1, r4
 800afc0:	0030      	movs	r0, r6
 800afc2:	f000 fa67 	bl	800b494 <_fflush_r>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d0d9      	beq.n	800af7e <__swbuf_r+0x36>
 800afca:	e7d6      	b.n	800af7a <__swbuf_r+0x32>

0800afcc <__swsetup_r>:
 800afcc:	4b2d      	ldr	r3, [pc, #180]	@ (800b084 <__swsetup_r+0xb8>)
 800afce:	b570      	push	{r4, r5, r6, lr}
 800afd0:	0005      	movs	r5, r0
 800afd2:	6818      	ldr	r0, [r3, #0]
 800afd4:	000c      	movs	r4, r1
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d004      	beq.n	800afe4 <__swsetup_r+0x18>
 800afda:	6a03      	ldr	r3, [r0, #32]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <__swsetup_r+0x18>
 800afe0:	f7ff fed2 	bl	800ad88 <__sinit>
 800afe4:	230c      	movs	r3, #12
 800afe6:	5ee2      	ldrsh	r2, [r4, r3]
 800afe8:	0713      	lsls	r3, r2, #28
 800afea:	d423      	bmi.n	800b034 <__swsetup_r+0x68>
 800afec:	06d3      	lsls	r3, r2, #27
 800afee:	d407      	bmi.n	800b000 <__swsetup_r+0x34>
 800aff0:	2309      	movs	r3, #9
 800aff2:	602b      	str	r3, [r5, #0]
 800aff4:	2340      	movs	r3, #64	@ 0x40
 800aff6:	2001      	movs	r0, #1
 800aff8:	4313      	orrs	r3, r2
 800affa:	81a3      	strh	r3, [r4, #12]
 800affc:	4240      	negs	r0, r0
 800affe:	e03a      	b.n	800b076 <__swsetup_r+0xaa>
 800b000:	0752      	lsls	r2, r2, #29
 800b002:	d513      	bpl.n	800b02c <__swsetup_r+0x60>
 800b004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b006:	2900      	cmp	r1, #0
 800b008:	d008      	beq.n	800b01c <__swsetup_r+0x50>
 800b00a:	0023      	movs	r3, r4
 800b00c:	3344      	adds	r3, #68	@ 0x44
 800b00e:	4299      	cmp	r1, r3
 800b010:	d002      	beq.n	800b018 <__swsetup_r+0x4c>
 800b012:	0028      	movs	r0, r5
 800b014:	f000 f8bc 	bl	800b190 <_free_r>
 800b018:	2300      	movs	r3, #0
 800b01a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b01c:	2224      	movs	r2, #36	@ 0x24
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	4393      	bics	r3, r2
 800b022:	81a3      	strh	r3, [r4, #12]
 800b024:	2300      	movs	r3, #0
 800b026:	6063      	str	r3, [r4, #4]
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	2308      	movs	r3, #8
 800b02e:	89a2      	ldrh	r2, [r4, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10b      	bne.n	800b052 <__swsetup_r+0x86>
 800b03a:	21a0      	movs	r1, #160	@ 0xa0
 800b03c:	2280      	movs	r2, #128	@ 0x80
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	0089      	lsls	r1, r1, #2
 800b042:	0092      	lsls	r2, r2, #2
 800b044:	400b      	ands	r3, r1
 800b046:	4293      	cmp	r3, r2
 800b048:	d003      	beq.n	800b052 <__swsetup_r+0x86>
 800b04a:	0021      	movs	r1, r4
 800b04c:	0028      	movs	r0, r5
 800b04e:	f000 fa77 	bl	800b540 <__smakebuf_r>
 800b052:	230c      	movs	r3, #12
 800b054:	5ee2      	ldrsh	r2, [r4, r3]
 800b056:	2101      	movs	r1, #1
 800b058:	0013      	movs	r3, r2
 800b05a:	400b      	ands	r3, r1
 800b05c:	420a      	tst	r2, r1
 800b05e:	d00b      	beq.n	800b078 <__swsetup_r+0xac>
 800b060:	2300      	movs	r3, #0
 800b062:	60a3      	str	r3, [r4, #8]
 800b064:	6963      	ldr	r3, [r4, #20]
 800b066:	425b      	negs	r3, r3
 800b068:	61a3      	str	r3, [r4, #24]
 800b06a:	2000      	movs	r0, #0
 800b06c:	6923      	ldr	r3, [r4, #16]
 800b06e:	4283      	cmp	r3, r0
 800b070:	d101      	bne.n	800b076 <__swsetup_r+0xaa>
 800b072:	0613      	lsls	r3, r2, #24
 800b074:	d4be      	bmi.n	800aff4 <__swsetup_r+0x28>
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	0791      	lsls	r1, r2, #30
 800b07a:	d400      	bmi.n	800b07e <__swsetup_r+0xb2>
 800b07c:	6963      	ldr	r3, [r4, #20]
 800b07e:	60a3      	str	r3, [r4, #8]
 800b080:	e7f3      	b.n	800b06a <__swsetup_r+0x9e>
 800b082:	46c0      	nop			@ (mov r8, r8)
 800b084:	20000098 	.word	0x20000098

0800b088 <memset>:
 800b088:	0003      	movs	r3, r0
 800b08a:	1882      	adds	r2, r0, r2
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d100      	bne.n	800b092 <memset+0xa>
 800b090:	4770      	bx	lr
 800b092:	7019      	strb	r1, [r3, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	e7f9      	b.n	800b08c <memset+0x4>

0800b098 <_close_r>:
 800b098:	2300      	movs	r3, #0
 800b09a:	b570      	push	{r4, r5, r6, lr}
 800b09c:	4d06      	ldr	r5, [pc, #24]	@ (800b0b8 <_close_r+0x20>)
 800b09e:	0004      	movs	r4, r0
 800b0a0:	0008      	movs	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f7fd fca0 	bl	80089e8 <_close>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d103      	bne.n	800b0b4 <_close_r+0x1c>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d000      	beq.n	800b0b4 <_close_r+0x1c>
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
 800b0b6:	46c0      	nop			@ (mov r8, r8)
 800b0b8:	200002dc 	.word	0x200002dc

0800b0bc <_lseek_r>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	0004      	movs	r4, r0
 800b0c0:	0008      	movs	r0, r1
 800b0c2:	0011      	movs	r1, r2
 800b0c4:	001a      	movs	r2, r3
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	4d05      	ldr	r5, [pc, #20]	@ (800b0e0 <_lseek_r+0x24>)
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	f7fd fcad 	bl	8008a2a <_lseek>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d103      	bne.n	800b0dc <_lseek_r+0x20>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d000      	beq.n	800b0dc <_lseek_r+0x20>
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	46c0      	nop			@ (mov r8, r8)
 800b0e0:	200002dc 	.word	0x200002dc

0800b0e4 <_read_r>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	0004      	movs	r4, r0
 800b0e8:	0008      	movs	r0, r1
 800b0ea:	0011      	movs	r1, r2
 800b0ec:	001a      	movs	r2, r3
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4d05      	ldr	r5, [pc, #20]	@ (800b108 <_read_r+0x24>)
 800b0f2:	602b      	str	r3, [r5, #0]
 800b0f4:	f7fd fc5b 	bl	80089ae <_read>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d103      	bne.n	800b104 <_read_r+0x20>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d000      	beq.n	800b104 <_read_r+0x20>
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	46c0      	nop			@ (mov r8, r8)
 800b108:	200002dc 	.word	0x200002dc

0800b10c <_write_r>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	0004      	movs	r4, r0
 800b110:	0008      	movs	r0, r1
 800b112:	0011      	movs	r1, r2
 800b114:	001a      	movs	r2, r3
 800b116:	2300      	movs	r3, #0
 800b118:	4d05      	ldr	r5, [pc, #20]	@ (800b130 <_write_r+0x24>)
 800b11a:	602b      	str	r3, [r5, #0]
 800b11c:	f7fd fa7e 	bl	800861c <_write>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d103      	bne.n	800b12c <_write_r+0x20>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d000      	beq.n	800b12c <_write_r+0x20>
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	bd70      	pop	{r4, r5, r6, pc}
 800b12e:	46c0      	nop			@ (mov r8, r8)
 800b130:	200002dc 	.word	0x200002dc

0800b134 <__errno>:
 800b134:	4b01      	ldr	r3, [pc, #4]	@ (800b13c <__errno+0x8>)
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	4770      	bx	lr
 800b13a:	46c0      	nop			@ (mov r8, r8)
 800b13c:	20000098 	.word	0x20000098

0800b140 <__libc_init_array>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	2600      	movs	r6, #0
 800b144:	4c0c      	ldr	r4, [pc, #48]	@ (800b178 <__libc_init_array+0x38>)
 800b146:	4d0d      	ldr	r5, [pc, #52]	@ (800b17c <__libc_init_array+0x3c>)
 800b148:	1b64      	subs	r4, r4, r5
 800b14a:	10a4      	asrs	r4, r4, #2
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	d109      	bne.n	800b164 <__libc_init_array+0x24>
 800b150:	2600      	movs	r6, #0
 800b152:	f000 fa6d 	bl	800b630 <_init>
 800b156:	4c0a      	ldr	r4, [pc, #40]	@ (800b180 <__libc_init_array+0x40>)
 800b158:	4d0a      	ldr	r5, [pc, #40]	@ (800b184 <__libc_init_array+0x44>)
 800b15a:	1b64      	subs	r4, r4, r5
 800b15c:	10a4      	asrs	r4, r4, #2
 800b15e:	42a6      	cmp	r6, r4
 800b160:	d105      	bne.n	800b16e <__libc_init_array+0x2e>
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	00b3      	lsls	r3, r6, #2
 800b166:	58eb      	ldr	r3, [r5, r3]
 800b168:	4798      	blx	r3
 800b16a:	3601      	adds	r6, #1
 800b16c:	e7ee      	b.n	800b14c <__libc_init_array+0xc>
 800b16e:	00b3      	lsls	r3, r6, #2
 800b170:	58eb      	ldr	r3, [r5, r3]
 800b172:	4798      	blx	r3
 800b174:	3601      	adds	r6, #1
 800b176:	e7f2      	b.n	800b15e <__libc_init_array+0x1e>
 800b178:	0800b6f0 	.word	0x0800b6f0
 800b17c:	0800b6f0 	.word	0x0800b6f0
 800b180:	0800b6f4 	.word	0x0800b6f4
 800b184:	0800b6f0 	.word	0x0800b6f0

0800b188 <__retarget_lock_init_recursive>:
 800b188:	4770      	bx	lr

0800b18a <__retarget_lock_acquire_recursive>:
 800b18a:	4770      	bx	lr

0800b18c <__retarget_lock_release_recursive>:
 800b18c:	4770      	bx	lr
	...

0800b190 <_free_r>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	0005      	movs	r5, r0
 800b194:	1e0c      	subs	r4, r1, #0
 800b196:	d010      	beq.n	800b1ba <_free_r+0x2a>
 800b198:	3c04      	subs	r4, #4
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da00      	bge.n	800b1a2 <_free_r+0x12>
 800b1a0:	18e4      	adds	r4, r4, r3
 800b1a2:	0028      	movs	r0, r5
 800b1a4:	f000 f8e0 	bl	800b368 <__malloc_lock>
 800b1a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b220 <_free_r+0x90>)
 800b1aa:	6813      	ldr	r3, [r2, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <_free_r+0x2c>
 800b1b0:	6063      	str	r3, [r4, #4]
 800b1b2:	6014      	str	r4, [r2, #0]
 800b1b4:	0028      	movs	r0, r5
 800b1b6:	f000 f8df 	bl	800b378 <__malloc_unlock>
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	d908      	bls.n	800b1d2 <_free_r+0x42>
 800b1c0:	6820      	ldr	r0, [r4, #0]
 800b1c2:	1821      	adds	r1, r4, r0
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	d1f3      	bne.n	800b1b0 <_free_r+0x20>
 800b1c8:	6819      	ldr	r1, [r3, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	1809      	adds	r1, r1, r0
 800b1ce:	6021      	str	r1, [r4, #0]
 800b1d0:	e7ee      	b.n	800b1b0 <_free_r+0x20>
 800b1d2:	001a      	movs	r2, r3
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d001      	beq.n	800b1de <_free_r+0x4e>
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	d9f9      	bls.n	800b1d2 <_free_r+0x42>
 800b1de:	6811      	ldr	r1, [r2, #0]
 800b1e0:	1850      	adds	r0, r2, r1
 800b1e2:	42a0      	cmp	r0, r4
 800b1e4:	d10b      	bne.n	800b1fe <_free_r+0x6e>
 800b1e6:	6820      	ldr	r0, [r4, #0]
 800b1e8:	1809      	adds	r1, r1, r0
 800b1ea:	1850      	adds	r0, r2, r1
 800b1ec:	6011      	str	r1, [r2, #0]
 800b1ee:	4283      	cmp	r3, r0
 800b1f0:	d1e0      	bne.n	800b1b4 <_free_r+0x24>
 800b1f2:	6818      	ldr	r0, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	1841      	adds	r1, r0, r1
 800b1f8:	6011      	str	r1, [r2, #0]
 800b1fa:	6053      	str	r3, [r2, #4]
 800b1fc:	e7da      	b.n	800b1b4 <_free_r+0x24>
 800b1fe:	42a0      	cmp	r0, r4
 800b200:	d902      	bls.n	800b208 <_free_r+0x78>
 800b202:	230c      	movs	r3, #12
 800b204:	602b      	str	r3, [r5, #0]
 800b206:	e7d5      	b.n	800b1b4 <_free_r+0x24>
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	1821      	adds	r1, r4, r0
 800b20c:	428b      	cmp	r3, r1
 800b20e:	d103      	bne.n	800b218 <_free_r+0x88>
 800b210:	6819      	ldr	r1, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	1809      	adds	r1, r1, r0
 800b216:	6021      	str	r1, [r4, #0]
 800b218:	6063      	str	r3, [r4, #4]
 800b21a:	6054      	str	r4, [r2, #4]
 800b21c:	e7ca      	b.n	800b1b4 <_free_r+0x24>
 800b21e:	46c0      	nop			@ (mov r8, r8)
 800b220:	200002e8 	.word	0x200002e8

0800b224 <sbrk_aligned>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4e0f      	ldr	r6, [pc, #60]	@ (800b264 <sbrk_aligned+0x40>)
 800b228:	000d      	movs	r5, r1
 800b22a:	6831      	ldr	r1, [r6, #0]
 800b22c:	0004      	movs	r4, r0
 800b22e:	2900      	cmp	r1, #0
 800b230:	d102      	bne.n	800b238 <sbrk_aligned+0x14>
 800b232:	f000 f9eb 	bl	800b60c <_sbrk_r>
 800b236:	6030      	str	r0, [r6, #0]
 800b238:	0029      	movs	r1, r5
 800b23a:	0020      	movs	r0, r4
 800b23c:	f000 f9e6 	bl	800b60c <_sbrk_r>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d103      	bne.n	800b24c <sbrk_aligned+0x28>
 800b244:	2501      	movs	r5, #1
 800b246:	426d      	negs	r5, r5
 800b248:	0028      	movs	r0, r5
 800b24a:	bd70      	pop	{r4, r5, r6, pc}
 800b24c:	2303      	movs	r3, #3
 800b24e:	1cc5      	adds	r5, r0, #3
 800b250:	439d      	bics	r5, r3
 800b252:	42a8      	cmp	r0, r5
 800b254:	d0f8      	beq.n	800b248 <sbrk_aligned+0x24>
 800b256:	1a29      	subs	r1, r5, r0
 800b258:	0020      	movs	r0, r4
 800b25a:	f000 f9d7 	bl	800b60c <_sbrk_r>
 800b25e:	3001      	adds	r0, #1
 800b260:	d1f2      	bne.n	800b248 <sbrk_aligned+0x24>
 800b262:	e7ef      	b.n	800b244 <sbrk_aligned+0x20>
 800b264:	200002e4 	.word	0x200002e4

0800b268 <_malloc_r>:
 800b268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b26a:	2203      	movs	r2, #3
 800b26c:	1ccb      	adds	r3, r1, #3
 800b26e:	4393      	bics	r3, r2
 800b270:	3308      	adds	r3, #8
 800b272:	0005      	movs	r5, r0
 800b274:	001f      	movs	r7, r3
 800b276:	2b0c      	cmp	r3, #12
 800b278:	d234      	bcs.n	800b2e4 <_malloc_r+0x7c>
 800b27a:	270c      	movs	r7, #12
 800b27c:	42b9      	cmp	r1, r7
 800b27e:	d833      	bhi.n	800b2e8 <_malloc_r+0x80>
 800b280:	0028      	movs	r0, r5
 800b282:	f000 f871 	bl	800b368 <__malloc_lock>
 800b286:	4e37      	ldr	r6, [pc, #220]	@ (800b364 <_malloc_r+0xfc>)
 800b288:	6833      	ldr	r3, [r6, #0]
 800b28a:	001c      	movs	r4, r3
 800b28c:	2c00      	cmp	r4, #0
 800b28e:	d12f      	bne.n	800b2f0 <_malloc_r+0x88>
 800b290:	0039      	movs	r1, r7
 800b292:	0028      	movs	r0, r5
 800b294:	f7ff ffc6 	bl	800b224 <sbrk_aligned>
 800b298:	0004      	movs	r4, r0
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d15f      	bne.n	800b35e <_malloc_r+0xf6>
 800b29e:	6834      	ldr	r4, [r6, #0]
 800b2a0:	9400      	str	r4, [sp, #0]
 800b2a2:	9b00      	ldr	r3, [sp, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d14a      	bne.n	800b33e <_malloc_r+0xd6>
 800b2a8:	2c00      	cmp	r4, #0
 800b2aa:	d052      	beq.n	800b352 <_malloc_r+0xea>
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	0028      	movs	r0, r5
 800b2b0:	18e3      	adds	r3, r4, r3
 800b2b2:	9900      	ldr	r1, [sp, #0]
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	f000 f9a9 	bl	800b60c <_sbrk_r>
 800b2ba:	9b01      	ldr	r3, [sp, #4]
 800b2bc:	4283      	cmp	r3, r0
 800b2be:	d148      	bne.n	800b352 <_malloc_r+0xea>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	0028      	movs	r0, r5
 800b2c4:	1aff      	subs	r7, r7, r3
 800b2c6:	0039      	movs	r1, r7
 800b2c8:	f7ff ffac 	bl	800b224 <sbrk_aligned>
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d040      	beq.n	800b352 <_malloc_r+0xea>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	19db      	adds	r3, r3, r7
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	6833      	ldr	r3, [r6, #0]
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	d133      	bne.n	800b346 <_malloc_r+0xde>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	6033      	str	r3, [r6, #0]
 800b2e2:	e019      	b.n	800b318 <_malloc_r+0xb0>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	dac9      	bge.n	800b27c <_malloc_r+0x14>
 800b2e8:	230c      	movs	r3, #12
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2f0:	6821      	ldr	r1, [r4, #0]
 800b2f2:	1bc9      	subs	r1, r1, r7
 800b2f4:	d420      	bmi.n	800b338 <_malloc_r+0xd0>
 800b2f6:	290b      	cmp	r1, #11
 800b2f8:	d90a      	bls.n	800b310 <_malloc_r+0xa8>
 800b2fa:	19e2      	adds	r2, r4, r7
 800b2fc:	6027      	str	r7, [r4, #0]
 800b2fe:	42a3      	cmp	r3, r4
 800b300:	d104      	bne.n	800b30c <_malloc_r+0xa4>
 800b302:	6032      	str	r2, [r6, #0]
 800b304:	6863      	ldr	r3, [r4, #4]
 800b306:	6011      	str	r1, [r2, #0]
 800b308:	6053      	str	r3, [r2, #4]
 800b30a:	e005      	b.n	800b318 <_malloc_r+0xb0>
 800b30c:	605a      	str	r2, [r3, #4]
 800b30e:	e7f9      	b.n	800b304 <_malloc_r+0x9c>
 800b310:	6862      	ldr	r2, [r4, #4]
 800b312:	42a3      	cmp	r3, r4
 800b314:	d10e      	bne.n	800b334 <_malloc_r+0xcc>
 800b316:	6032      	str	r2, [r6, #0]
 800b318:	0028      	movs	r0, r5
 800b31a:	f000 f82d 	bl	800b378 <__malloc_unlock>
 800b31e:	0020      	movs	r0, r4
 800b320:	2207      	movs	r2, #7
 800b322:	300b      	adds	r0, #11
 800b324:	1d23      	adds	r3, r4, #4
 800b326:	4390      	bics	r0, r2
 800b328:	1ac2      	subs	r2, r0, r3
 800b32a:	4298      	cmp	r0, r3
 800b32c:	d0df      	beq.n	800b2ee <_malloc_r+0x86>
 800b32e:	1a1b      	subs	r3, r3, r0
 800b330:	50a3      	str	r3, [r4, r2]
 800b332:	e7dc      	b.n	800b2ee <_malloc_r+0x86>
 800b334:	605a      	str	r2, [r3, #4]
 800b336:	e7ef      	b.n	800b318 <_malloc_r+0xb0>
 800b338:	0023      	movs	r3, r4
 800b33a:	6864      	ldr	r4, [r4, #4]
 800b33c:	e7a6      	b.n	800b28c <_malloc_r+0x24>
 800b33e:	9c00      	ldr	r4, [sp, #0]
 800b340:	6863      	ldr	r3, [r4, #4]
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	e7ad      	b.n	800b2a2 <_malloc_r+0x3a>
 800b346:	001a      	movs	r2, r3
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	d1fb      	bne.n	800b346 <_malloc_r+0xde>
 800b34e:	2300      	movs	r3, #0
 800b350:	e7da      	b.n	800b308 <_malloc_r+0xa0>
 800b352:	230c      	movs	r3, #12
 800b354:	0028      	movs	r0, r5
 800b356:	602b      	str	r3, [r5, #0]
 800b358:	f000 f80e 	bl	800b378 <__malloc_unlock>
 800b35c:	e7c6      	b.n	800b2ec <_malloc_r+0x84>
 800b35e:	6007      	str	r7, [r0, #0]
 800b360:	e7da      	b.n	800b318 <_malloc_r+0xb0>
 800b362:	46c0      	nop			@ (mov r8, r8)
 800b364:	200002e8 	.word	0x200002e8

0800b368 <__malloc_lock>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	4802      	ldr	r0, [pc, #8]	@ (800b374 <__malloc_lock+0xc>)
 800b36c:	f7ff ff0d 	bl	800b18a <__retarget_lock_acquire_recursive>
 800b370:	bd10      	pop	{r4, pc}
 800b372:	46c0      	nop			@ (mov r8, r8)
 800b374:	200002e0 	.word	0x200002e0

0800b378 <__malloc_unlock>:
 800b378:	b510      	push	{r4, lr}
 800b37a:	4802      	ldr	r0, [pc, #8]	@ (800b384 <__malloc_unlock+0xc>)
 800b37c:	f7ff ff06 	bl	800b18c <__retarget_lock_release_recursive>
 800b380:	bd10      	pop	{r4, pc}
 800b382:	46c0      	nop			@ (mov r8, r8)
 800b384:	200002e0 	.word	0x200002e0

0800b388 <__sflush_r>:
 800b388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b38a:	220c      	movs	r2, #12
 800b38c:	5e8b      	ldrsh	r3, [r1, r2]
 800b38e:	0005      	movs	r5, r0
 800b390:	000c      	movs	r4, r1
 800b392:	071a      	lsls	r2, r3, #28
 800b394:	d456      	bmi.n	800b444 <__sflush_r+0xbc>
 800b396:	684a      	ldr	r2, [r1, #4]
 800b398:	2a00      	cmp	r2, #0
 800b39a:	dc02      	bgt.n	800b3a2 <__sflush_r+0x1a>
 800b39c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b39e:	2a00      	cmp	r2, #0
 800b3a0:	dd4e      	ble.n	800b440 <__sflush_r+0xb8>
 800b3a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b3a4:	2f00      	cmp	r7, #0
 800b3a6:	d04b      	beq.n	800b440 <__sflush_r+0xb8>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2080      	movs	r0, #128	@ 0x80
 800b3ac:	682e      	ldr	r6, [r5, #0]
 800b3ae:	602a      	str	r2, [r5, #0]
 800b3b0:	001a      	movs	r2, r3
 800b3b2:	0140      	lsls	r0, r0, #5
 800b3b4:	6a21      	ldr	r1, [r4, #32]
 800b3b6:	4002      	ands	r2, r0
 800b3b8:	4203      	tst	r3, r0
 800b3ba:	d033      	beq.n	800b424 <__sflush_r+0x9c>
 800b3bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3be:	89a3      	ldrh	r3, [r4, #12]
 800b3c0:	075b      	lsls	r3, r3, #29
 800b3c2:	d506      	bpl.n	800b3d2 <__sflush_r+0x4a>
 800b3c4:	6863      	ldr	r3, [r4, #4]
 800b3c6:	1ad2      	subs	r2, r2, r3
 800b3c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <__sflush_r+0x4a>
 800b3ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3d0:	1ad2      	subs	r2, r2, r3
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	0028      	movs	r0, r5
 800b3d6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b3d8:	6a21      	ldr	r1, [r4, #32]
 800b3da:	47b8      	blx	r7
 800b3dc:	89a2      	ldrh	r2, [r4, #12]
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	d106      	bne.n	800b3f0 <__sflush_r+0x68>
 800b3e2:	6829      	ldr	r1, [r5, #0]
 800b3e4:	291d      	cmp	r1, #29
 800b3e6:	d846      	bhi.n	800b476 <__sflush_r+0xee>
 800b3e8:	4b29      	ldr	r3, [pc, #164]	@ (800b490 <__sflush_r+0x108>)
 800b3ea:	410b      	asrs	r3, r1
 800b3ec:	07db      	lsls	r3, r3, #31
 800b3ee:	d442      	bmi.n	800b476 <__sflush_r+0xee>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	6063      	str	r3, [r4, #4]
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	04d2      	lsls	r2, r2, #19
 800b3fa:	d505      	bpl.n	800b408 <__sflush_r+0x80>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <__sflush_r+0x7e>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d100      	bne.n	800b408 <__sflush_r+0x80>
 800b406:	6560      	str	r0, [r4, #84]	@ 0x54
 800b408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b40a:	602e      	str	r6, [r5, #0]
 800b40c:	2900      	cmp	r1, #0
 800b40e:	d017      	beq.n	800b440 <__sflush_r+0xb8>
 800b410:	0023      	movs	r3, r4
 800b412:	3344      	adds	r3, #68	@ 0x44
 800b414:	4299      	cmp	r1, r3
 800b416:	d002      	beq.n	800b41e <__sflush_r+0x96>
 800b418:	0028      	movs	r0, r5
 800b41a:	f7ff feb9 	bl	800b190 <_free_r>
 800b41e:	2300      	movs	r3, #0
 800b420:	6363      	str	r3, [r4, #52]	@ 0x34
 800b422:	e00d      	b.n	800b440 <__sflush_r+0xb8>
 800b424:	2301      	movs	r3, #1
 800b426:	0028      	movs	r0, r5
 800b428:	47b8      	blx	r7
 800b42a:	0002      	movs	r2, r0
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d1c6      	bne.n	800b3be <__sflush_r+0x36>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0c3      	beq.n	800b3be <__sflush_r+0x36>
 800b436:	2b1d      	cmp	r3, #29
 800b438:	d001      	beq.n	800b43e <__sflush_r+0xb6>
 800b43a:	2b16      	cmp	r3, #22
 800b43c:	d11a      	bne.n	800b474 <__sflush_r+0xec>
 800b43e:	602e      	str	r6, [r5, #0]
 800b440:	2000      	movs	r0, #0
 800b442:	e01e      	b.n	800b482 <__sflush_r+0xfa>
 800b444:	690e      	ldr	r6, [r1, #16]
 800b446:	2e00      	cmp	r6, #0
 800b448:	d0fa      	beq.n	800b440 <__sflush_r+0xb8>
 800b44a:	680f      	ldr	r7, [r1, #0]
 800b44c:	600e      	str	r6, [r1, #0]
 800b44e:	1bba      	subs	r2, r7, r6
 800b450:	9201      	str	r2, [sp, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	079b      	lsls	r3, r3, #30
 800b456:	d100      	bne.n	800b45a <__sflush_r+0xd2>
 800b458:	694a      	ldr	r2, [r1, #20]
 800b45a:	60a2      	str	r2, [r4, #8]
 800b45c:	9b01      	ldr	r3, [sp, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	ddee      	ble.n	800b440 <__sflush_r+0xb8>
 800b462:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b464:	0032      	movs	r2, r6
 800b466:	001f      	movs	r7, r3
 800b468:	0028      	movs	r0, r5
 800b46a:	9b01      	ldr	r3, [sp, #4]
 800b46c:	6a21      	ldr	r1, [r4, #32]
 800b46e:	47b8      	blx	r7
 800b470:	2800      	cmp	r0, #0
 800b472:	dc07      	bgt.n	800b484 <__sflush_r+0xfc>
 800b474:	89a2      	ldrh	r2, [r4, #12]
 800b476:	2340      	movs	r3, #64	@ 0x40
 800b478:	2001      	movs	r0, #1
 800b47a:	4313      	orrs	r3, r2
 800b47c:	b21b      	sxth	r3, r3
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	4240      	negs	r0, r0
 800b482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b484:	9b01      	ldr	r3, [sp, #4]
 800b486:	1836      	adds	r6, r6, r0
 800b488:	1a1b      	subs	r3, r3, r0
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	e7e6      	b.n	800b45c <__sflush_r+0xd4>
 800b48e:	46c0      	nop			@ (mov r8, r8)
 800b490:	dfbffffe 	.word	0xdfbffffe

0800b494 <_fflush_r>:
 800b494:	690b      	ldr	r3, [r1, #16]
 800b496:	b570      	push	{r4, r5, r6, lr}
 800b498:	0005      	movs	r5, r0
 800b49a:	000c      	movs	r4, r1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d102      	bne.n	800b4a6 <_fflush_r+0x12>
 800b4a0:	2500      	movs	r5, #0
 800b4a2:	0028      	movs	r0, r5
 800b4a4:	bd70      	pop	{r4, r5, r6, pc}
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d004      	beq.n	800b4b4 <_fflush_r+0x20>
 800b4aa:	6a03      	ldr	r3, [r0, #32]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <_fflush_r+0x20>
 800b4b0:	f7ff fc6a 	bl	800ad88 <__sinit>
 800b4b4:	220c      	movs	r2, #12
 800b4b6:	5ea3      	ldrsh	r3, [r4, r2]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d0f1      	beq.n	800b4a0 <_fflush_r+0xc>
 800b4bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4be:	07d2      	lsls	r2, r2, #31
 800b4c0:	d404      	bmi.n	800b4cc <_fflush_r+0x38>
 800b4c2:	059b      	lsls	r3, r3, #22
 800b4c4:	d402      	bmi.n	800b4cc <_fflush_r+0x38>
 800b4c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4c8:	f7ff fe5f 	bl	800b18a <__retarget_lock_acquire_recursive>
 800b4cc:	0028      	movs	r0, r5
 800b4ce:	0021      	movs	r1, r4
 800b4d0:	f7ff ff5a 	bl	800b388 <__sflush_r>
 800b4d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4d6:	0005      	movs	r5, r0
 800b4d8:	07db      	lsls	r3, r3, #31
 800b4da:	d4e2      	bmi.n	800b4a2 <_fflush_r+0xe>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	059b      	lsls	r3, r3, #22
 800b4e0:	d4df      	bmi.n	800b4a2 <_fflush_r+0xe>
 800b4e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4e4:	f7ff fe52 	bl	800b18c <__retarget_lock_release_recursive>
 800b4e8:	e7db      	b.n	800b4a2 <_fflush_r+0xe>
	...

0800b4ec <__swhatbuf_r>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	000e      	movs	r6, r1
 800b4f0:	001d      	movs	r5, r3
 800b4f2:	230e      	movs	r3, #14
 800b4f4:	5ec9      	ldrsh	r1, [r1, r3]
 800b4f6:	0014      	movs	r4, r2
 800b4f8:	b096      	sub	sp, #88	@ 0x58
 800b4fa:	2900      	cmp	r1, #0
 800b4fc:	da0c      	bge.n	800b518 <__swhatbuf_r+0x2c>
 800b4fe:	89b2      	ldrh	r2, [r6, #12]
 800b500:	2380      	movs	r3, #128	@ 0x80
 800b502:	0011      	movs	r1, r2
 800b504:	4019      	ands	r1, r3
 800b506:	421a      	tst	r2, r3
 800b508:	d114      	bne.n	800b534 <__swhatbuf_r+0x48>
 800b50a:	2380      	movs	r3, #128	@ 0x80
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	2000      	movs	r0, #0
 800b510:	6029      	str	r1, [r5, #0]
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	b016      	add	sp, #88	@ 0x58
 800b516:	bd70      	pop	{r4, r5, r6, pc}
 800b518:	466a      	mov	r2, sp
 800b51a:	f000 f853 	bl	800b5c4 <_fstat_r>
 800b51e:	2800      	cmp	r0, #0
 800b520:	dbed      	blt.n	800b4fe <__swhatbuf_r+0x12>
 800b522:	23f0      	movs	r3, #240	@ 0xf0
 800b524:	9901      	ldr	r1, [sp, #4]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	4019      	ands	r1, r3
 800b52a:	4b04      	ldr	r3, [pc, #16]	@ (800b53c <__swhatbuf_r+0x50>)
 800b52c:	18c9      	adds	r1, r1, r3
 800b52e:	424b      	negs	r3, r1
 800b530:	4159      	adcs	r1, r3
 800b532:	e7ea      	b.n	800b50a <__swhatbuf_r+0x1e>
 800b534:	2100      	movs	r1, #0
 800b536:	2340      	movs	r3, #64	@ 0x40
 800b538:	e7e9      	b.n	800b50e <__swhatbuf_r+0x22>
 800b53a:	46c0      	nop			@ (mov r8, r8)
 800b53c:	ffffe000 	.word	0xffffe000

0800b540 <__smakebuf_r>:
 800b540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b542:	2602      	movs	r6, #2
 800b544:	898b      	ldrh	r3, [r1, #12]
 800b546:	0005      	movs	r5, r0
 800b548:	000c      	movs	r4, r1
 800b54a:	b085      	sub	sp, #20
 800b54c:	4233      	tst	r3, r6
 800b54e:	d007      	beq.n	800b560 <__smakebuf_r+0x20>
 800b550:	0023      	movs	r3, r4
 800b552:	3347      	adds	r3, #71	@ 0x47
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	2301      	movs	r3, #1
 800b55a:	6163      	str	r3, [r4, #20]
 800b55c:	b005      	add	sp, #20
 800b55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b560:	ab03      	add	r3, sp, #12
 800b562:	aa02      	add	r2, sp, #8
 800b564:	f7ff ffc2 	bl	800b4ec <__swhatbuf_r>
 800b568:	9f02      	ldr	r7, [sp, #8]
 800b56a:	9001      	str	r0, [sp, #4]
 800b56c:	0039      	movs	r1, r7
 800b56e:	0028      	movs	r0, r5
 800b570:	f7ff fe7a 	bl	800b268 <_malloc_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	d108      	bne.n	800b58a <__smakebuf_r+0x4a>
 800b578:	220c      	movs	r2, #12
 800b57a:	5ea3      	ldrsh	r3, [r4, r2]
 800b57c:	059a      	lsls	r2, r3, #22
 800b57e:	d4ed      	bmi.n	800b55c <__smakebuf_r+0x1c>
 800b580:	2203      	movs	r2, #3
 800b582:	4393      	bics	r3, r2
 800b584:	431e      	orrs	r6, r3
 800b586:	81a6      	strh	r6, [r4, #12]
 800b588:	e7e2      	b.n	800b550 <__smakebuf_r+0x10>
 800b58a:	2380      	movs	r3, #128	@ 0x80
 800b58c:	89a2      	ldrh	r2, [r4, #12]
 800b58e:	6020      	str	r0, [r4, #0]
 800b590:	4313      	orrs	r3, r2
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	6120      	str	r0, [r4, #16]
 800b598:	6167      	str	r7, [r4, #20]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00c      	beq.n	800b5b8 <__smakebuf_r+0x78>
 800b59e:	0028      	movs	r0, r5
 800b5a0:	230e      	movs	r3, #14
 800b5a2:	5ee1      	ldrsh	r1, [r4, r3]
 800b5a4:	f000 f820 	bl	800b5e8 <_isatty_r>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d005      	beq.n	800b5b8 <__smakebuf_r+0x78>
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	89a2      	ldrh	r2, [r4, #12]
 800b5b0:	439a      	bics	r2, r3
 800b5b2:	3b02      	subs	r3, #2
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	9a01      	ldr	r2, [sp, #4]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	e7cc      	b.n	800b55c <__smakebuf_r+0x1c>
	...

0800b5c4 <_fstat_r>:
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	b570      	push	{r4, r5, r6, lr}
 800b5c8:	4d06      	ldr	r5, [pc, #24]	@ (800b5e4 <_fstat_r+0x20>)
 800b5ca:	0004      	movs	r4, r0
 800b5cc:	0008      	movs	r0, r1
 800b5ce:	0011      	movs	r1, r2
 800b5d0:	602b      	str	r3, [r5, #0]
 800b5d2:	f7fd fa13 	bl	80089fc <_fstat>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	d103      	bne.n	800b5e2 <_fstat_r+0x1e>
 800b5da:	682b      	ldr	r3, [r5, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d000      	beq.n	800b5e2 <_fstat_r+0x1e>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd70      	pop	{r4, r5, r6, pc}
 800b5e4:	200002dc 	.word	0x200002dc

0800b5e8 <_isatty_r>:
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	b570      	push	{r4, r5, r6, lr}
 800b5ec:	4d06      	ldr	r5, [pc, #24]	@ (800b608 <_isatty_r+0x20>)
 800b5ee:	0004      	movs	r4, r0
 800b5f0:	0008      	movs	r0, r1
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	f7fd fa10 	bl	8008a18 <_isatty>
 800b5f8:	1c43      	adds	r3, r0, #1
 800b5fa:	d103      	bne.n	800b604 <_isatty_r+0x1c>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d000      	beq.n	800b604 <_isatty_r+0x1c>
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	bd70      	pop	{r4, r5, r6, pc}
 800b606:	46c0      	nop			@ (mov r8, r8)
 800b608:	200002dc 	.word	0x200002dc

0800b60c <_sbrk_r>:
 800b60c:	2300      	movs	r3, #0
 800b60e:	b570      	push	{r4, r5, r6, lr}
 800b610:	4d06      	ldr	r5, [pc, #24]	@ (800b62c <_sbrk_r+0x20>)
 800b612:	0004      	movs	r4, r0
 800b614:	0008      	movs	r0, r1
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	f7fd fa12 	bl	8008a40 <_sbrk>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d103      	bne.n	800b628 <_sbrk_r+0x1c>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d000      	beq.n	800b628 <_sbrk_r+0x1c>
 800b626:	6023      	str	r3, [r4, #0]
 800b628:	bd70      	pop	{r4, r5, r6, pc}
 800b62a:	46c0      	nop			@ (mov r8, r8)
 800b62c:	200002dc 	.word	0x200002dc

0800b630 <_init>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	46c0      	nop			@ (mov r8, r8)
 800b634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b636:	bc08      	pop	{r3}
 800b638:	469e      	mov	lr, r3
 800b63a:	4770      	bx	lr

0800b63c <_fini>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	46c0      	nop			@ (mov r8, r8)
 800b640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b642:	bc08      	pop	{r3}
 800b644:	469e      	mov	lr, r3
 800b646:	4770      	bx	lr
