
Boot_Loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufSectionRAM 00000080  20000000  20000000  00006000  2**2
                  ALLOC
  2 .mysection    00000000  08018000  08018000  000050e8  2**0
                  CONTENTS
  3 .text         000035dc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000bc  08003698  08003698  00004698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08003754  08003754  000050e8  2**0
                  CONTENTS
  6 .ARM          00000008  08003754  08003754  00004754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800375c  0800375c  000050e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800375c  0800375c  0000475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  08003760  08003760  00004760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000068  20000080  08003764  00005080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000204  200000e8  080037cc  000050e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200002ec  080037cc  000052ec  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  000050e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b304  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d6c  00000000  00000000  00010414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000910  00000000  00000000  00012180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006ec  00000000  00000000  00012a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000187ca  00000000  00000000  0001317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bdad  00000000  00000000  0002b946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00098450  00000000  00000000  000376f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000cfb43  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002578  00000000  00000000  000cfb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  000d2100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000e8 	.word	0x200000e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003680 	.word	0x08003680

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000ec 	.word	0x200000ec
 8000100:	08003680 	.word	0x08003680

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <go2APP>:
LOCATE_FUNC Blink(uint32_t dlyticks){
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	HAL_Delay(dlyticks);
}

void go2APP(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application;
	printf("Bootloader Start \r\n");
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <go2APP+0x5c>)
 8000624:	0018      	movs	r0, r3
 8000626:	f002 fc61 	bl	8002eec <puts>

	//check if there is something "installed" in the app FLASH region
	if(((*(uint32_t*)FLASH_APP_ADDR)& 0x2FFE0000) == 0x20000000){
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <go2APP+0x60>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <go2APP+0x64>)
 8000630:	401a      	ands	r2, r3
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	059b      	lsls	r3, r3, #22
 8000636:	429a      	cmp	r2, r3
 8000638:	d115      	bne.n	8000666 <go2APP+0x4a>
		printf("APP Start ... \r\n");
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <go2APP+0x68>)
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fc55 	bl	8002eec <puts>
		HAL_Delay(100);
 8000642:	2064      	movs	r0, #100	@ 0x64
 8000644:	f000 fb10 	bl	8000c68 <HAL_Delay>
		//jump to the application
		JumpAddress = *(uint32_t*)(FLASH_APP_ADDR + 4);
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <go2APP+0x6c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pFunction)JumpAddress;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	60bb      	str	r3, [r7, #8]
		//initialize applications stack pointer
		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <go2APP+0x60>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f383 8808 	msr	MSP, r3
}
 800065e:	46c0      	nop			@ (mov r8, r8)
		Jump_To_Application();
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4798      	blx	r3
	}else{
		//there is no application installed
		printf("No APP found \r\n");
	}
}
 8000664:	e003      	b.n	800066e <go2APP+0x52>
		printf("No APP found \r\n");
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <go2APP+0x70>)
 8000668:	0018      	movs	r0, r3
 800066a:	f002 fc3f 	bl	8002eec <puts>
}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b004      	add	sp, #16
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	08003698 	.word	0x08003698
 800067c:	08008000 	.word	0x08008000
 8000680:	2ffe0000 	.word	0x2ffe0000
 8000684:	080036ac 	.word	0x080036ac
 8000688:	08008004 	.word	0x08008004
 800068c:	080036bc 	.word	0x080036bc

08000690 <_write>:

int _write(int file, char *ptr, int len){
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e00a      	b.n	80006b8 <_write+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	1c4b      	adds	r3, r1, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4808      	ldr	r0, [pc, #32]	@ (80006cc <_write+0x3c>)
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	2201      	movs	r2, #1
 80006ae:	f001 fc53 	bl	8001f58 <HAL_UART_Transmit>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbf0      	blt.n	80006a2 <_write+0x12>
	}
	return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b006      	add	sp, #24
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	20000104 	.word	0x20000104

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fa42 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f807 	bl	80006ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f89c 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e0:	f000 f84c 	bl	800077c <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
#ifdef FIRST_VIDEO
	 (*Functions[0])(100);
#endif
	 go2APP();
 80006e4:	f7ff ff9a 	bl	800061c <go2APP>
 80006e8:	e7fc      	b.n	80006e4 <main+0x14>

080006ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ea:	b590      	push	{r4, r7, lr}
 80006ec:	b093      	sub	sp, #76	@ 0x4c
 80006ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f0:	2410      	movs	r4, #16
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2338      	movs	r3, #56	@ 0x38
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 fcec 	bl	80030d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	003b      	movs	r3, r7
 8000702:	0018      	movs	r0, r3
 8000704:	2310      	movs	r3, #16
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f002 fce5 	bl	80030d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070e:	2380      	movs	r3, #128	@ 0x80
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fd02 	bl	800111c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2202      	movs	r2, #2
 800071c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2280      	movs	r2, #128	@ 0x80
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2240      	movs	r2, #64	@ 0x40
 8000730:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fd3a 	bl	80011b4 <HAL_RCC_OscConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000744:	f000 f8b8 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	003b      	movs	r3, r7
 800074a:	2207      	movs	r2, #7
 800074c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800074e:	003b      	movs	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	003b      	movs	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	003b      	movs	r3, r7
 8000762:	2100      	movs	r1, #0
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f83f 	bl	80017e8 <HAL_RCC_ClockConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800076e:	f000 f8a3 	bl	80008b8 <Error_Handler>
  }
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b013      	add	sp, #76	@ 0x4c
 8000778:	bd90      	pop	{r4, r7, pc}
	...

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 8000782:	4a24      	ldr	r2, [pc, #144]	@ (8000814 <MX_USART2_UART_Init+0x98>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 8000788:	22e1      	movs	r2, #225	@ 0xe1
 800078a:	0252      	lsls	r2, r2, #9
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fb70 	bl	8001eac <HAL_UART_Init>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f872 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f002 f98d 	bl	8002af8 <HAL_UARTEx_SetTxFifoThreshold>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f000 f869 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007e8:	2100      	movs	r1, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 f9c4 	bl	8002b78 <HAL_UARTEx_SetRxFifoThreshold>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f860 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <MX_USART2_UART_Init+0x94>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 f942 	bl	8002a84 <HAL_UARTEx_DisableFifoMode>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 f858 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	20000104 	.word	0x20000104
 8000814:	40004400 	.word	0x40004400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b089      	sub	sp, #36	@ 0x24
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	240c      	movs	r4, #12
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	2314      	movs	r3, #20
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f002 fc55 	bl	80030d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 8000830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 8000834:	2104      	movs	r1, #4
 8000836:	430a      	orrs	r2, r1
 8000838:	635a      	str	r2, [r3, #52]	@ 0x34
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 800083c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800083e:	2204      	movs	r2, #4
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 8000848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 800084c:	2120      	movs	r1, #32
 800084e:	430a      	orrs	r2, r1
 8000850:	635a      	str	r2, [r3, #52]	@ 0x34
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 8000854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000856:	2220      	movs	r2, #32
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 8000860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_GPIO_Init+0x9c>)
 800086c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000876:	23a0      	movs	r3, #160	@ 0xa0
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fc2e 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000884:	0021      	movs	r1, r4
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2220      	movs	r2, #32
 800088a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2201      	movs	r2, #1
 8000890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800089e:	187a      	adds	r2, r7, r1
 80008a0:	23a0      	movs	r3, #160	@ 0xa0
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fab6 	bl	8000e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b009      	add	sp, #36	@ 0x24
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	40021000 	.word	0x40021000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_MspInit+0x44>)
 80008cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_MspInit+0x44>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	430a      	orrs	r2, r1
 80008d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_MspInit+0x44>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_MspInit+0x44>)
 80008e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_MspInit+0x44>)
 80008e8:	2180      	movs	r1, #128	@ 0x80
 80008ea:	0549      	lsls	r1, r1, #21
 80008ec:	430a      	orrs	r2, r1
 80008ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_MspInit+0x44>)
 80008f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f4:	2380      	movs	r3, #128	@ 0x80
 80008f6:	055b      	lsls	r3, r3, #21
 80008f8:	4013      	ands	r3, r2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b097      	sub	sp, #92	@ 0x5c
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	2344      	movs	r3, #68	@ 0x44
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 fbda 	bl	80030d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	2410      	movs	r4, #16
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	2334      	movs	r3, #52	@ 0x34
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fbd2 	bl	80030d8 <memset>
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <HAL_UART_MspInit+0xb8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d13e      	bne.n	80009bc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2202      	movs	r2, #2
 8000942:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094a:	193b      	adds	r3, r7, r4
 800094c:	0018      	movs	r0, r3
 800094e:	f001 f8f5 	bl	8001b3c <HAL_RCCEx_PeriphCLKConfig>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f7ff ffaf 	bl	80008b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 800095c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 800096a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	029b      	lsls	r3, r3, #10
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800098e:	2144      	movs	r1, #68	@ 0x44
 8000990:	187b      	adds	r3, r7, r1
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2202      	movs	r2, #2
 800099a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2201      	movs	r2, #1
 80009a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	187a      	adds	r2, r7, r1
 80009b0:	23a0      	movs	r3, #160	@ 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fa2e 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b017      	add	sp, #92	@ 0x5c
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f91c 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e00a      	b.n	8000a26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a10:	e000      	b.n	8000a14 <_read+0x16>
 8000a12:	bf00      	nop
 8000a14:	0001      	movs	r1, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	60ba      	str	r2, [r7, #8]
 8000a1c:	b2ca      	uxtb	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbf0      	blt.n	8000a10 <_read+0x12>
  }

  return len;
 8000a2e:	687b      	ldr	r3, [r7, #4]
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b006      	add	sp, #24
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	425b      	negs	r3, r3
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	0192      	lsls	r2, r2, #6
 8000a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <_isatty>:

int _isatty(int file)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b004      	add	sp, #16
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f002 fb60 	bl	8003184 <__errno>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	425b      	negs	r3, r3
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	18d2      	adds	r2, r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <_sbrk+0x64>)
 8000ae0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b006      	add	sp, #24
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20009000 	.word	0x20009000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	20000198 	.word	0x20000198
 8000af8:	200002f0 	.word	0x200002f0

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fff6 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	@ (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b36:	f002 fb2b 	bl	8003190 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b3a:	f7ff fdc9 	bl	80006d0 <main>

08000b3e <LoopForever>:

LoopForever:
  b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b44:	20000080 	.word	0x20000080
  ldr r1, =_edata
 8000b48:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000b4c:	08003764 	.word	0x08003764
  ldr r2, =_sbss
 8000b50:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000b54:	200002ec 	.word	0x200002ec

08000b58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_COMP_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_Init+0x3c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_Init+0x3c>)
 8000b6e:	2180      	movs	r1, #128	@ 0x80
 8000b70:	0049      	lsls	r1, r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f810 	bl	8000b9c <HAL_InitTick>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe9c 	bl	80008c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <HAL_InitTick+0x88>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d02b      	beq.n	8000c0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_InitTick+0x8c>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <HAL_InitTick+0x88>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	23fa      	movs	r3, #250	@ 0xfa
 8000bc0:	0098      	lsls	r0, r3, #2
 8000bc2:	f7ff fa9f 	bl	8000104 <__udivsi3>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f7ff fa9a 	bl	8000104 <__udivsi3>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f913 	bl	8000dfe <HAL_SYSTICK_Config>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d112      	bne.n	8000c02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d80a      	bhi.n	8000bf8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	425b      	negs	r3, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f8f2 	bl	8000dd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_InitTick+0x90>)
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e00d      	b.n	8000c14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e008      	b.n	8000c14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c02:	230f      	movs	r3, #15
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e003      	b.n	8000c14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	781b      	ldrb	r3, [r3, #0]
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b005      	add	sp, #20
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	20000088 	.word	0x20000088
 8000c28:	20000080 	.word	0x20000080
 8000c2c:	20000084 	.word	0x20000084

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	20000088 	.word	0x20000088
 8000c50:	2000019c 	.word	0x2000019c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b02      	ldr	r3, [pc, #8]	@ (8000c64 <HAL_GetTick+0x10>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	2000019c 	.word	0x2000019c

08000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff fff0 	bl	8000c54 <HAL_GetTick>
 8000c74:	0003      	movs	r3, r0
 8000c76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	d005      	beq.n	8000c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_Delay+0x44>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001a      	movs	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	189b      	adds	r3, r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	f7ff ffe0 	bl	8000c54 <HAL_GetTick>
 8000c94:	0002      	movs	r2, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d8f7      	bhi.n	8000c90 <HAL_Delay+0x28>
  {
  }
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	20000088 	.word	0x20000088

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cc4:	d828      	bhi.n	8000d18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000d84 <__NVIC_SetPriority+0xd4>)
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	33c0      	adds	r3, #192	@ 0xc0
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	589b      	ldr	r3, [r3, r2]
 8000cd6:	1dfa      	adds	r2, r7, #7
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	0011      	movs	r1, r2
 8000cdc:	2203      	movs	r2, #3
 8000cde:	400a      	ands	r2, r1
 8000ce0:	00d2      	lsls	r2, r2, #3
 8000ce2:	21ff      	movs	r1, #255	@ 0xff
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	43d2      	mvns	r2, r2
 8000cea:	401a      	ands	r2, r3
 8000cec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	019b      	lsls	r3, r3, #6
 8000cf2:	22ff      	movs	r2, #255	@ 0xff
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	4003      	ands	r3, r0
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d04:	481f      	ldr	r0, [pc, #124]	@ (8000d84 <__NVIC_SetPriority+0xd4>)
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	33c0      	adds	r3, #192	@ 0xc0
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d16:	e031      	b.n	8000d7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <__NVIC_SetPriority+0xd8>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0019      	movs	r1, r3
 8000d20:	230f      	movs	r3, #15
 8000d22:	400b      	ands	r3, r1
 8000d24:	3b08      	subs	r3, #8
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3306      	adds	r3, #6
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	3304      	adds	r3, #4
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	1dfa      	adds	r2, r7, #7
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	0011      	movs	r1, r2
 8000d38:	2203      	movs	r2, #3
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	21ff      	movs	r1, #255	@ 0xff
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	43d2      	mvns	r2, r2
 8000d46:	401a      	ands	r2, r3
 8000d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	019b      	lsls	r3, r3, #6
 8000d4e:	22ff      	movs	r2, #255	@ 0xff
 8000d50:	401a      	ands	r2, r3
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	0018      	movs	r0, r3
 8000d58:	2303      	movs	r3, #3
 8000d5a:	4003      	ands	r3, r0
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <__NVIC_SetPriority+0xd8>)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	001c      	movs	r4, r3
 8000d68:	230f      	movs	r3, #15
 8000d6a:	4023      	ands	r3, r4
 8000d6c:	3b08      	subs	r3, #8
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	430a      	orrs	r2, r1
 8000d72:	3306      	adds	r3, #6
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	18c3      	adds	r3, r0, r3
 8000d78:	3304      	adds	r3, #4
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b003      	add	sp, #12
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	1e5a      	subs	r2, r3, #1
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	045b      	lsls	r3, r3, #17
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d301      	bcc.n	8000da4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da0:	2301      	movs	r3, #1
 8000da2:	e010      	b.n	8000dc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <SysTick_Config+0x44>)
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	3a01      	subs	r2, #1
 8000daa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dac:	2301      	movs	r3, #1
 8000dae:	425b      	negs	r3, r3
 8000db0:	2103      	movs	r1, #3
 8000db2:	0018      	movs	r0, r3
 8000db4:	f7ff ff7c 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <SysTick_Config+0x44>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <SysTick_Config+0x44>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	210f      	movs	r1, #15
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	1c02      	adds	r2, r0, #0
 8000de4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff ffbf 	bl	8000d8c <SysTick_Config>
 8000e0e:	0003      	movs	r3, r0
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b002      	add	sp, #8
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e147      	b.n	80010b8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x28>
 8000e3e:	e138      	b.n	80010b2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2207      	movs	r2, #7
 8000f14:	4013      	ands	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	400b      	ands	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	401a      	ands	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	23c0      	movs	r3, #192	@ 0xc0
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d100      	bne.n	8000f8c <HAL_GPIO_Init+0x174>
 8000f8a:	e092      	b.n	80010b2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f8c:	4a50      	ldr	r2, [pc, #320]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3318      	adds	r3, #24
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	589b      	ldr	r3, [r3, r2]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	23a0      	movs	r3, #160	@ 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x1ca>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a45      	ldr	r2, [pc, #276]	@ (80010d4 <HAL_GPIO_Init+0x2bc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x1c6>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a44      	ldr	r2, [pc, #272]	@ (80010d8 <HAL_GPIO_Init+0x2c0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x1c2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a43      	ldr	r2, [pc, #268]	@ (80010dc <HAL_GPIO_Init+0x2c4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x1be>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	400a      	ands	r2, r1
 8000fea:	00d2      	lsls	r2, r2, #3
 8000fec:	4093      	lsls	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ff4:	4936      	ldr	r1, [pc, #216]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001002:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	035b      	lsls	r3, r3, #13
 800101a:	4013      	ands	r3, r2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001026:	4b2a      	ldr	r3, [pc, #168]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	039b      	lsls	r3, r3, #14
 8001044:	4013      	ands	r3, r2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001056:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001058:	2384      	movs	r3, #132	@ 0x84
 800105a:	58d3      	ldr	r3, [r2, r3]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800107c:	4914      	ldr	r1, [pc, #80]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 800107e:	2284      	movs	r2, #132	@ 0x84
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	58d3      	ldr	r3, [r2, r3]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	025b      	lsls	r3, r3, #9
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010aa:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	40da      	lsrs	r2, r3
 80010c0:	1e13      	subs	r3, r2, #0
 80010c2:	d000      	beq.n	80010c6 <HAL_GPIO_Init+0x2ae>
 80010c4:	e6b0      	b.n	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b006      	add	sp, #24
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021800 	.word	0x40021800
 80010d4:	50000400 	.word	0x50000400
 80010d8:	50000800 	.word	0x50000800
 80010dc:	50000c00 	.word	0x50000c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	0008      	movs	r0, r1
 80010ea:	0011      	movs	r1, r2
 80010ec:	1cbb      	adds	r3, r7, #2
 80010ee:	1c02      	adds	r2, r0, #0
 80010f0:	801a      	strh	r2, [r3, #0]
 80010f2:	1c7b      	adds	r3, r7, #1
 80010f4:	1c0a      	adds	r2, r1, #0
 80010f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f8:	1c7b      	adds	r3, r7, #1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001100:	1cbb      	adds	r3, r7, #2
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001108:	e003      	b.n	8001112 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	881a      	ldrh	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800112a:	4013      	ands	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	429a      	cmp	r2, r3
 800113e:	d11f      	bne.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	0013      	movs	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	189b      	adds	r3, r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4912      	ldr	r1, [pc, #72]	@ (8001198 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800114e:	0018      	movs	r0, r3
 8001150:	f7fe ffd8 	bl	8000104 <__udivsi3>
 8001154:	0003      	movs	r3, r0
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800115a:	e008      	b.n	800116e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3b01      	subs	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e001      	b.n	800116e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e009      	b.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	401a      	ands	r2, r3
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	429a      	cmp	r2, r3
 800117e:	d0ed      	beq.n	800115c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	40007000 	.word	0x40007000
 8001190:	fffff9ff 	.word	0xfffff9ff
 8001194:	20000080 	.word	0x20000080
 8001198:	000f4240 	.word	0x000f4240

0800119c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	23e0      	movs	r3, #224	@ 0xe0
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4013      	ands	r3, r2
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e2fe      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2201      	movs	r2, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x1e>
 80011d0:	e07c      	b.n	80012cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d2:	4bc3      	ldr	r3, [pc, #780]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2238      	movs	r2, #56	@ 0x38
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011dc:	4bc0      	ldr	r3, [pc, #768]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2203      	movs	r2, #3
 80011e2:	4013      	ands	r3, r2
 80011e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	d102      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3e>
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d002      	beq.n	80011f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d10b      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	4bb9      	ldr	r3, [pc, #740]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	029b      	lsls	r3, r3, #10
 8001200:	4013      	ands	r3, r2
 8001202:	d062      	beq.n	80012ca <HAL_RCC_OscConfig+0x116>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d15e      	bne.n	80012ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e2d9      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	025b      	lsls	r3, r3, #9
 8001218:	429a      	cmp	r2, r3
 800121a:	d107      	bne.n	800122c <HAL_RCC_OscConfig+0x78>
 800121c:	4bb0      	ldr	r3, [pc, #704]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4baf      	ldr	r3, [pc, #700]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	0249      	lsls	r1, r1, #9
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e020      	b.n	800126e <HAL_RCC_OscConfig+0xba>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	23a0      	movs	r3, #160	@ 0xa0
 8001232:	02db      	lsls	r3, r3, #11
 8001234:	429a      	cmp	r2, r3
 8001236:	d10e      	bne.n	8001256 <HAL_RCC_OscConfig+0xa2>
 8001238:	4ba9      	ldr	r3, [pc, #676]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4ba8      	ldr	r3, [pc, #672]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	02c9      	lsls	r1, r1, #11
 8001242:	430a      	orrs	r2, r1
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	4ba6      	ldr	r3, [pc, #664]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4ba5      	ldr	r3, [pc, #660]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	0249      	lsls	r1, r1, #9
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e00b      	b.n	800126e <HAL_RCC_OscConfig+0xba>
 8001256:	4ba2      	ldr	r3, [pc, #648]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4ba1      	ldr	r3, [pc, #644]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800125c:	49a1      	ldr	r1, [pc, #644]	@ (80014e4 <HAL_RCC_OscConfig+0x330>)
 800125e:	400a      	ands	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	4b9f      	ldr	r3, [pc, #636]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b9e      	ldr	r3, [pc, #632]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001268:	499f      	ldr	r1, [pc, #636]	@ (80014e8 <HAL_RCC_OscConfig+0x334>)
 800126a:	400a      	ands	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d014      	beq.n	80012a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fced 	bl	8000c54 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fce8 	bl	8000c54 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	@ 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e298      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001292:	4b93      	ldr	r3, [pc, #588]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	@ 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0xcc>
 800129e:	e015      	b.n	80012cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fcd8 	bl	8000c54 <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012aa:	f7ff fcd3 	bl	8000c54 <HAL_GetTick>
 80012ae:	0002      	movs	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b64      	cmp	r3, #100	@ 0x64
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e283      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012bc:	4b88      	ldr	r3, [pc, #544]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2380      	movs	r3, #128	@ 0x80
 80012c2:	029b      	lsls	r3, r3, #10
 80012c4:	4013      	ands	r3, r2
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0xf6>
 80012c8:	e000      	b.n	80012cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d100      	bne.n	80012d8 <HAL_RCC_OscConfig+0x124>
 80012d6:	e099      	b.n	800140c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d8:	4b81      	ldr	r3, [pc, #516]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2238      	movs	r2, #56	@ 0x38
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e2:	4b7f      	ldr	r3, [pc, #508]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2203      	movs	r2, #3
 80012e8:	4013      	ands	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d102      	bne.n	80012f8 <HAL_RCC_OscConfig+0x144>
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d002      	beq.n	80012fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d135      	bne.n	800136a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012fe:	4b78      	ldr	r3, [pc, #480]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	@ 0x80
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4013      	ands	r3, r2
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x162>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e256      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b72      	ldr	r3, [pc, #456]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a74      	ldr	r2, [pc, #464]	@ (80014ec <HAL_RCC_OscConfig+0x338>)
 800131c:	4013      	ands	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	021a      	lsls	r2, r3, #8
 8001326:	4b6e      	ldr	r3, [pc, #440]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d112      	bne.n	8001358 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001332:	4b6b      	ldr	r3, [pc, #428]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6e      	ldr	r2, [pc, #440]	@ (80014f0 <HAL_RCC_OscConfig+0x33c>)
 8001338:	4013      	ands	r3, r2
 800133a:	0019      	movs	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	4b67      	ldr	r3, [pc, #412]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001342:	430a      	orrs	r2, r1
 8001344:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001346:	4b66      	ldr	r3, [pc, #408]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0adb      	lsrs	r3, r3, #11
 800134c:	2207      	movs	r2, #7
 800134e:	4013      	ands	r3, r2
 8001350:	4a68      	ldr	r2, [pc, #416]	@ (80014f4 <HAL_RCC_OscConfig+0x340>)
 8001352:	40da      	lsrs	r2, r3
 8001354:	4b68      	ldr	r3, [pc, #416]	@ (80014f8 <HAL_RCC_OscConfig+0x344>)
 8001356:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001358:	4b68      	ldr	r3, [pc, #416]	@ (80014fc <HAL_RCC_OscConfig+0x348>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fc1d 	bl	8000b9c <HAL_InitTick>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d051      	beq.n	800140a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e22c      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d030      	beq.n	80013d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001372:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5e      	ldr	r2, [pc, #376]	@ (80014f0 <HAL_RCC_OscConfig+0x33c>)
 8001378:	4013      	ands	r3, r2
 800137a:	0019      	movs	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001386:	4b56      	ldr	r3, [pc, #344]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b55      	ldr	r3, [pc, #340]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800138c:	2180      	movs	r1, #128	@ 0x80
 800138e:	0049      	lsls	r1, r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc5e 	bl	8000c54 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fc59 	bl	8000c54 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e209      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b0:	4b4b      	ldr	r3, [pc, #300]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b48      	ldr	r3, [pc, #288]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a4a      	ldr	r2, [pc, #296]	@ (80014ec <HAL_RCC_OscConfig+0x338>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	021a      	lsls	r2, r3, #8
 80013cc:	4b44      	ldr	r3, [pc, #272]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	430a      	orrs	r2, r1
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	e01b      	b.n	800140c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80013d4:	4b42      	ldr	r3, [pc, #264]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80013da:	4949      	ldr	r1, [pc, #292]	@ (8001500 <HAL_RCC_OscConfig+0x34c>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc38 	bl	8000c54 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fc33 	bl	8000c54 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1e3      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4013      	ands	r3, r2
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x236>
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800140a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2208      	movs	r2, #8
 8001412:	4013      	ands	r3, r2
 8001414:	d047      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001416:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2238      	movs	r2, #56	@ 0x38
 800141c:	4013      	ands	r3, r2
 800141e:	2b18      	cmp	r3, #24
 8001420:	d10a      	bne.n	8001438 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001422:	4b2f      	ldr	r3, [pc, #188]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	2202      	movs	r2, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d03c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d138      	bne.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e1c5      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d019      	beq.n	8001474 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001442:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fc02 	bl	8000c54 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fbfd 	bl	8000c54 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1ad      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800146a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146c:	2202      	movs	r2, #2
 800146e:	4013      	ands	r3, r2
 8001470:	d0f1      	beq.n	8001456 <HAL_RCC_OscConfig+0x2a2>
 8001472:	e018      	b.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 8001476:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001478:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800147a:	2101      	movs	r1, #1
 800147c:	438a      	bics	r2, r1
 800147e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fbe8 	bl	8000c54 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff fbe3 	bl	8000c54 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e193      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800149c:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 800149e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a0:	2202      	movs	r2, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	d1f1      	bne.n	800148a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2204      	movs	r2, #4
 80014ac:	4013      	ands	r3, r2
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x2fe>
 80014b0:	e0c6      	b.n	8001640 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	231f      	movs	r3, #31
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2238      	movs	r2, #56	@ 0x38
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	d11e      	bne.n	8001504 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d100      	bne.n	80014d2 <HAL_RCC_OscConfig+0x31e>
 80014d0:	e0b6      	b.n	8001640 <HAL_RCC_OscConfig+0x48c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d000      	beq.n	80014dc <HAL_RCC_OscConfig+0x328>
 80014da:	e0b1      	b.n	8001640 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e171      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
 80014e0:	40021000 	.word	0x40021000
 80014e4:	fffeffff 	.word	0xfffeffff
 80014e8:	fffbffff 	.word	0xfffbffff
 80014ec:	ffff80ff 	.word	0xffff80ff
 80014f0:	ffffc7ff 	.word	0xffffc7ff
 80014f4:	00f42400 	.word	0x00f42400
 80014f8:	20000080 	.word	0x20000080
 80014fc:	20000084 	.word	0x20000084
 8001500:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001504:	4bb1      	ldr	r3, [pc, #708]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	055b      	lsls	r3, r3, #21
 800150c:	4013      	ands	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x360>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x362>
 8001514:	2300      	movs	r3, #0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d011      	beq.n	800153e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4bac      	ldr	r3, [pc, #688]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800151c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800151e:	4bab      	ldr	r3, [pc, #684]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001520:	2180      	movs	r1, #128	@ 0x80
 8001522:	0549      	lsls	r1, r1, #21
 8001524:	430a      	orrs	r2, r1
 8001526:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001528:	4ba8      	ldr	r3, [pc, #672]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800152a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	055b      	lsls	r3, r3, #21
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001536:	231f      	movs	r3, #31
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153e:	4ba4      	ldr	r3, [pc, #656]	@ (80017d0 <HAL_RCC_OscConfig+0x61c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4013      	ands	r3, r2
 8001548:	d11a      	bne.n	8001580 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800154a:	4ba1      	ldr	r3, [pc, #644]	@ (80017d0 <HAL_RCC_OscConfig+0x61c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4ba0      	ldr	r3, [pc, #640]	@ (80017d0 <HAL_RCC_OscConfig+0x61c>)
 8001550:	2180      	movs	r1, #128	@ 0x80
 8001552:	0049      	lsls	r1, r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001558:	f7ff fb7c 	bl	8000c54 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fb77 	bl	8000c54 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e127      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001574:	4b96      	ldr	r3, [pc, #600]	@ (80017d0 <HAL_RCC_OscConfig+0x61c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x3e2>
 8001588:	4b90      	ldr	r3, [pc, #576]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800158a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800158c:	4b8f      	ldr	r3, [pc, #572]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x41c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x404>
 800159e:	4b8b      	ldr	r3, [pc, #556]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015a2:	4b8a      	ldr	r3, [pc, #552]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015a4:	2104      	movs	r1, #4
 80015a6:	430a      	orrs	r2, r1
 80015a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015aa:	4b88      	ldr	r3, [pc, #544]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ae:	4b87      	ldr	r3, [pc, #540]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x41c>
 80015b8:	4b84      	ldr	r3, [pc, #528]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015bc:	4b83      	ldr	r3, [pc, #524]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015be:	2101      	movs	r1, #1
 80015c0:	438a      	bics	r2, r1
 80015c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015c4:	4b81      	ldr	r3, [pc, #516]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015c8:	4b80      	ldr	r3, [pc, #512]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015ca:	2104      	movs	r1, #4
 80015cc:	438a      	bics	r2, r1
 80015ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d014      	beq.n	8001602 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb3c 	bl	8000c54 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff fb37 	bl	8000c54 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4a79      	ldr	r2, [pc, #484]	@ (80017d4 <HAL_RCC_OscConfig+0x620>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0e6      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f6:	4b75      	ldr	r3, [pc, #468]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80015f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x42e>
 8001600:	e013      	b.n	800162a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001602:	f7ff fb27 	bl	8000c54 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800160a:	e009      	b.n	8001620 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fb22 	bl	8000c54 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	4a6f      	ldr	r2, [pc, #444]	@ (80017d4 <HAL_RCC_OscConfig+0x620>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0d1      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800162a:	231f      	movs	r3, #31
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b65      	ldr	r3, [pc, #404]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001638:	4b64      	ldr	r3, [pc, #400]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800163a:	4967      	ldr	r1, [pc, #412]	@ (80017d8 <HAL_RCC_OscConfig+0x624>)
 800163c:	400a      	ands	r2, r1
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x496>
 8001648:	e0bb      	b.n	80017c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164a:	4b60      	ldr	r3, [pc, #384]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2238      	movs	r2, #56	@ 0x38
 8001650:	4013      	ands	r3, r2
 8001652:	2b10      	cmp	r3, #16
 8001654:	d100      	bne.n	8001658 <HAL_RCC_OscConfig+0x4a4>
 8001656:	e07b      	b.n	8001750 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d156      	bne.n	800170e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	4b5a      	ldr	r3, [pc, #360]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b59      	ldr	r3, [pc, #356]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001666:	495d      	ldr	r1, [pc, #372]	@ (80017dc <HAL_RCC_OscConfig+0x628>)
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff faf2 	bl	8000c54 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff faed 	bl	8000c54 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e09d      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001688:	4b50      	ldr	r3, [pc, #320]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	@ 0x80
 800168e:	049b      	lsls	r3, r3, #18
 8001690:	4013      	ands	r3, r2
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	4b4d      	ldr	r3, [pc, #308]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4a51      	ldr	r2, [pc, #324]	@ (80017e0 <HAL_RCC_OscConfig+0x62c>)
 800169a:	4013      	ands	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c0:	431a      	orrs	r2, r3
 80016c2:	4b42      	ldr	r3, [pc, #264]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	0449      	lsls	r1, r1, #17
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	4b3c      	ldr	r3, [pc, #240]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 80016dc:	2180      	movs	r1, #128	@ 0x80
 80016de:	0549      	lsls	r1, r1, #21
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fab6 	bl	8000c54 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fab1 	bl	8000c54 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e061      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001700:	4b32      	ldr	r3, [pc, #200]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	049b      	lsls	r3, r3, #18
 8001708:	4013      	ands	r3, r2
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x53a>
 800170c:	e059      	b.n	80017c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b2f      	ldr	r3, [pc, #188]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001714:	4931      	ldr	r1, [pc, #196]	@ (80017dc <HAL_RCC_OscConfig+0x628>)
 8001716:	400a      	ands	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fa9b 	bl	8000c54 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fa96 	bl	8000c54 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e046      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	@ 0x80
 800173c:	049b      	lsls	r3, r3, #18
 800173e:	4013      	ands	r3, r2
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 8001748:	4926      	ldr	r1, [pc, #152]	@ (80017e4 <HAL_RCC_OscConfig+0x630>)
 800174a:	400a      	ands	r2, r1
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	e038      	b.n	80017c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e033      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_RCC_OscConfig+0x618>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2203      	movs	r2, #3
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	429a      	cmp	r2, r3
 800176e:	d126      	bne.n	80017be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2270      	movs	r2, #112	@ 0x70
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11f      	bne.n	80017be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	23fe      	movs	r3, #254	@ 0xfe
 8001782:	01db      	lsls	r3, r3, #7
 8001784:	401a      	ands	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d116      	bne.n	80017be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	23f8      	movs	r3, #248	@ 0xf8
 8001794:	039b      	lsls	r3, r3, #14
 8001796:	401a      	ands	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d10e      	bne.n	80017be <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	23e0      	movs	r3, #224	@ 0xe0
 80017a4:	051b      	lsls	r3, r3, #20
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	0f5b      	lsrs	r3, r3, #29
 80017b4:	075a      	lsls	r2, r3, #29
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b008      	add	sp, #32
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40007000 	.word	0x40007000
 80017d4:	00001388 	.word	0x00001388
 80017d8:	efffffff 	.word	0xefffffff
 80017dc:	feffffff 	.word	0xfeffffff
 80017e0:	11c1808c 	.word	0x11c1808c
 80017e4:	eefefffc 	.word	0xeefefffc

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0e9      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2207      	movs	r2, #7
 8001802:	4013      	ands	r3, r2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d91e      	bls.n	8001848 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2207      	movs	r2, #7
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa1a 	bl	8000c54 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001824:	e009      	b.n	800183a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001826:	f7ff fa15 	bl	8000c54 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4a6a      	ldr	r2, [pc, #424]	@ (80019dc <HAL_RCC_ClockConfig+0x1f4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0ca      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800183a:	4b67      	ldr	r3, [pc, #412]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d1ee      	bne.n	8001826 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d015      	beq.n	800187e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2204      	movs	r2, #4
 8001858:	4013      	ands	r3, r2
 800185a:	d006      	beq.n	800186a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800185c:	4b60      	ldr	r3, [pc, #384]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4b5f      	ldr	r3, [pc, #380]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001862:	21e0      	movs	r1, #224	@ 0xe0
 8001864:	01c9      	lsls	r1, r1, #7
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186a:	4b5d      	ldr	r3, [pc, #372]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	4a5d      	ldr	r2, [pc, #372]	@ (80019e4 <HAL_RCC_ClockConfig+0x1fc>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d057      	beq.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001890:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	029b      	lsls	r3, r3, #10
 8001898:	4013      	ands	r3, r2
 800189a:	d12b      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e097      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a8:	4b4d      	ldr	r3, [pc, #308]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	049b      	lsls	r3, r3, #18
 80018b0:	4013      	ands	r3, r2
 80018b2:	d11f      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e08b      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c0:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4013      	ands	r3, r2
 80018ca:	d113      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e07f      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d8:	4b41      	ldr	r3, [pc, #260]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d108      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e074      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	4b3e      	ldr	r3, [pc, #248]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e06d      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018f4:	4b3a      	ldr	r3, [pc, #232]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2207      	movs	r2, #7
 80018fa:	4393      	bics	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4b37      	ldr	r3, [pc, #220]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001908:	f7ff f9a4 	bl	8000c54 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001910:	e009      	b.n	8001926 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7ff f99f 	bl	8000c54 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a2f      	ldr	r2, [pc, #188]	@ (80019dc <HAL_RCC_ClockConfig+0x1f4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e054      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2238      	movs	r2, #56	@ 0x38
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	429a      	cmp	r2, r3
 8001936:	d1ec      	bne.n	8001912 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001938:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2207      	movs	r2, #7
 800193e:	4013      	ands	r3, r2
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d21e      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2207      	movs	r2, #7
 800194c:	4393      	bics	r3, r2
 800194e:	0019      	movs	r1, r3
 8001950:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001958:	f7ff f97c 	bl	8000c54 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001960:	e009      	b.n	8001976 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001962:	f7ff f977 	bl	8000c54 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a1b      	ldr	r2, [pc, #108]	@ (80019dc <HAL_RCC_ClockConfig+0x1f4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e02c      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2207      	movs	r2, #7
 800197c:	4013      	ands	r3, r2
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d1ee      	bne.n	8001962 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2204      	movs	r2, #4
 800198a:	4013      	ands	r3, r2
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4a15      	ldr	r2, [pc, #84]	@ (80019e8 <HAL_RCC_ClockConfig+0x200>)
 8001994:	4013      	ands	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019a2:	f000 f829 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019a6:	0001      	movs	r1, r0
 80019a8:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	220f      	movs	r2, #15
 80019b0:	401a      	ands	r2, r3
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_RCC_ClockConfig+0x204>)
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	58d3      	ldr	r3, [r2, r3]
 80019b8:	221f      	movs	r2, #31
 80019ba:	4013      	ands	r3, r2
 80019bc:	000a      	movs	r2, r1
 80019be:	40da      	lsrs	r2, r3
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_RCC_ClockConfig+0x208>)
 80019c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_RCC_ClockConfig+0x20c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff f8e7 	bl	8000b9c <HAL_InitTick>
 80019ce:	0003      	movs	r3, r0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b004      	add	sp, #16
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40022000 	.word	0x40022000
 80019dc:	00001388 	.word	0x00001388
 80019e0:	40021000 	.word	0x40021000
 80019e4:	fffff0ff 	.word	0xfffff0ff
 80019e8:	ffff8fff 	.word	0xffff8fff
 80019ec:	080036cc 	.word	0x080036cc
 80019f0:	20000080 	.word	0x20000080
 80019f4:	20000084 	.word	0x20000084

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019fe:	4b3c      	ldr	r3, [pc, #240]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2238      	movs	r2, #56	@ 0x38
 8001a04:	4013      	ands	r3, r2
 8001a06:	d10f      	bne.n	8001a28 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0adb      	lsrs	r3, r3, #11
 8001a0e:	2207      	movs	r2, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	2201      	movs	r2, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	0013      	movs	r3, r2
 8001a18:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a1a:	6839      	ldr	r1, [r7, #0]
 8001a1c:	4835      	ldr	r0, [pc, #212]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a1e:	f7fe fb71 	bl	8000104 <__udivsi3>
 8001a22:	0003      	movs	r3, r0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e05d      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a28:	4b31      	ldr	r3, [pc, #196]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2238      	movs	r2, #56	@ 0x38
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d102      	bne.n	8001a3a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a34:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e054      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2238      	movs	r2, #56	@ 0x38
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d138      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a46:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a50:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	2207      	movs	r2, #7
 8001a58:	4013      	ands	r3, r2
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d10d      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	4824      	ldr	r0, [pc, #144]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a68:	f7fe fb4c 	bl	8000104 <__udivsi3>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	227f      	movs	r2, #127	@ 0x7f
 8001a78:	4013      	ands	r3, r2
 8001a7a:	434b      	muls	r3, r1
 8001a7c:	617b      	str	r3, [r7, #20]
        break;
 8001a7e:	e00d      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	481c      	ldr	r0, [pc, #112]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a84:	f7fe fb3e 	bl	8000104 <__udivsi3>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	227f      	movs	r2, #127	@ 0x7f
 8001a94:	4013      	ands	r3, r2
 8001a96:	434b      	muls	r3, r1
 8001a98:	617b      	str	r3, [r7, #20]
        break;
 8001a9a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0f5b      	lsrs	r3, r3, #29
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	6978      	ldr	r0, [r7, #20]
 8001aae:	f7fe fb29 	bl	8000104 <__udivsi3>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e015      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2238      	movs	r2, #56	@ 0x38
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d103      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2238      	movs	r2, #56	@ 0x38
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b18      	cmp	r3, #24
 8001ad6:	d103      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ad8:	23fa      	movs	r3, #250	@ 0xfa
 8001ada:	01db      	lsls	r3, r3, #7
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	e001      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ae4:	693b      	ldr	r3, [r7, #16]
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b006      	add	sp, #24
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	40021000 	.word	0x40021000
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b02      	ldr	r3, [pc, #8]	@ (8001b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	20000080 	.word	0x20000080

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b14:	f7ff fff2 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b18:	0004      	movs	r4, r0
 8001b1a:	f7ff fb3f 	bl	800119c <LL_RCC_GetAPB1Prescaler>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	0b1a      	lsrs	r2, r3, #12
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	58d3      	ldr	r3, [r2, r3]
 8001b28:	221f      	movs	r2, #31
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	40dc      	lsrs	r4, r3
 8001b2e:	0023      	movs	r3, r4
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	0800370c 	.word	0x0800370c

08001b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b44:	2313      	movs	r3, #19
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b4c:	2312      	movs	r3, #18
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d100      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b60:	e0a3      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2011      	movs	r0, #17
 8001b64:	183b      	adds	r3, r7, r0
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4bc3      	ldr	r3, [pc, #780]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	055b      	lsls	r3, r3, #21
 8001b72:	4013      	ands	r3, r2
 8001b74:	d110      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4bc0      	ldr	r3, [pc, #768]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b7a:	4bbf      	ldr	r3, [pc, #764]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	0549      	lsls	r1, r1, #21
 8001b80:	430a      	orrs	r2, r1
 8001b82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b84:	4bbc      	ldr	r3, [pc, #752]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	055b      	lsls	r3, r3, #21
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b92:	183b      	adds	r3, r7, r0
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b98:	4bb8      	ldr	r3, [pc, #736]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4bb7      	ldr	r3, [pc, #732]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b9e:	2180      	movs	r1, #128	@ 0x80
 8001ba0:	0049      	lsls	r1, r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ba6:	f7ff f855 	bl	8000c54 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb0:	f7ff f850 	bl	8000c54 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d904      	bls.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001bbe:	2313      	movs	r3, #19
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	701a      	strb	r2, [r3, #0]
        break;
 8001bc6:	e005      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bc8:	4bac      	ldr	r3, [pc, #688]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0ed      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001bd4:	2313      	movs	r3, #19
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d154      	bne.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bde:	4ba6      	ldr	r3, [pc, #664]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001be2:	23c0      	movs	r3, #192	@ 0xc0
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d019      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d014      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bfa:	4b9f      	ldr	r3, [pc, #636]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	4aa0      	ldr	r2, [pc, #640]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c04:	4b9c      	ldr	r3, [pc, #624]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c08:	4b9b      	ldr	r3, [pc, #620]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c0a:	2180      	movs	r1, #128	@ 0x80
 8001c0c:	0249      	lsls	r1, r1, #9
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c12:	4b99      	ldr	r3, [pc, #612]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c16:	4b98      	ldr	r3, [pc, #608]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c18:	499a      	ldr	r1, [pc, #616]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c1e:	4b96      	ldr	r3, [pc, #600]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2201      	movs	r2, #1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d016      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f812 	bl	8000c54 <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c34:	e00c      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff f80d 	bl	8000c54 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a91      	ldr	r2, [pc, #580]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d904      	bls.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c46:	2313      	movs	r3, #19
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	701a      	strb	r2, [r3, #0]
            break;
 8001c4e:	e004      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c50:	4b89      	ldr	r3, [pc, #548]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0ed      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c5a:	2313      	movs	r3, #19
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c64:	4b84      	ldr	r3, [pc, #528]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	4a85      	ldr	r2, [pc, #532]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c72:	4b81      	ldr	r3, [pc, #516]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c78:	e00c      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c7a:	2312      	movs	r3, #18
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2213      	movs	r2, #19
 8001c80:	18ba      	adds	r2, r7, r2
 8001c82:	7812      	ldrb	r2, [r2, #0]
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e005      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c88:	2312      	movs	r3, #18
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2213      	movs	r2, #19
 8001c8e:	18ba      	adds	r2, r7, r2
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c94:	2311      	movs	r3, #17
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d105      	bne.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9e:	4b76      	ldr	r3, [pc, #472]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca2:	4b75      	ldr	r3, [pc, #468]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca4:	4979      	ldr	r1, [pc, #484]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cb4:	4b70      	ldr	r3, [pc, #448]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4393      	bics	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cd2:	4b69      	ldr	r3, [pc, #420]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	4393      	bics	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b65      	ldr	r3, [pc, #404]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2210      	movs	r2, #16
 8001cec:	4013      	ands	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cf0:	4b61      	ldr	r3, [pc, #388]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf4:	4a66      	ldr	r2, [pc, #408]	@ (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d10:	4b59      	ldr	r3, [pc, #356]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	4a5f      	ldr	r2, [pc, #380]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	4b56      	ldr	r3, [pc, #344]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d30:	4b51      	ldr	r3, [pc, #324]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d34:	4a58      	ldr	r2, [pc, #352]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d52:	4a52      	ldr	r2, [pc, #328]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	4b46      	ldr	r3, [pc, #280]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	01db      	lsls	r3, r3, #7
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d015      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d6e:	4b42      	ldr	r3, [pc, #264]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	0899      	lsrs	r1, r3, #2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1a      	ldr	r2, [r3, #32]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	05db      	lsls	r3, r3, #23
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b39      	ldr	r3, [pc, #228]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	0249      	lsls	r1, r1, #9
 8001d96:	430a      	orrs	r2, r1
 8001d98:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	031b      	lsls	r3, r3, #12
 8001da2:	4013      	ands	r3, r2
 8001da4:	d009      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001da6:	4b34      	ldr	r3, [pc, #208]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001daa:	2240      	movs	r2, #64	@ 0x40
 8001dac:	4393      	bics	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db4:	4b30      	ldr	r3, [pc, #192]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	039b      	lsls	r3, r3, #14
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dca:	4a35      	ldr	r2, [pc, #212]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dd4:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	03db      	lsls	r3, r3, #15
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d106      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001de6:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0449      	lsls	r1, r1, #17
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	03db      	lsls	r3, r3, #15
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d016      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e00:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	045b      	lsls	r3, r3, #17
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e26:	2180      	movs	r1, #128	@ 0x80
 8001e28:	0449      	lsls	r1, r1, #17
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	@ 0x80
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d016      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	2380      	movs	r3, #128	@ 0x80
 8001e54:	01db      	lsls	r3, r3, #7
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d106      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	0249      	lsls	r1, r1, #9
 8001e64:	430a      	orrs	r2, r1
 8001e66:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e68:	2312      	movs	r3, #18
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b006      	add	sp, #24
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	fffffcff 	.word	0xfffffcff
 8001e84:	fffeffff 	.word	0xfffeffff
 8001e88:	00001388 	.word	0x00001388
 8001e8c:	efffffff 	.word	0xefffffff
 8001e90:	fffff3ff 	.word	0xfffff3ff
 8001e94:	fff3ffff 	.word	0xfff3ffff
 8001e98:	ffcfffff 	.word	0xffcfffff
 8001e9c:	ffffcfff 	.word	0xffffcfff
 8001ea0:	ffbfffff 	.word	0xffbfffff
 8001ea4:	feffffff 	.word	0xfeffffff
 8001ea8:	ffff3fff 	.word	0xffff3fff

08001eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e046      	b.n	8001f4c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2288      	movs	r2, #136	@ 0x88
 8001ec2:	589b      	ldr	r3, [r3, r2]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2284      	movs	r2, #132	@ 0x84
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7fe fd1a 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2288      	movs	r2, #136	@ 0x88
 8001edc:	2124      	movs	r1, #36	@ 0x24
 8001ede:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 fb8e 	bl	800261c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 f8cc 	bl	80020a0 <UART_SetConfig>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e01c      	b.n	8001f4c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <HAL_UART_Init+0xa8>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	212a      	movs	r1, #42	@ 0x2a
 8001f2e:	438a      	bics	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fc1d 	bl	8002784 <UART_CheckIdleState>
 8001f4a:	0003      	movs	r3, r0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	ffffb7ff 	.word	0xffffb7ff

08001f58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	1dbb      	adds	r3, r7, #6
 8001f66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2288      	movs	r2, #136	@ 0x88
 8001f6c:	589b      	ldr	r3, [r3, r2]
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d000      	beq.n	8001f74 <HAL_UART_Transmit+0x1c>
 8001f72:	e090      	b.n	8002096 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_UART_Transmit+0x2a>
 8001f7a:	1dbb      	adds	r3, r7, #6
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e088      	b.n	8002098 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	015b      	lsls	r3, r3, #5
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d109      	bne.n	8001fa6 <HAL_UART_Transmit+0x4e>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d001      	beq.n	8001fa6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e078      	b.n	8002098 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2290      	movs	r2, #144	@ 0x90
 8001faa:	2100      	movs	r1, #0
 8001fac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2288      	movs	r2, #136	@ 0x88
 8001fb2:	2121      	movs	r1, #33	@ 0x21
 8001fb4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe fe4d 	bl	8000c54 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1dba      	adds	r2, r7, #6
 8001fc2:	2154      	movs	r1, #84	@ 0x54
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1dba      	adds	r2, r7, #6
 8001fcc:	2156      	movs	r1, #86	@ 0x56
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	015b      	lsls	r3, r3, #5
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d108      	bne.n	8001ff0 <HAL_UART_Transmit+0x98>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	e003      	b.n	8001ff8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ff8:	e030      	b.n	800205c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	0013      	movs	r3, r2
 8002004:	2200      	movs	r2, #0
 8002006:	2180      	movs	r1, #128	@ 0x80
 8002008:	f000 fc66 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d005      	beq.n	800201c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2288      	movs	r2, #136	@ 0x88
 8002014:	2120      	movs	r1, #32
 8002016:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e03d      	b.n	8002098 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	001a      	movs	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	05d2      	lsls	r2, r2, #23
 800202e:	0dd2      	lsrs	r2, r2, #23
 8002030:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	3302      	adds	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	e007      	b.n	800204a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3301      	adds	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2256      	movs	r2, #86	@ 0x56
 800204e:	5a9b      	ldrh	r3, [r3, r2]
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b299      	uxth	r1, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2256      	movs	r2, #86	@ 0x56
 800205a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2256      	movs	r2, #86	@ 0x56
 8002060:	5a9b      	ldrh	r3, [r3, r2]
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1c8      	bne.n	8001ffa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	0013      	movs	r3, r2
 8002072:	2200      	movs	r2, #0
 8002074:	2140      	movs	r1, #64	@ 0x40
 8002076:	f000 fc2f 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d005      	beq.n	800208a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2288      	movs	r2, #136	@ 0x88
 8002082:	2120      	movs	r1, #32
 8002084:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e006      	b.n	8002098 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2288      	movs	r2, #136	@ 0x88
 800208e:	2120      	movs	r1, #32
 8002090:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
  }
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b008      	add	sp, #32
 800209e:	bd80      	pop	{r7, pc}

080020a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b090      	sub	sp, #64	@ 0x40
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020a8:	231a      	movs	r3, #26
 80020aa:	2220      	movs	r2, #32
 80020ac:	189b      	adds	r3, r3, r2
 80020ae:	19db      	adds	r3, r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	431a      	orrs	r2, r3
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4aaf      	ldr	r2, [pc, #700]	@ (8002390 <UART_SetConfig+0x2f0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020de:	430b      	orrs	r3, r1
 80020e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4aaa      	ldr	r2, [pc, #680]	@ (8002394 <UART_SetConfig+0x2f4>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0018      	movs	r0, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	68d9      	ldr	r1, [r3, #12]
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	0003      	movs	r3, r0
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4aa4      	ldr	r2, [pc, #656]	@ (8002398 <UART_SetConfig+0x2f8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002112:	4313      	orrs	r3, r2
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a9f      	ldr	r2, [pc, #636]	@ (800239c <UART_SetConfig+0x2fc>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002132:	220f      	movs	r2, #15
 8002134:	4393      	bics	r3, r2
 8002136:	0018      	movs	r0, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	0003      	movs	r3, r0
 8002142:	430b      	orrs	r3, r1
 8002144:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a95      	ldr	r2, [pc, #596]	@ (80023a0 <UART_SetConfig+0x300>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d131      	bne.n	80021b4 <UART_SetConfig+0x114>
 8002150:	4b94      	ldr	r3, [pc, #592]	@ (80023a4 <UART_SetConfig+0x304>)
 8002152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002154:	2203      	movs	r2, #3
 8002156:	4013      	ands	r3, r2
 8002158:	2b03      	cmp	r3, #3
 800215a:	d01d      	beq.n	8002198 <UART_SetConfig+0xf8>
 800215c:	d823      	bhi.n	80021a6 <UART_SetConfig+0x106>
 800215e:	2b02      	cmp	r3, #2
 8002160:	d00c      	beq.n	800217c <UART_SetConfig+0xdc>
 8002162:	d820      	bhi.n	80021a6 <UART_SetConfig+0x106>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <UART_SetConfig+0xce>
 8002168:	2b01      	cmp	r3, #1
 800216a:	d00e      	beq.n	800218a <UART_SetConfig+0xea>
 800216c:	e01b      	b.n	80021a6 <UART_SetConfig+0x106>
 800216e:	231b      	movs	r3, #27
 8002170:	2220      	movs	r2, #32
 8002172:	189b      	adds	r3, r3, r2
 8002174:	19db      	adds	r3, r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e0b4      	b.n	80022e6 <UART_SetConfig+0x246>
 800217c:	231b      	movs	r3, #27
 800217e:	2220      	movs	r2, #32
 8002180:	189b      	adds	r3, r3, r2
 8002182:	19db      	adds	r3, r3, r7
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e0ad      	b.n	80022e6 <UART_SetConfig+0x246>
 800218a:	231b      	movs	r3, #27
 800218c:	2220      	movs	r2, #32
 800218e:	189b      	adds	r3, r3, r2
 8002190:	19db      	adds	r3, r3, r7
 8002192:	2204      	movs	r2, #4
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e0a6      	b.n	80022e6 <UART_SetConfig+0x246>
 8002198:	231b      	movs	r3, #27
 800219a:	2220      	movs	r2, #32
 800219c:	189b      	adds	r3, r3, r2
 800219e:	19db      	adds	r3, r3, r7
 80021a0:	2208      	movs	r2, #8
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e09f      	b.n	80022e6 <UART_SetConfig+0x246>
 80021a6:	231b      	movs	r3, #27
 80021a8:	2220      	movs	r2, #32
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	19db      	adds	r3, r3, r7
 80021ae:	2210      	movs	r2, #16
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e098      	b.n	80022e6 <UART_SetConfig+0x246>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a7b      	ldr	r2, [pc, #492]	@ (80023a8 <UART_SetConfig+0x308>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d131      	bne.n	8002222 <UART_SetConfig+0x182>
 80021be:	4b79      	ldr	r3, [pc, #484]	@ (80023a4 <UART_SetConfig+0x304>)
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	220c      	movs	r2, #12
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d01d      	beq.n	8002206 <UART_SetConfig+0x166>
 80021ca:	d823      	bhi.n	8002214 <UART_SetConfig+0x174>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d00c      	beq.n	80021ea <UART_SetConfig+0x14a>
 80021d0:	d820      	bhi.n	8002214 <UART_SetConfig+0x174>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <UART_SetConfig+0x13c>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d00e      	beq.n	80021f8 <UART_SetConfig+0x158>
 80021da:	e01b      	b.n	8002214 <UART_SetConfig+0x174>
 80021dc:	231b      	movs	r3, #27
 80021de:	2220      	movs	r2, #32
 80021e0:	189b      	adds	r3, r3, r2
 80021e2:	19db      	adds	r3, r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e07d      	b.n	80022e6 <UART_SetConfig+0x246>
 80021ea:	231b      	movs	r3, #27
 80021ec:	2220      	movs	r2, #32
 80021ee:	189b      	adds	r3, r3, r2
 80021f0:	19db      	adds	r3, r3, r7
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e076      	b.n	80022e6 <UART_SetConfig+0x246>
 80021f8:	231b      	movs	r3, #27
 80021fa:	2220      	movs	r2, #32
 80021fc:	189b      	adds	r3, r3, r2
 80021fe:	19db      	adds	r3, r3, r7
 8002200:	2204      	movs	r2, #4
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e06f      	b.n	80022e6 <UART_SetConfig+0x246>
 8002206:	231b      	movs	r3, #27
 8002208:	2220      	movs	r2, #32
 800220a:	189b      	adds	r3, r3, r2
 800220c:	19db      	adds	r3, r3, r7
 800220e:	2208      	movs	r2, #8
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e068      	b.n	80022e6 <UART_SetConfig+0x246>
 8002214:	231b      	movs	r3, #27
 8002216:	2220      	movs	r2, #32
 8002218:	189b      	adds	r3, r3, r2
 800221a:	19db      	adds	r3, r3, r7
 800221c:	2210      	movs	r2, #16
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e061      	b.n	80022e6 <UART_SetConfig+0x246>
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a61      	ldr	r2, [pc, #388]	@ (80023ac <UART_SetConfig+0x30c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d106      	bne.n	800223a <UART_SetConfig+0x19a>
 800222c:	231b      	movs	r3, #27
 800222e:	2220      	movs	r2, #32
 8002230:	189b      	adds	r3, r3, r2
 8002232:	19db      	adds	r3, r3, r7
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e055      	b.n	80022e6 <UART_SetConfig+0x246>
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5c      	ldr	r2, [pc, #368]	@ (80023b0 <UART_SetConfig+0x310>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d106      	bne.n	8002252 <UART_SetConfig+0x1b2>
 8002244:	231b      	movs	r3, #27
 8002246:	2220      	movs	r2, #32
 8002248:	189b      	adds	r3, r3, r2
 800224a:	19db      	adds	r3, r3, r7
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e049      	b.n	80022e6 <UART_SetConfig+0x246>
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a50      	ldr	r2, [pc, #320]	@ (8002398 <UART_SetConfig+0x2f8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d13e      	bne.n	80022da <UART_SetConfig+0x23a>
 800225c:	4b51      	ldr	r3, [pc, #324]	@ (80023a4 <UART_SetConfig+0x304>)
 800225e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002260:	23c0      	movs	r3, #192	@ 0xc0
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4013      	ands	r3, r2
 8002266:	22c0      	movs	r2, #192	@ 0xc0
 8002268:	0112      	lsls	r2, r2, #4
 800226a:	4293      	cmp	r3, r2
 800226c:	d027      	beq.n	80022be <UART_SetConfig+0x21e>
 800226e:	22c0      	movs	r2, #192	@ 0xc0
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	4293      	cmp	r3, r2
 8002274:	d82a      	bhi.n	80022cc <UART_SetConfig+0x22c>
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	4293      	cmp	r3, r2
 800227c:	d011      	beq.n	80022a2 <UART_SetConfig+0x202>
 800227e:	2280      	movs	r2, #128	@ 0x80
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	4293      	cmp	r3, r2
 8002284:	d822      	bhi.n	80022cc <UART_SetConfig+0x22c>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <UART_SetConfig+0x1f4>
 800228a:	2280      	movs	r2, #128	@ 0x80
 800228c:	00d2      	lsls	r2, r2, #3
 800228e:	4293      	cmp	r3, r2
 8002290:	d00e      	beq.n	80022b0 <UART_SetConfig+0x210>
 8002292:	e01b      	b.n	80022cc <UART_SetConfig+0x22c>
 8002294:	231b      	movs	r3, #27
 8002296:	2220      	movs	r2, #32
 8002298:	189b      	adds	r3, r3, r2
 800229a:	19db      	adds	r3, r3, r7
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e021      	b.n	80022e6 <UART_SetConfig+0x246>
 80022a2:	231b      	movs	r3, #27
 80022a4:	2220      	movs	r2, #32
 80022a6:	189b      	adds	r3, r3, r2
 80022a8:	19db      	adds	r3, r3, r7
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e01a      	b.n	80022e6 <UART_SetConfig+0x246>
 80022b0:	231b      	movs	r3, #27
 80022b2:	2220      	movs	r2, #32
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	19db      	adds	r3, r3, r7
 80022b8:	2204      	movs	r2, #4
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e013      	b.n	80022e6 <UART_SetConfig+0x246>
 80022be:	231b      	movs	r3, #27
 80022c0:	2220      	movs	r2, #32
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	19db      	adds	r3, r3, r7
 80022c6:	2208      	movs	r2, #8
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e00c      	b.n	80022e6 <UART_SetConfig+0x246>
 80022cc:	231b      	movs	r3, #27
 80022ce:	2220      	movs	r2, #32
 80022d0:	189b      	adds	r3, r3, r2
 80022d2:	19db      	adds	r3, r3, r7
 80022d4:	2210      	movs	r2, #16
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e005      	b.n	80022e6 <UART_SetConfig+0x246>
 80022da:	231b      	movs	r3, #27
 80022dc:	2220      	movs	r2, #32
 80022de:	189b      	adds	r3, r3, r2
 80022e0:	19db      	adds	r3, r3, r7
 80022e2:	2210      	movs	r2, #16
 80022e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002398 <UART_SetConfig+0x2f8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d000      	beq.n	80022f2 <UART_SetConfig+0x252>
 80022f0:	e0a9      	b.n	8002446 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80022f2:	231b      	movs	r3, #27
 80022f4:	2220      	movs	r2, #32
 80022f6:	189b      	adds	r3, r3, r2
 80022f8:	19db      	adds	r3, r3, r7
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d015      	beq.n	800232c <UART_SetConfig+0x28c>
 8002300:	dc18      	bgt.n	8002334 <UART_SetConfig+0x294>
 8002302:	2b04      	cmp	r3, #4
 8002304:	d00d      	beq.n	8002322 <UART_SetConfig+0x282>
 8002306:	dc15      	bgt.n	8002334 <UART_SetConfig+0x294>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <UART_SetConfig+0x272>
 800230c:	2b02      	cmp	r3, #2
 800230e:	d005      	beq.n	800231c <UART_SetConfig+0x27c>
 8002310:	e010      	b.n	8002334 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002312:	f7ff fbfd 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002316:	0003      	movs	r3, r0
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800231a:	e014      	b.n	8002346 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800231c:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <UART_SetConfig+0x314>)
 800231e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002320:	e011      	b.n	8002346 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002322:	f7ff fb69 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8002326:	0003      	movs	r3, r0
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800232a:	e00c      	b.n	8002346 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002332:	e008      	b.n	8002346 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002338:	231a      	movs	r3, #26
 800233a:	2220      	movs	r2, #32
 800233c:	189b      	adds	r3, r3, r2
 800233e:	19db      	adds	r3, r3, r7
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
        break;
 8002344:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002348:	2b00      	cmp	r3, #0
 800234a:	d100      	bne.n	800234e <UART_SetConfig+0x2ae>
 800234c:	e14b      	b.n	80025e6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002352:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <UART_SetConfig+0x318>)
 8002354:	0052      	lsls	r2, r2, #1
 8002356:	5ad3      	ldrh	r3, [r2, r3]
 8002358:	0019      	movs	r1, r3
 800235a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800235c:	f7fd fed2 	bl	8000104 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	0013      	movs	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	189b      	adds	r3, r3, r2
 800236e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002370:	429a      	cmp	r2, r3
 8002372:	d305      	bcc.n	8002380 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800237a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800237c:	429a      	cmp	r2, r3
 800237e:	d91d      	bls.n	80023bc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002380:	231a      	movs	r3, #26
 8002382:	2220      	movs	r2, #32
 8002384:	189b      	adds	r3, r3, r2
 8002386:	19db      	adds	r3, r3, r7
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e12b      	b.n	80025e6 <UART_SetConfig+0x546>
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	cfff69f3 	.word	0xcfff69f3
 8002394:	ffffcfff 	.word	0xffffcfff
 8002398:	40008000 	.word	0x40008000
 800239c:	11fff4ff 	.word	0x11fff4ff
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40004400 	.word	0x40004400
 80023ac:	40004800 	.word	0x40004800
 80023b0:	40004c00 	.word	0x40004c00
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	0800372c 	.word	0x0800372c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c8:	4b92      	ldr	r3, [pc, #584]	@ (8002614 <UART_SetConfig+0x574>)
 80023ca:	0052      	lsls	r2, r2, #1
 80023cc:	5ad3      	ldrh	r3, [r2, r3]
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	69b8      	ldr	r0, [r7, #24]
 80023da:	69f9      	ldr	r1, [r7, #28]
 80023dc:	f7fe f808 	bl	80003f0 <__aeabi_uldivmod>
 80023e0:	0002      	movs	r2, r0
 80023e2:	000b      	movs	r3, r1
 80023e4:	0e11      	lsrs	r1, r2, #24
 80023e6:	021d      	lsls	r5, r3, #8
 80023e8:	430d      	orrs	r5, r1
 80023ea:	0214      	lsls	r4, r2, #8
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	085b      	lsrs	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	1900      	adds	r0, r0, r4
 80023fe:	4169      	adcs	r1, r5
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f7fd ffef 	bl	80003f0 <__aeabi_uldivmod>
 8002412:	0002      	movs	r2, r0
 8002414:	000b      	movs	r3, r1
 8002416:	0013      	movs	r3, r2
 8002418:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800241a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800241c:	23c0      	movs	r3, #192	@ 0xc0
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d309      	bcc.n	8002438 <UART_SetConfig+0x398>
 8002424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	035b      	lsls	r3, r3, #13
 800242a:	429a      	cmp	r2, r3
 800242c:	d204      	bcs.n	8002438 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	e0d6      	b.n	80025e6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002438:	231a      	movs	r3, #26
 800243a:	2220      	movs	r2, #32
 800243c:	189b      	adds	r3, r3, r2
 800243e:	19db      	adds	r3, r3, r7
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e0cf      	b.n	80025e6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	429a      	cmp	r2, r3
 8002450:	d000      	beq.n	8002454 <UART_SetConfig+0x3b4>
 8002452:	e070      	b.n	8002536 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002454:	231b      	movs	r3, #27
 8002456:	2220      	movs	r2, #32
 8002458:	189b      	adds	r3, r3, r2
 800245a:	19db      	adds	r3, r3, r7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d015      	beq.n	800248e <UART_SetConfig+0x3ee>
 8002462:	dc18      	bgt.n	8002496 <UART_SetConfig+0x3f6>
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00d      	beq.n	8002484 <UART_SetConfig+0x3e4>
 8002468:	dc15      	bgt.n	8002496 <UART_SetConfig+0x3f6>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <UART_SetConfig+0x3d4>
 800246e:	2b02      	cmp	r3, #2
 8002470:	d005      	beq.n	800247e <UART_SetConfig+0x3de>
 8002472:	e010      	b.n	8002496 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002474:	f7ff fb4c 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002478:	0003      	movs	r3, r0
 800247a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800247c:	e014      	b.n	80024a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800247e:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <UART_SetConfig+0x578>)
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002482:	e011      	b.n	80024a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002484:	f7ff fab8 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8002488:	0003      	movs	r3, r0
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800248c:	e00c      	b.n	80024a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002494:	e008      	b.n	80024a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800249a:	231a      	movs	r3, #26
 800249c:	2220      	movs	r2, #32
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	19db      	adds	r3, r3, r7
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
        break;
 80024a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d100      	bne.n	80024b0 <UART_SetConfig+0x410>
 80024ae:	e09a      	b.n	80025e6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024b4:	4b57      	ldr	r3, [pc, #348]	@ (8002614 <UART_SetConfig+0x574>)
 80024b6:	0052      	lsls	r2, r2, #1
 80024b8:	5ad3      	ldrh	r3, [r2, r3]
 80024ba:	0019      	movs	r1, r3
 80024bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80024be:	f7fd fe21 	bl	8000104 <__udivsi3>
 80024c2:	0003      	movs	r3, r0
 80024c4:	005a      	lsls	r2, r3, #1
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	18d2      	adds	r2, r2, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	0019      	movs	r1, r3
 80024d4:	0010      	movs	r0, r2
 80024d6:	f7fd fe15 	bl	8000104 <__udivsi3>
 80024da:	0003      	movs	r3, r0
 80024dc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d921      	bls.n	8002528 <UART_SetConfig+0x488>
 80024e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	025b      	lsls	r3, r3, #9
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d21c      	bcs.n	8002528 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	200e      	movs	r0, #14
 80024f4:	2420      	movs	r4, #32
 80024f6:	1903      	adds	r3, r0, r4
 80024f8:	19db      	adds	r3, r3, r7
 80024fa:	210f      	movs	r1, #15
 80024fc:	438a      	bics	r2, r1
 80024fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	b29b      	uxth	r3, r3
 8002506:	2207      	movs	r2, #7
 8002508:	4013      	ands	r3, r2
 800250a:	b299      	uxth	r1, r3
 800250c:	1903      	adds	r3, r0, r4
 800250e:	19db      	adds	r3, r3, r7
 8002510:	1902      	adds	r2, r0, r4
 8002512:	19d2      	adds	r2, r2, r7
 8002514:	8812      	ldrh	r2, [r2, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1902      	adds	r2, r0, r4
 8002520:	19d2      	adds	r2, r2, r7
 8002522:	8812      	ldrh	r2, [r2, #0]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	e05e      	b.n	80025e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002528:	231a      	movs	r3, #26
 800252a:	2220      	movs	r2, #32
 800252c:	189b      	adds	r3, r3, r2
 800252e:	19db      	adds	r3, r3, r7
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e057      	b.n	80025e6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002536:	231b      	movs	r3, #27
 8002538:	2220      	movs	r2, #32
 800253a:	189b      	adds	r3, r3, r2
 800253c:	19db      	adds	r3, r3, r7
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d015      	beq.n	8002570 <UART_SetConfig+0x4d0>
 8002544:	dc18      	bgt.n	8002578 <UART_SetConfig+0x4d8>
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00d      	beq.n	8002566 <UART_SetConfig+0x4c6>
 800254a:	dc15      	bgt.n	8002578 <UART_SetConfig+0x4d8>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <UART_SetConfig+0x4b6>
 8002550:	2b02      	cmp	r3, #2
 8002552:	d005      	beq.n	8002560 <UART_SetConfig+0x4c0>
 8002554:	e010      	b.n	8002578 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002556:	f7ff fadb 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 800255a:	0003      	movs	r3, r0
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800255e:	e014      	b.n	800258a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <UART_SetConfig+0x578>)
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002564:	e011      	b.n	800258a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002566:	f7ff fa47 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 800256a:	0003      	movs	r3, r0
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800256e:	e00c      	b.n	800258a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002576:	e008      	b.n	800258a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800257c:	231a      	movs	r3, #26
 800257e:	2220      	movs	r2, #32
 8002580:	189b      	adds	r3, r3, r2
 8002582:	19db      	adds	r3, r3, r7
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
        break;
 8002588:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02a      	beq.n	80025e6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002594:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <UART_SetConfig+0x574>)
 8002596:	0052      	lsls	r2, r2, #1
 8002598:	5ad3      	ldrh	r3, [r2, r3]
 800259a:	0019      	movs	r1, r3
 800259c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800259e:	f7fd fdb1 	bl	8000104 <__udivsi3>
 80025a2:	0003      	movs	r3, r0
 80025a4:	001a      	movs	r2, r3
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	18d2      	adds	r2, r2, r3
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f7fd fda5 	bl	8000104 <__udivsi3>
 80025ba:	0003      	movs	r3, r0
 80025bc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d90a      	bls.n	80025da <UART_SetConfig+0x53a>
 80025c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d205      	bcs.n	80025da <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	e005      	b.n	80025e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80025da:	231a      	movs	r3, #26
 80025dc:	2220      	movs	r2, #32
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	19db      	adds	r3, r3, r7
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	226a      	movs	r2, #106	@ 0x6a
 80025ea:	2101      	movs	r1, #1
 80025ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	2268      	movs	r2, #104	@ 0x68
 80025f2:	2101      	movs	r1, #1
 80025f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	2200      	movs	r2, #0
 80025fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	2200      	movs	r2, #0
 8002600:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002602:	231a      	movs	r3, #26
 8002604:	2220      	movs	r2, #32
 8002606:	189b      	adds	r3, r3, r2
 8002608:	19db      	adds	r3, r3, r7
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b010      	add	sp, #64	@ 0x40
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	0800372c 	.word	0x0800372c
 8002618:	00f42400 	.word	0x00f42400

0800261c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	2208      	movs	r2, #8
 800262a:	4013      	ands	r3, r2
 800262c:	d00b      	beq.n	8002646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a4a      	ldr	r2, [pc, #296]	@ (8002760 <UART_AdvFeatureConfig+0x144>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	2201      	movs	r2, #1
 800264c:	4013      	ands	r3, r2
 800264e:	d00b      	beq.n	8002668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a43      	ldr	r2, [pc, #268]	@ (8002764 <UART_AdvFeatureConfig+0x148>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	2202      	movs	r2, #2
 800266e:	4013      	ands	r3, r2
 8002670:	d00b      	beq.n	800268a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a3b      	ldr	r2, [pc, #236]	@ (8002768 <UART_AdvFeatureConfig+0x14c>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	2204      	movs	r2, #4
 8002690:	4013      	ands	r3, r2
 8002692:	d00b      	beq.n	80026ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a34      	ldr	r2, [pc, #208]	@ (800276c <UART_AdvFeatureConfig+0x150>)
 800269c:	4013      	ands	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	2210      	movs	r2, #16
 80026b2:	4013      	ands	r3, r2
 80026b4:	d00b      	beq.n	80026ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002770 <UART_AdvFeatureConfig+0x154>)
 80026be:	4013      	ands	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	2220      	movs	r2, #32
 80026d4:	4013      	ands	r3, r2
 80026d6:	d00b      	beq.n	80026f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4a25      	ldr	r2, [pc, #148]	@ (8002774 <UART_AdvFeatureConfig+0x158>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	2240      	movs	r2, #64	@ 0x40
 80026f6:	4013      	ands	r3, r2
 80026f8:	d01d      	beq.n	8002736 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <UART_AdvFeatureConfig+0x15c>)
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	035b      	lsls	r3, r3, #13
 800271a:	429a      	cmp	r2, r3
 800271c:	d10b      	bne.n	8002736 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a15      	ldr	r2, [pc, #84]	@ (800277c <UART_AdvFeatureConfig+0x160>)
 8002726:	4013      	ands	r3, r2
 8002728:	0019      	movs	r1, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	4013      	ands	r3, r2
 800273e:	d00b      	beq.n	8002758 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a0e      	ldr	r2, [pc, #56]	@ (8002780 <UART_AdvFeatureConfig+0x164>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	605a      	str	r2, [r3, #4]
  }
}
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}
 8002760:	ffff7fff 	.word	0xffff7fff
 8002764:	fffdffff 	.word	0xfffdffff
 8002768:	fffeffff 	.word	0xfffeffff
 800276c:	fffbffff 	.word	0xfffbffff
 8002770:	ffffefff 	.word	0xffffefff
 8002774:	ffffdfff 	.word	0xffffdfff
 8002778:	ffefffff 	.word	0xffefffff
 800277c:	ff9fffff 	.word	0xff9fffff
 8002780:	fff7ffff 	.word	0xfff7ffff

08002784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b092      	sub	sp, #72	@ 0x48
 8002788:	af02      	add	r7, sp, #8
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2290      	movs	r2, #144	@ 0x90
 8002790:	2100      	movs	r1, #0
 8002792:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002794:	f7fe fa5e 	bl	8000c54 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2208      	movs	r2, #8
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d12d      	bne.n	8002806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ac:	2280      	movs	r2, #128	@ 0x80
 80027ae:	0391      	lsls	r1, r2, #14
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4a47      	ldr	r2, [pc, #284]	@ (80028d0 <UART_CheckIdleState+0x14c>)
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f000 f88e 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d022      	beq.n	8002806 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c0:	f3ef 8310 	mrs	r3, PRIMASK
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80027c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027ca:	2301      	movs	r3, #1
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d0:	f383 8810 	msr	PRIMASK, r3
}
 80027d4:	46c0      	nop			@ (mov r8, r8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2180      	movs	r1, #128	@ 0x80
 80027e2:	438a      	bics	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	f383 8810 	msr	PRIMASK, r3
}
 80027f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2288      	movs	r2, #136	@ 0x88
 80027f6:	2120      	movs	r1, #32
 80027f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2284      	movs	r2, #132	@ 0x84
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e060      	b.n	80028c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2204      	movs	r2, #4
 800280e:	4013      	ands	r3, r2
 8002810:	2b04      	cmp	r3, #4
 8002812:	d146      	bne.n	80028a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	03d1      	lsls	r1, r2, #15
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4a2c      	ldr	r2, [pc, #176]	@ (80028d0 <UART_CheckIdleState+0x14c>)
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	f000 f859 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d03b      	beq.n	80028a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282a:	f3ef 8310 	mrs	r3, PRIMASK
 800282e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002830:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
 8002834:	2301      	movs	r3, #1
 8002836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f383 8810 	msr	PRIMASK, r3
}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4922      	ldr	r1, [pc, #136]	@ (80028d4 <UART_CheckIdleState+0x150>)
 800284c:	400a      	ands	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f383 8810 	msr	PRIMASK, r3
}
 800285a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285c:	f3ef 8310 	mrs	r3, PRIMASK
 8002860:	61bb      	str	r3, [r7, #24]
  return(result);
 8002862:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002864:	633b      	str	r3, [r7, #48]	@ 0x30
 8002866:	2301      	movs	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f383 8810 	msr	PRIMASK, r3
}
 8002870:	46c0      	nop			@ (mov r8, r8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	438a      	bics	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f383 8810 	msr	PRIMASK, r3
}
 800288c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	228c      	movs	r2, #140	@ 0x8c
 8002892:	2120      	movs	r1, #32
 8002894:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2284      	movs	r2, #132	@ 0x84
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e012      	b.n	80028c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2288      	movs	r2, #136	@ 0x88
 80028a6:	2120      	movs	r1, #32
 80028a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	228c      	movs	r2, #140	@ 0x8c
 80028ae:	2120      	movs	r1, #32
 80028b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2284      	movs	r2, #132	@ 0x84
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b010      	add	sp, #64	@ 0x40
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	01ffffff 	.word	0x01ffffff
 80028d4:	fffffedf 	.word	0xfffffedf

080028d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e8:	e051      	b.n	800298e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	3301      	adds	r3, #1
 80028ee:	d04e      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7fe f9b0 	bl	8000c54 <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e051      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2204      	movs	r2, #4
 8002912:	4013      	ands	r3, r2
 8002914:	d03b      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b80      	cmp	r3, #128	@ 0x80
 800291a:	d038      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0xb6>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b40      	cmp	r3, #64	@ 0x40
 8002920:	d035      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2208      	movs	r2, #8
 800292a:	4013      	ands	r3, r2
 800292c:	2b08      	cmp	r3, #8
 800292e:	d111      	bne.n	8002954 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2208      	movs	r2, #8
 8002936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	0018      	movs	r0, r3
 800293c:	f000 f83c 	bl	80029b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2290      	movs	r2, #144	@ 0x90
 8002944:	2108      	movs	r1, #8
 8002946:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2284      	movs	r2, #132	@ 0x84
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e02c      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	401a      	ands	r2, r3
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	429a      	cmp	r2, r3
 8002966:	d112      	bne.n	800298e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f81f 	bl	80029b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2290      	movs	r2, #144	@ 0x90
 800297e:	2120      	movs	r1, #32
 8002980:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2284      	movs	r2, #132	@ 0x84
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	425a      	negs	r2, r3
 800299e:	4153      	adcs	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	001a      	movs	r2, r3
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d09e      	beq.n	80028ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	@ 0x38
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c0:	f3ef 8310 	mrs	r3, PRIMASK
 80029c4:	617b      	str	r3, [r7, #20]
  return(result);
 80029c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4926      	ldr	r1, [pc, #152]	@ (8002a7c <UART_EndRxTransfer+0xc4>)
 80029e2:	400a      	ands	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f383 8810 	msr	PRIMASK, r3
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	623b      	str	r3, [r7, #32]
  return(result);
 80029f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80029fc:	2301      	movs	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	491b      	ldr	r1, [pc, #108]	@ (8002a80 <UART_EndRxTransfer+0xc8>)
 8002a14:	400a      	ands	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1e:	f383 8810 	msr	PRIMASK, r3
}
 8002a22:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d118      	bne.n	8002a5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a30:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a36:	2301      	movs	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f383 8810 	msr	PRIMASK, r3
}
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2110      	movs	r1, #16
 8002a4e:	438a      	bics	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f383 8810 	msr	PRIMASK, r3
}
 8002a5c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	228c      	movs	r2, #140	@ 0x8c
 8002a62:	2120      	movs	r1, #32
 8002a64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b00e      	add	sp, #56	@ 0x38
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	fffffedf 	.word	0xfffffedf
 8002a80:	effffffe 	.word	0xeffffffe

08002a84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2284      	movs	r2, #132	@ 0x84
 8002a90:	5c9b      	ldrb	r3, [r3, r2]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UARTEx_DisableFifoMode+0x16>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e027      	b.n	8002aea <HAL_UARTEx_DisableFifoMode+0x66>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2284      	movs	r2, #132	@ 0x84
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2288      	movs	r2, #136	@ 0x88
 8002aa6:	2124      	movs	r1, #36	@ 0x24
 8002aa8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	438a      	bics	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8002af4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2288      	movs	r2, #136	@ 0x88
 8002adc:	2120      	movs	r1, #32
 8002ade:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2284      	movs	r2, #132	@ 0x84
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b004      	add	sp, #16
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	dfffffff 	.word	0xdfffffff

08002af8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2284      	movs	r2, #132	@ 0x84
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e02e      	b.n	8002b6e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2284      	movs	r2, #132	@ 0x84
 8002b14:	2101      	movs	r1, #1
 8002b16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2288      	movs	r2, #136	@ 0x88
 8002b1c:	2124      	movs	r1, #36	@ 0x24
 8002b1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	438a      	bics	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	08d9      	lsrs	r1, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f854 	bl	8002bfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2288      	movs	r2, #136	@ 0x88
 8002b60:	2120      	movs	r1, #32
 8002b62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2284      	movs	r2, #132	@ 0x84
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b004      	add	sp, #16
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2284      	movs	r2, #132	@ 0x84
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e02f      	b.n	8002bf0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2284      	movs	r2, #132	@ 0x84
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2288      	movs	r2, #136	@ 0x88
 8002b9c:	2124      	movs	r1, #36	@ 0x24
 8002b9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f813 	bl	8002bfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2288      	movs	r2, #136	@ 0x88
 8002be2:	2120      	movs	r1, #32
 8002be4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2284      	movs	r2, #132	@ 0x84
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b004      	add	sp, #16
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	f1ffffff 	.word	0xf1ffffff

08002bfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	226a      	movs	r2, #106	@ 0x6a
 8002c10:	2101      	movs	r1, #1
 8002c12:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2268      	movs	r2, #104	@ 0x68
 8002c18:	2101      	movs	r1, #1
 8002c1a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002c1c:	e043      	b.n	8002ca6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002c1e:	260f      	movs	r6, #15
 8002c20:	19bb      	adds	r3, r7, r6
 8002c22:	2208      	movs	r2, #8
 8002c24:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c26:	200e      	movs	r0, #14
 8002c28:	183b      	adds	r3, r7, r0
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	0e5b      	lsrs	r3, r3, #25
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	240d      	movs	r4, #13
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	2107      	movs	r1, #7
 8002c3e:	400a      	ands	r2, r1
 8002c40:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	0f5b      	lsrs	r3, r3, #29
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	250c      	movs	r5, #12
 8002c4e:	197b      	adds	r3, r7, r5
 8002c50:	2107      	movs	r1, #7
 8002c52:	400a      	ands	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c56:	183b      	adds	r3, r7, r0
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	197a      	adds	r2, r7, r5
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	4914      	ldr	r1, [pc, #80]	@ (8002cb0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c60:	5c8a      	ldrb	r2, [r1, r2]
 8002c62:	435a      	muls	r2, r3
 8002c64:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c66:	197b      	adds	r3, r7, r5
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c6e:	0019      	movs	r1, r3
 8002c70:	f7fd fad2 	bl	8000218 <__divsi3>
 8002c74:	0003      	movs	r3, r0
 8002c76:	b299      	uxth	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	226a      	movs	r2, #106	@ 0x6a
 8002c7c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c7e:	19bb      	adds	r3, r7, r6
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	193a      	adds	r2, r7, r4
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	490a      	ldr	r1, [pc, #40]	@ (8002cb0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c88:	5c8a      	ldrb	r2, [r1, r2]
 8002c8a:	435a      	muls	r2, r3
 8002c8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	4a08      	ldr	r2, [pc, #32]	@ (8002cb4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c96:	0019      	movs	r1, r3
 8002c98:	f7fd fabe 	bl	8000218 <__divsi3>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	b299      	uxth	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2268      	movs	r2, #104	@ 0x68
 8002ca4:	5299      	strh	r1, [r3, r2]
}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b005      	add	sp, #20
 8002cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	08003744 	.word	0x08003744
 8002cb4:	0800374c 	.word	0x0800374c

08002cb8 <std>:
 8002cb8:	2300      	movs	r3, #0
 8002cba:	b510      	push	{r4, lr}
 8002cbc:	0004      	movs	r4, r0
 8002cbe:	6003      	str	r3, [r0, #0]
 8002cc0:	6043      	str	r3, [r0, #4]
 8002cc2:	6083      	str	r3, [r0, #8]
 8002cc4:	8181      	strh	r1, [r0, #12]
 8002cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cc8:	81c2      	strh	r2, [r0, #14]
 8002cca:	6103      	str	r3, [r0, #16]
 8002ccc:	6143      	str	r3, [r0, #20]
 8002cce:	6183      	str	r3, [r0, #24]
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	305c      	adds	r0, #92	@ 0x5c
 8002cd6:	f000 f9ff 	bl	80030d8 <memset>
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <std+0x50>)
 8002cdc:	6224      	str	r4, [r4, #32]
 8002cde:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <std+0x54>)
 8002ce2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <std+0x58>)
 8002ce6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <std+0x5c>)
 8002cea:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <std+0x60>)
 8002cee:	429c      	cmp	r4, r3
 8002cf0:	d005      	beq.n	8002cfe <std+0x46>
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <std+0x64>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	d002      	beq.n	8002cfe <std+0x46>
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <std+0x68>)
 8002cfa:	429c      	cmp	r4, r3
 8002cfc:	d103      	bne.n	8002d06 <std+0x4e>
 8002cfe:	0020      	movs	r0, r4
 8002d00:	3058      	adds	r0, #88	@ 0x58
 8002d02:	f000 fa69 	bl	80031d8 <__retarget_lock_init_recursive>
 8002d06:	bd10      	pop	{r4, pc}
 8002d08:	08002f01 	.word	0x08002f01
 8002d0c:	08002f29 	.word	0x08002f29
 8002d10:	08002f61 	.word	0x08002f61
 8002d14:	08002f8d 	.word	0x08002f8d
 8002d18:	200001a0 	.word	0x200001a0
 8002d1c:	20000208 	.word	0x20000208
 8002d20:	20000270 	.word	0x20000270

08002d24 <stdio_exit_handler>:
 8002d24:	b510      	push	{r4, lr}
 8002d26:	4a03      	ldr	r2, [pc, #12]	@ (8002d34 <stdio_exit_handler+0x10>)
 8002d28:	4903      	ldr	r1, [pc, #12]	@ (8002d38 <stdio_exit_handler+0x14>)
 8002d2a:	4804      	ldr	r0, [pc, #16]	@ (8002d3c <stdio_exit_handler+0x18>)
 8002d2c:	f000 f86c 	bl	8002e08 <_fwalk_sglue>
 8002d30:	bd10      	pop	{r4, pc}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	2000008c 	.word	0x2000008c
 8002d38:	080034e5 	.word	0x080034e5
 8002d3c:	2000009c 	.word	0x2000009c

08002d40 <cleanup_stdio>:
 8002d40:	6841      	ldr	r1, [r0, #4]
 8002d42:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <cleanup_stdio+0x30>)
 8002d44:	b510      	push	{r4, lr}
 8002d46:	0004      	movs	r4, r0
 8002d48:	4299      	cmp	r1, r3
 8002d4a:	d001      	beq.n	8002d50 <cleanup_stdio+0x10>
 8002d4c:	f000 fbca 	bl	80034e4 <_fflush_r>
 8002d50:	68a1      	ldr	r1, [r4, #8]
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <cleanup_stdio+0x34>)
 8002d54:	4299      	cmp	r1, r3
 8002d56:	d002      	beq.n	8002d5e <cleanup_stdio+0x1e>
 8002d58:	0020      	movs	r0, r4
 8002d5a:	f000 fbc3 	bl	80034e4 <_fflush_r>
 8002d5e:	68e1      	ldr	r1, [r4, #12]
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <cleanup_stdio+0x38>)
 8002d62:	4299      	cmp	r1, r3
 8002d64:	d002      	beq.n	8002d6c <cleanup_stdio+0x2c>
 8002d66:	0020      	movs	r0, r4
 8002d68:	f000 fbbc 	bl	80034e4 <_fflush_r>
 8002d6c:	bd10      	pop	{r4, pc}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	200001a0 	.word	0x200001a0
 8002d74:	20000208 	.word	0x20000208
 8002d78:	20000270 	.word	0x20000270

08002d7c <global_stdio_init.part.0>:
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <global_stdio_init.part.0+0x28>)
 8002d80:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <global_stdio_init.part.0+0x2c>)
 8002d82:	2104      	movs	r1, #4
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	4809      	ldr	r0, [pc, #36]	@ (8002dac <global_stdio_init.part.0+0x30>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f7ff ff95 	bl	8002cb8 <std>
 8002d8e:	2201      	movs	r2, #1
 8002d90:	2109      	movs	r1, #9
 8002d92:	4807      	ldr	r0, [pc, #28]	@ (8002db0 <global_stdio_init.part.0+0x34>)
 8002d94:	f7ff ff90 	bl	8002cb8 <std>
 8002d98:	2202      	movs	r2, #2
 8002d9a:	2112      	movs	r1, #18
 8002d9c:	4805      	ldr	r0, [pc, #20]	@ (8002db4 <global_stdio_init.part.0+0x38>)
 8002d9e:	f7ff ff8b 	bl	8002cb8 <std>
 8002da2:	bd10      	pop	{r4, pc}
 8002da4:	200002d8 	.word	0x200002d8
 8002da8:	08002d25 	.word	0x08002d25
 8002dac:	200001a0 	.word	0x200001a0
 8002db0:	20000208 	.word	0x20000208
 8002db4:	20000270 	.word	0x20000270

08002db8 <__sfp_lock_acquire>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4802      	ldr	r0, [pc, #8]	@ (8002dc4 <__sfp_lock_acquire+0xc>)
 8002dbc:	f000 fa0d 	bl	80031da <__retarget_lock_acquire_recursive>
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	200002e1 	.word	0x200002e1

08002dc8 <__sfp_lock_release>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <__sfp_lock_release+0xc>)
 8002dcc:	f000 fa06 	bl	80031dc <__retarget_lock_release_recursive>
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	200002e1 	.word	0x200002e1

08002dd8 <__sinit>:
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	0004      	movs	r4, r0
 8002ddc:	f7ff ffec 	bl	8002db8 <__sfp_lock_acquire>
 8002de0:	6a23      	ldr	r3, [r4, #32]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <__sinit+0x14>
 8002de6:	f7ff ffef 	bl	8002dc8 <__sfp_lock_release>
 8002dea:	bd10      	pop	{r4, pc}
 8002dec:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <__sinit+0x28>)
 8002dee:	6223      	str	r3, [r4, #32]
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <__sinit+0x2c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f6      	bne.n	8002de6 <__sinit+0xe>
 8002df8:	f7ff ffc0 	bl	8002d7c <global_stdio_init.part.0>
 8002dfc:	e7f3      	b.n	8002de6 <__sinit+0xe>
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	08002d41 	.word	0x08002d41
 8002e04:	200002d8 	.word	0x200002d8

08002e08 <_fwalk_sglue>:
 8002e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e0a:	0014      	movs	r4, r2
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	9000      	str	r0, [sp, #0]
 8002e10:	9101      	str	r1, [sp, #4]
 8002e12:	68a5      	ldr	r5, [r4, #8]
 8002e14:	6867      	ldr	r7, [r4, #4]
 8002e16:	3f01      	subs	r7, #1
 8002e18:	d504      	bpl.n	8002e24 <_fwalk_sglue+0x1c>
 8002e1a:	6824      	ldr	r4, [r4, #0]
 8002e1c:	2c00      	cmp	r4, #0
 8002e1e:	d1f8      	bne.n	8002e12 <_fwalk_sglue+0xa>
 8002e20:	0030      	movs	r0, r6
 8002e22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e24:	89ab      	ldrh	r3, [r5, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d908      	bls.n	8002e3c <_fwalk_sglue+0x34>
 8002e2a:	220e      	movs	r2, #14
 8002e2c:	5eab      	ldrsh	r3, [r5, r2]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	d004      	beq.n	8002e3c <_fwalk_sglue+0x34>
 8002e32:	0029      	movs	r1, r5
 8002e34:	9800      	ldr	r0, [sp, #0]
 8002e36:	9b01      	ldr	r3, [sp, #4]
 8002e38:	4798      	blx	r3
 8002e3a:	4306      	orrs	r6, r0
 8002e3c:	3568      	adds	r5, #104	@ 0x68
 8002e3e:	e7ea      	b.n	8002e16 <_fwalk_sglue+0xe>

08002e40 <_puts_r>:
 8002e40:	6a03      	ldr	r3, [r0, #32]
 8002e42:	b570      	push	{r4, r5, r6, lr}
 8002e44:	0005      	movs	r5, r0
 8002e46:	000e      	movs	r6, r1
 8002e48:	6884      	ldr	r4, [r0, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <_puts_r+0x12>
 8002e4e:	f7ff ffc3 	bl	8002dd8 <__sinit>
 8002e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e54:	07db      	lsls	r3, r3, #31
 8002e56:	d405      	bmi.n	8002e64 <_puts_r+0x24>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	059b      	lsls	r3, r3, #22
 8002e5c:	d402      	bmi.n	8002e64 <_puts_r+0x24>
 8002e5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e60:	f000 f9bb 	bl	80031da <__retarget_lock_acquire_recursive>
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	071b      	lsls	r3, r3, #28
 8002e68:	d502      	bpl.n	8002e70 <_puts_r+0x30>
 8002e6a:	6923      	ldr	r3, [r4, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11f      	bne.n	8002eb0 <_puts_r+0x70>
 8002e70:	0021      	movs	r1, r4
 8002e72:	0028      	movs	r0, r5
 8002e74:	f000 f8d2 	bl	800301c <__swsetup_r>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d019      	beq.n	8002eb0 <_puts_r+0x70>
 8002e7c:	2501      	movs	r5, #1
 8002e7e:	426d      	negs	r5, r5
 8002e80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e82:	07db      	lsls	r3, r3, #31
 8002e84:	d405      	bmi.n	8002e92 <_puts_r+0x52>
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	059b      	lsls	r3, r3, #22
 8002e8a:	d402      	bmi.n	8002e92 <_puts_r+0x52>
 8002e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e8e:	f000 f9a5 	bl	80031dc <__retarget_lock_release_recursive>
 8002e92:	0028      	movs	r0, r5
 8002e94:	bd70      	pop	{r4, r5, r6, pc}
 8002e96:	3601      	adds	r6, #1
 8002e98:	60a3      	str	r3, [r4, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	da04      	bge.n	8002ea8 <_puts_r+0x68>
 8002e9e:	69a2      	ldr	r2, [r4, #24]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	dc16      	bgt.n	8002ed2 <_puts_r+0x92>
 8002ea4:	290a      	cmp	r1, #10
 8002ea6:	d014      	beq.n	8002ed2 <_puts_r+0x92>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	6022      	str	r2, [r4, #0]
 8002eae:	7019      	strb	r1, [r3, #0]
 8002eb0:	68a3      	ldr	r3, [r4, #8]
 8002eb2:	7831      	ldrb	r1, [r6, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	2900      	cmp	r1, #0
 8002eb8:	d1ed      	bne.n	8002e96 <_puts_r+0x56>
 8002eba:	60a3      	str	r3, [r4, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da0f      	bge.n	8002ee0 <_puts_r+0xa0>
 8002ec0:	0022      	movs	r2, r4
 8002ec2:	0028      	movs	r0, r5
 8002ec4:	310a      	adds	r1, #10
 8002ec6:	f000 f867 	bl	8002f98 <__swbuf_r>
 8002eca:	3001      	adds	r0, #1
 8002ecc:	d0d6      	beq.n	8002e7c <_puts_r+0x3c>
 8002ece:	250a      	movs	r5, #10
 8002ed0:	e7d6      	b.n	8002e80 <_puts_r+0x40>
 8002ed2:	0022      	movs	r2, r4
 8002ed4:	0028      	movs	r0, r5
 8002ed6:	f000 f85f 	bl	8002f98 <__swbuf_r>
 8002eda:	3001      	adds	r0, #1
 8002edc:	d1e8      	bne.n	8002eb0 <_puts_r+0x70>
 8002ede:	e7cd      	b.n	8002e7c <_puts_r+0x3c>
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	6022      	str	r2, [r4, #0]
 8002ee6:	220a      	movs	r2, #10
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e7f0      	b.n	8002ece <_puts_r+0x8e>

08002eec <puts>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	4b03      	ldr	r3, [pc, #12]	@ (8002efc <puts+0x10>)
 8002ef0:	0001      	movs	r1, r0
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	f7ff ffa4 	bl	8002e40 <_puts_r>
 8002ef8:	bd10      	pop	{r4, pc}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	20000098 	.word	0x20000098

08002f00 <__sread>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	000c      	movs	r4, r1
 8002f04:	250e      	movs	r5, #14
 8002f06:	5f49      	ldrsh	r1, [r1, r5]
 8002f08:	f000 f914 	bl	8003134 <_read_r>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	db03      	blt.n	8002f18 <__sread+0x18>
 8002f10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002f12:	181b      	adds	r3, r3, r0
 8002f14:	6563      	str	r3, [r4, #84]	@ 0x54
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	4a02      	ldr	r2, [pc, #8]	@ (8002f24 <__sread+0x24>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	81a3      	strh	r3, [r4, #12]
 8002f20:	e7f9      	b.n	8002f16 <__sread+0x16>
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	ffffefff 	.word	0xffffefff

08002f28 <__swrite>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	001f      	movs	r7, r3
 8002f2c:	898b      	ldrh	r3, [r1, #12]
 8002f2e:	0005      	movs	r5, r0
 8002f30:	000c      	movs	r4, r1
 8002f32:	0016      	movs	r6, r2
 8002f34:	05db      	lsls	r3, r3, #23
 8002f36:	d505      	bpl.n	8002f44 <__swrite+0x1c>
 8002f38:	230e      	movs	r3, #14
 8002f3a:	5ec9      	ldrsh	r1, [r1, r3]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f000 f8e4 	bl	800310c <_lseek_r>
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <__swrite+0x34>)
 8002f48:	0028      	movs	r0, r5
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	81a3      	strh	r3, [r4, #12]
 8002f4e:	0032      	movs	r2, r6
 8002f50:	230e      	movs	r3, #14
 8002f52:	5ee1      	ldrsh	r1, [r4, r3]
 8002f54:	003b      	movs	r3, r7
 8002f56:	f000 f901 	bl	800315c <_write_r>
 8002f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5c:	ffffefff 	.word	0xffffefff

08002f60 <__sseek>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	000c      	movs	r4, r1
 8002f64:	250e      	movs	r5, #14
 8002f66:	5f49      	ldrsh	r1, [r1, r5]
 8002f68:	f000 f8d0 	bl	800310c <_lseek_r>
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	1c42      	adds	r2, r0, #1
 8002f70:	d103      	bne.n	8002f7a <__sseek+0x1a>
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <__sseek+0x28>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	81a3      	strh	r3, [r4, #12]
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	0152      	lsls	r2, r2, #5
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	81a3      	strh	r3, [r4, #12]
 8002f82:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f84:	e7f8      	b.n	8002f78 <__sseek+0x18>
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	ffffefff 	.word	0xffffefff

08002f8c <__sclose>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	230e      	movs	r3, #14
 8002f90:	5ec9      	ldrsh	r1, [r1, r3]
 8002f92:	f000 f8a9 	bl	80030e8 <_close_r>
 8002f96:	bd10      	pop	{r4, pc}

08002f98 <__swbuf_r>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	0006      	movs	r6, r0
 8002f9c:	000d      	movs	r5, r1
 8002f9e:	0014      	movs	r4, r2
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d004      	beq.n	8002fae <__swbuf_r+0x16>
 8002fa4:	6a03      	ldr	r3, [r0, #32]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <__swbuf_r+0x16>
 8002faa:	f7ff ff15 	bl	8002dd8 <__sinit>
 8002fae:	69a3      	ldr	r3, [r4, #24]
 8002fb0:	60a3      	str	r3, [r4, #8]
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	d502      	bpl.n	8002fbe <__swbuf_r+0x26>
 8002fb8:	6923      	ldr	r3, [r4, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <__swbuf_r+0x3a>
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	0030      	movs	r0, r6
 8002fc2:	f000 f82b 	bl	800301c <__swsetup_r>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d003      	beq.n	8002fd2 <__swbuf_r+0x3a>
 8002fca:	2501      	movs	r5, #1
 8002fcc:	426d      	negs	r5, r5
 8002fce:	0028      	movs	r0, r5
 8002fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	b2ef      	uxtb	r7, r5
 8002fd8:	1ac0      	subs	r0, r0, r3
 8002fda:	6963      	ldr	r3, [r4, #20]
 8002fdc:	b2ed      	uxtb	r5, r5
 8002fde:	4283      	cmp	r3, r0
 8002fe0:	dc05      	bgt.n	8002fee <__swbuf_r+0x56>
 8002fe2:	0021      	movs	r1, r4
 8002fe4:	0030      	movs	r0, r6
 8002fe6:	f000 fa7d 	bl	80034e4 <_fflush_r>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d1ed      	bne.n	8002fca <__swbuf_r+0x32>
 8002fee:	68a3      	ldr	r3, [r4, #8]
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60a3      	str	r3, [r4, #8]
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	6022      	str	r2, [r4, #0]
 8002ffc:	701f      	strb	r7, [r3, #0]
 8002ffe:	6963      	ldr	r3, [r4, #20]
 8003000:	4283      	cmp	r3, r0
 8003002:	d004      	beq.n	800300e <__swbuf_r+0x76>
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	07db      	lsls	r3, r3, #31
 8003008:	d5e1      	bpl.n	8002fce <__swbuf_r+0x36>
 800300a:	2d0a      	cmp	r5, #10
 800300c:	d1df      	bne.n	8002fce <__swbuf_r+0x36>
 800300e:	0021      	movs	r1, r4
 8003010:	0030      	movs	r0, r6
 8003012:	f000 fa67 	bl	80034e4 <_fflush_r>
 8003016:	2800      	cmp	r0, #0
 8003018:	d0d9      	beq.n	8002fce <__swbuf_r+0x36>
 800301a:	e7d6      	b.n	8002fca <__swbuf_r+0x32>

0800301c <__swsetup_r>:
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <__swsetup_r+0xb8>)
 800301e:	b570      	push	{r4, r5, r6, lr}
 8003020:	0005      	movs	r5, r0
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	000c      	movs	r4, r1
 8003026:	2800      	cmp	r0, #0
 8003028:	d004      	beq.n	8003034 <__swsetup_r+0x18>
 800302a:	6a03      	ldr	r3, [r0, #32]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <__swsetup_r+0x18>
 8003030:	f7ff fed2 	bl	8002dd8 <__sinit>
 8003034:	230c      	movs	r3, #12
 8003036:	5ee2      	ldrsh	r2, [r4, r3]
 8003038:	0713      	lsls	r3, r2, #28
 800303a:	d423      	bmi.n	8003084 <__swsetup_r+0x68>
 800303c:	06d3      	lsls	r3, r2, #27
 800303e:	d407      	bmi.n	8003050 <__swsetup_r+0x34>
 8003040:	2309      	movs	r3, #9
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	2340      	movs	r3, #64	@ 0x40
 8003046:	2001      	movs	r0, #1
 8003048:	4313      	orrs	r3, r2
 800304a:	81a3      	strh	r3, [r4, #12]
 800304c:	4240      	negs	r0, r0
 800304e:	e03a      	b.n	80030c6 <__swsetup_r+0xaa>
 8003050:	0752      	lsls	r2, r2, #29
 8003052:	d513      	bpl.n	800307c <__swsetup_r+0x60>
 8003054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003056:	2900      	cmp	r1, #0
 8003058:	d008      	beq.n	800306c <__swsetup_r+0x50>
 800305a:	0023      	movs	r3, r4
 800305c:	3344      	adds	r3, #68	@ 0x44
 800305e:	4299      	cmp	r1, r3
 8003060:	d002      	beq.n	8003068 <__swsetup_r+0x4c>
 8003062:	0028      	movs	r0, r5
 8003064:	f000 f8bc 	bl	80031e0 <_free_r>
 8003068:	2300      	movs	r3, #0
 800306a:	6363      	str	r3, [r4, #52]	@ 0x34
 800306c:	2224      	movs	r2, #36	@ 0x24
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	4393      	bics	r3, r2
 8003072:	81a3      	strh	r3, [r4, #12]
 8003074:	2300      	movs	r3, #0
 8003076:	6063      	str	r3, [r4, #4]
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	6023      	str	r3, [r4, #0]
 800307c:	2308      	movs	r3, #8
 800307e:	89a2      	ldrh	r2, [r4, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	81a3      	strh	r3, [r4, #12]
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <__swsetup_r+0x86>
 800308a:	21a0      	movs	r1, #160	@ 0xa0
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	0089      	lsls	r1, r1, #2
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	400b      	ands	r3, r1
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <__swsetup_r+0x86>
 800309a:	0021      	movs	r1, r4
 800309c:	0028      	movs	r0, r5
 800309e:	f000 fa77 	bl	8003590 <__smakebuf_r>
 80030a2:	230c      	movs	r3, #12
 80030a4:	5ee2      	ldrsh	r2, [r4, r3]
 80030a6:	2101      	movs	r1, #1
 80030a8:	0013      	movs	r3, r2
 80030aa:	400b      	ands	r3, r1
 80030ac:	420a      	tst	r2, r1
 80030ae:	d00b      	beq.n	80030c8 <__swsetup_r+0xac>
 80030b0:	2300      	movs	r3, #0
 80030b2:	60a3      	str	r3, [r4, #8]
 80030b4:	6963      	ldr	r3, [r4, #20]
 80030b6:	425b      	negs	r3, r3
 80030b8:	61a3      	str	r3, [r4, #24]
 80030ba:	2000      	movs	r0, #0
 80030bc:	6923      	ldr	r3, [r4, #16]
 80030be:	4283      	cmp	r3, r0
 80030c0:	d101      	bne.n	80030c6 <__swsetup_r+0xaa>
 80030c2:	0613      	lsls	r3, r2, #24
 80030c4:	d4be      	bmi.n	8003044 <__swsetup_r+0x28>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	0791      	lsls	r1, r2, #30
 80030ca:	d400      	bmi.n	80030ce <__swsetup_r+0xb2>
 80030cc:	6963      	ldr	r3, [r4, #20]
 80030ce:	60a3      	str	r3, [r4, #8]
 80030d0:	e7f3      	b.n	80030ba <__swsetup_r+0x9e>
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	20000098 	.word	0x20000098

080030d8 <memset>:
 80030d8:	0003      	movs	r3, r0
 80030da:	1882      	adds	r2, r0, r2
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	7019      	strb	r1, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <_close_r>:
 80030e8:	2300      	movs	r3, #0
 80030ea:	b570      	push	{r4, r5, r6, lr}
 80030ec:	4d06      	ldr	r5, [pc, #24]	@ (8003108 <_close_r+0x20>)
 80030ee:	0004      	movs	r4, r0
 80030f0:	0008      	movs	r0, r1
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	f7fd fca0 	bl	8000a38 <_close>
 80030f8:	1c43      	adds	r3, r0, #1
 80030fa:	d103      	bne.n	8003104 <_close_r+0x1c>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d000      	beq.n	8003104 <_close_r+0x1c>
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	bd70      	pop	{r4, r5, r6, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	200002dc 	.word	0x200002dc

0800310c <_lseek_r>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	0004      	movs	r4, r0
 8003110:	0008      	movs	r0, r1
 8003112:	0011      	movs	r1, r2
 8003114:	001a      	movs	r2, r3
 8003116:	2300      	movs	r3, #0
 8003118:	4d05      	ldr	r5, [pc, #20]	@ (8003130 <_lseek_r+0x24>)
 800311a:	602b      	str	r3, [r5, #0]
 800311c:	f7fd fcad 	bl	8000a7a <_lseek>
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	d103      	bne.n	800312c <_lseek_r+0x20>
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d000      	beq.n	800312c <_lseek_r+0x20>
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	200002dc 	.word	0x200002dc

08003134 <_read_r>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	0004      	movs	r4, r0
 8003138:	0008      	movs	r0, r1
 800313a:	0011      	movs	r1, r2
 800313c:	001a      	movs	r2, r3
 800313e:	2300      	movs	r3, #0
 8003140:	4d05      	ldr	r5, [pc, #20]	@ (8003158 <_read_r+0x24>)
 8003142:	602b      	str	r3, [r5, #0]
 8003144:	f7fd fc5b 	bl	80009fe <_read>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d103      	bne.n	8003154 <_read_r+0x20>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d000      	beq.n	8003154 <_read_r+0x20>
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	bd70      	pop	{r4, r5, r6, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	200002dc 	.word	0x200002dc

0800315c <_write_r>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	0004      	movs	r4, r0
 8003160:	0008      	movs	r0, r1
 8003162:	0011      	movs	r1, r2
 8003164:	001a      	movs	r2, r3
 8003166:	2300      	movs	r3, #0
 8003168:	4d05      	ldr	r5, [pc, #20]	@ (8003180 <_write_r+0x24>)
 800316a:	602b      	str	r3, [r5, #0]
 800316c:	f7fd fa90 	bl	8000690 <_write>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d103      	bne.n	800317c <_write_r+0x20>
 8003174:	682b      	ldr	r3, [r5, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d000      	beq.n	800317c <_write_r+0x20>
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	200002dc 	.word	0x200002dc

08003184 <__errno>:
 8003184:	4b01      	ldr	r3, [pc, #4]	@ (800318c <__errno+0x8>)
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	4770      	bx	lr
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	20000098 	.word	0x20000098

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	2600      	movs	r6, #0
 8003194:	4c0c      	ldr	r4, [pc, #48]	@ (80031c8 <__libc_init_array+0x38>)
 8003196:	4d0d      	ldr	r5, [pc, #52]	@ (80031cc <__libc_init_array+0x3c>)
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	10a4      	asrs	r4, r4, #2
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	2600      	movs	r6, #0
 80031a2:	f000 fa6d 	bl	8003680 <_init>
 80031a6:	4c0a      	ldr	r4, [pc, #40]	@ (80031d0 <__libc_init_array+0x40>)
 80031a8:	4d0a      	ldr	r5, [pc, #40]	@ (80031d4 <__libc_init_array+0x44>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	00b3      	lsls	r3, r6, #2
 80031b6:	58eb      	ldr	r3, [r5, r3]
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	00b3      	lsls	r3, r6, #2
 80031c0:	58eb      	ldr	r3, [r5, r3]
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	0800375c 	.word	0x0800375c
 80031cc:	0800375c 	.word	0x0800375c
 80031d0:	08003760 	.word	0x08003760
 80031d4:	0800375c 	.word	0x0800375c

080031d8 <__retarget_lock_init_recursive>:
 80031d8:	4770      	bx	lr

080031da <__retarget_lock_acquire_recursive>:
 80031da:	4770      	bx	lr

080031dc <__retarget_lock_release_recursive>:
 80031dc:	4770      	bx	lr
	...

080031e0 <_free_r>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	0005      	movs	r5, r0
 80031e4:	1e0c      	subs	r4, r1, #0
 80031e6:	d010      	beq.n	800320a <_free_r+0x2a>
 80031e8:	3c04      	subs	r4, #4
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da00      	bge.n	80031f2 <_free_r+0x12>
 80031f0:	18e4      	adds	r4, r4, r3
 80031f2:	0028      	movs	r0, r5
 80031f4:	f000 f8e0 	bl	80033b8 <__malloc_lock>
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <_free_r+0x90>)
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <_free_r+0x2c>
 8003200:	6063      	str	r3, [r4, #4]
 8003202:	6014      	str	r4, [r2, #0]
 8003204:	0028      	movs	r0, r5
 8003206:	f000 f8df 	bl	80033c8 <__malloc_unlock>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	42a3      	cmp	r3, r4
 800320e:	d908      	bls.n	8003222 <_free_r+0x42>
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	1821      	adds	r1, r4, r0
 8003214:	428b      	cmp	r3, r1
 8003216:	d1f3      	bne.n	8003200 <_free_r+0x20>
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	1809      	adds	r1, r1, r0
 800321e:	6021      	str	r1, [r4, #0]
 8003220:	e7ee      	b.n	8003200 <_free_r+0x20>
 8003222:	001a      	movs	r2, r3
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <_free_r+0x4e>
 800322a:	42a3      	cmp	r3, r4
 800322c:	d9f9      	bls.n	8003222 <_free_r+0x42>
 800322e:	6811      	ldr	r1, [r2, #0]
 8003230:	1850      	adds	r0, r2, r1
 8003232:	42a0      	cmp	r0, r4
 8003234:	d10b      	bne.n	800324e <_free_r+0x6e>
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	1809      	adds	r1, r1, r0
 800323a:	1850      	adds	r0, r2, r1
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	4283      	cmp	r3, r0
 8003240:	d1e0      	bne.n	8003204 <_free_r+0x24>
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	1841      	adds	r1, r0, r1
 8003248:	6011      	str	r1, [r2, #0]
 800324a:	6053      	str	r3, [r2, #4]
 800324c:	e7da      	b.n	8003204 <_free_r+0x24>
 800324e:	42a0      	cmp	r0, r4
 8003250:	d902      	bls.n	8003258 <_free_r+0x78>
 8003252:	230c      	movs	r3, #12
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	e7d5      	b.n	8003204 <_free_r+0x24>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	d103      	bne.n	8003268 <_free_r+0x88>
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	1809      	adds	r1, r1, r0
 8003266:	6021      	str	r1, [r4, #0]
 8003268:	6063      	str	r3, [r4, #4]
 800326a:	6054      	str	r4, [r2, #4]
 800326c:	e7ca      	b.n	8003204 <_free_r+0x24>
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	200002e8 	.word	0x200002e8

08003274 <sbrk_aligned>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	4e0f      	ldr	r6, [pc, #60]	@ (80032b4 <sbrk_aligned+0x40>)
 8003278:	000d      	movs	r5, r1
 800327a:	6831      	ldr	r1, [r6, #0]
 800327c:	0004      	movs	r4, r0
 800327e:	2900      	cmp	r1, #0
 8003280:	d102      	bne.n	8003288 <sbrk_aligned+0x14>
 8003282:	f000 f9eb 	bl	800365c <_sbrk_r>
 8003286:	6030      	str	r0, [r6, #0]
 8003288:	0029      	movs	r1, r5
 800328a:	0020      	movs	r0, r4
 800328c:	f000 f9e6 	bl	800365c <_sbrk_r>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d103      	bne.n	800329c <sbrk_aligned+0x28>
 8003294:	2501      	movs	r5, #1
 8003296:	426d      	negs	r5, r5
 8003298:	0028      	movs	r0, r5
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	2303      	movs	r3, #3
 800329e:	1cc5      	adds	r5, r0, #3
 80032a0:	439d      	bics	r5, r3
 80032a2:	42a8      	cmp	r0, r5
 80032a4:	d0f8      	beq.n	8003298 <sbrk_aligned+0x24>
 80032a6:	1a29      	subs	r1, r5, r0
 80032a8:	0020      	movs	r0, r4
 80032aa:	f000 f9d7 	bl	800365c <_sbrk_r>
 80032ae:	3001      	adds	r0, #1
 80032b0:	d1f2      	bne.n	8003298 <sbrk_aligned+0x24>
 80032b2:	e7ef      	b.n	8003294 <sbrk_aligned+0x20>
 80032b4:	200002e4 	.word	0x200002e4

080032b8 <_malloc_r>:
 80032b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ba:	2203      	movs	r2, #3
 80032bc:	1ccb      	adds	r3, r1, #3
 80032be:	4393      	bics	r3, r2
 80032c0:	3308      	adds	r3, #8
 80032c2:	0005      	movs	r5, r0
 80032c4:	001f      	movs	r7, r3
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d234      	bcs.n	8003334 <_malloc_r+0x7c>
 80032ca:	270c      	movs	r7, #12
 80032cc:	42b9      	cmp	r1, r7
 80032ce:	d833      	bhi.n	8003338 <_malloc_r+0x80>
 80032d0:	0028      	movs	r0, r5
 80032d2:	f000 f871 	bl	80033b8 <__malloc_lock>
 80032d6:	4e37      	ldr	r6, [pc, #220]	@ (80033b4 <_malloc_r+0xfc>)
 80032d8:	6833      	ldr	r3, [r6, #0]
 80032da:	001c      	movs	r4, r3
 80032dc:	2c00      	cmp	r4, #0
 80032de:	d12f      	bne.n	8003340 <_malloc_r+0x88>
 80032e0:	0039      	movs	r1, r7
 80032e2:	0028      	movs	r0, r5
 80032e4:	f7ff ffc6 	bl	8003274 <sbrk_aligned>
 80032e8:	0004      	movs	r4, r0
 80032ea:	1c43      	adds	r3, r0, #1
 80032ec:	d15f      	bne.n	80033ae <_malloc_r+0xf6>
 80032ee:	6834      	ldr	r4, [r6, #0]
 80032f0:	9400      	str	r4, [sp, #0]
 80032f2:	9b00      	ldr	r3, [sp, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d14a      	bne.n	800338e <_malloc_r+0xd6>
 80032f8:	2c00      	cmp	r4, #0
 80032fa:	d052      	beq.n	80033a2 <_malloc_r+0xea>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	0028      	movs	r0, r5
 8003300:	18e3      	adds	r3, r4, r3
 8003302:	9900      	ldr	r1, [sp, #0]
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	f000 f9a9 	bl	800365c <_sbrk_r>
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	4283      	cmp	r3, r0
 800330e:	d148      	bne.n	80033a2 <_malloc_r+0xea>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	0028      	movs	r0, r5
 8003314:	1aff      	subs	r7, r7, r3
 8003316:	0039      	movs	r1, r7
 8003318:	f7ff ffac 	bl	8003274 <sbrk_aligned>
 800331c:	3001      	adds	r0, #1
 800331e:	d040      	beq.n	80033a2 <_malloc_r+0xea>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	19db      	adds	r3, r3, r7
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	6833      	ldr	r3, [r6, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	2a00      	cmp	r2, #0
 800332c:	d133      	bne.n	8003396 <_malloc_r+0xde>
 800332e:	9b00      	ldr	r3, [sp, #0]
 8003330:	6033      	str	r3, [r6, #0]
 8003332:	e019      	b.n	8003368 <_malloc_r+0xb0>
 8003334:	2b00      	cmp	r3, #0
 8003336:	dac9      	bge.n	80032cc <_malloc_r+0x14>
 8003338:	230c      	movs	r3, #12
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	2000      	movs	r0, #0
 800333e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003340:	6821      	ldr	r1, [r4, #0]
 8003342:	1bc9      	subs	r1, r1, r7
 8003344:	d420      	bmi.n	8003388 <_malloc_r+0xd0>
 8003346:	290b      	cmp	r1, #11
 8003348:	d90a      	bls.n	8003360 <_malloc_r+0xa8>
 800334a:	19e2      	adds	r2, r4, r7
 800334c:	6027      	str	r7, [r4, #0]
 800334e:	42a3      	cmp	r3, r4
 8003350:	d104      	bne.n	800335c <_malloc_r+0xa4>
 8003352:	6032      	str	r2, [r6, #0]
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	6011      	str	r1, [r2, #0]
 8003358:	6053      	str	r3, [r2, #4]
 800335a:	e005      	b.n	8003368 <_malloc_r+0xb0>
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e7f9      	b.n	8003354 <_malloc_r+0x9c>
 8003360:	6862      	ldr	r2, [r4, #4]
 8003362:	42a3      	cmp	r3, r4
 8003364:	d10e      	bne.n	8003384 <_malloc_r+0xcc>
 8003366:	6032      	str	r2, [r6, #0]
 8003368:	0028      	movs	r0, r5
 800336a:	f000 f82d 	bl	80033c8 <__malloc_unlock>
 800336e:	0020      	movs	r0, r4
 8003370:	2207      	movs	r2, #7
 8003372:	300b      	adds	r0, #11
 8003374:	1d23      	adds	r3, r4, #4
 8003376:	4390      	bics	r0, r2
 8003378:	1ac2      	subs	r2, r0, r3
 800337a:	4298      	cmp	r0, r3
 800337c:	d0df      	beq.n	800333e <_malloc_r+0x86>
 800337e:	1a1b      	subs	r3, r3, r0
 8003380:	50a3      	str	r3, [r4, r2]
 8003382:	e7dc      	b.n	800333e <_malloc_r+0x86>
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e7ef      	b.n	8003368 <_malloc_r+0xb0>
 8003388:	0023      	movs	r3, r4
 800338a:	6864      	ldr	r4, [r4, #4]
 800338c:	e7a6      	b.n	80032dc <_malloc_r+0x24>
 800338e:	9c00      	ldr	r4, [sp, #0]
 8003390:	6863      	ldr	r3, [r4, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	e7ad      	b.n	80032f2 <_malloc_r+0x3a>
 8003396:	001a      	movs	r2, r3
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	42a3      	cmp	r3, r4
 800339c:	d1fb      	bne.n	8003396 <_malloc_r+0xde>
 800339e:	2300      	movs	r3, #0
 80033a0:	e7da      	b.n	8003358 <_malloc_r+0xa0>
 80033a2:	230c      	movs	r3, #12
 80033a4:	0028      	movs	r0, r5
 80033a6:	602b      	str	r3, [r5, #0]
 80033a8:	f000 f80e 	bl	80033c8 <__malloc_unlock>
 80033ac:	e7c6      	b.n	800333c <_malloc_r+0x84>
 80033ae:	6007      	str	r7, [r0, #0]
 80033b0:	e7da      	b.n	8003368 <_malloc_r+0xb0>
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	200002e8 	.word	0x200002e8

080033b8 <__malloc_lock>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	4802      	ldr	r0, [pc, #8]	@ (80033c4 <__malloc_lock+0xc>)
 80033bc:	f7ff ff0d 	bl	80031da <__retarget_lock_acquire_recursive>
 80033c0:	bd10      	pop	{r4, pc}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	200002e0 	.word	0x200002e0

080033c8 <__malloc_unlock>:
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4802      	ldr	r0, [pc, #8]	@ (80033d4 <__malloc_unlock+0xc>)
 80033cc:	f7ff ff06 	bl	80031dc <__retarget_lock_release_recursive>
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	200002e0 	.word	0x200002e0

080033d8 <__sflush_r>:
 80033d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033da:	220c      	movs	r2, #12
 80033dc:	5e8b      	ldrsh	r3, [r1, r2]
 80033de:	0005      	movs	r5, r0
 80033e0:	000c      	movs	r4, r1
 80033e2:	071a      	lsls	r2, r3, #28
 80033e4:	d456      	bmi.n	8003494 <__sflush_r+0xbc>
 80033e6:	684a      	ldr	r2, [r1, #4]
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	dc02      	bgt.n	80033f2 <__sflush_r+0x1a>
 80033ec:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80033ee:	2a00      	cmp	r2, #0
 80033f0:	dd4e      	ble.n	8003490 <__sflush_r+0xb8>
 80033f2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80033f4:	2f00      	cmp	r7, #0
 80033f6:	d04b      	beq.n	8003490 <__sflush_r+0xb8>
 80033f8:	2200      	movs	r2, #0
 80033fa:	2080      	movs	r0, #128	@ 0x80
 80033fc:	682e      	ldr	r6, [r5, #0]
 80033fe:	602a      	str	r2, [r5, #0]
 8003400:	001a      	movs	r2, r3
 8003402:	0140      	lsls	r0, r0, #5
 8003404:	6a21      	ldr	r1, [r4, #32]
 8003406:	4002      	ands	r2, r0
 8003408:	4203      	tst	r3, r0
 800340a:	d033      	beq.n	8003474 <__sflush_r+0x9c>
 800340c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	075b      	lsls	r3, r3, #29
 8003412:	d506      	bpl.n	8003422 <__sflush_r+0x4a>
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	1ad2      	subs	r2, r2, r3
 8003418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <__sflush_r+0x4a>
 800341e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003420:	1ad2      	subs	r2, r2, r3
 8003422:	2300      	movs	r3, #0
 8003424:	0028      	movs	r0, r5
 8003426:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003428:	6a21      	ldr	r1, [r4, #32]
 800342a:	47b8      	blx	r7
 800342c:	89a2      	ldrh	r2, [r4, #12]
 800342e:	1c43      	adds	r3, r0, #1
 8003430:	d106      	bne.n	8003440 <__sflush_r+0x68>
 8003432:	6829      	ldr	r1, [r5, #0]
 8003434:	291d      	cmp	r1, #29
 8003436:	d846      	bhi.n	80034c6 <__sflush_r+0xee>
 8003438:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <__sflush_r+0x108>)
 800343a:	410b      	asrs	r3, r1
 800343c:	07db      	lsls	r3, r3, #31
 800343e:	d442      	bmi.n	80034c6 <__sflush_r+0xee>
 8003440:	2300      	movs	r3, #0
 8003442:	6063      	str	r3, [r4, #4]
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	6023      	str	r3, [r4, #0]
 8003448:	04d2      	lsls	r2, r2, #19
 800344a:	d505      	bpl.n	8003458 <__sflush_r+0x80>
 800344c:	1c43      	adds	r3, r0, #1
 800344e:	d102      	bne.n	8003456 <__sflush_r+0x7e>
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d100      	bne.n	8003458 <__sflush_r+0x80>
 8003456:	6560      	str	r0, [r4, #84]	@ 0x54
 8003458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800345a:	602e      	str	r6, [r5, #0]
 800345c:	2900      	cmp	r1, #0
 800345e:	d017      	beq.n	8003490 <__sflush_r+0xb8>
 8003460:	0023      	movs	r3, r4
 8003462:	3344      	adds	r3, #68	@ 0x44
 8003464:	4299      	cmp	r1, r3
 8003466:	d002      	beq.n	800346e <__sflush_r+0x96>
 8003468:	0028      	movs	r0, r5
 800346a:	f7ff feb9 	bl	80031e0 <_free_r>
 800346e:	2300      	movs	r3, #0
 8003470:	6363      	str	r3, [r4, #52]	@ 0x34
 8003472:	e00d      	b.n	8003490 <__sflush_r+0xb8>
 8003474:	2301      	movs	r3, #1
 8003476:	0028      	movs	r0, r5
 8003478:	47b8      	blx	r7
 800347a:	0002      	movs	r2, r0
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d1c6      	bne.n	800340e <__sflush_r+0x36>
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0c3      	beq.n	800340e <__sflush_r+0x36>
 8003486:	2b1d      	cmp	r3, #29
 8003488:	d001      	beq.n	800348e <__sflush_r+0xb6>
 800348a:	2b16      	cmp	r3, #22
 800348c:	d11a      	bne.n	80034c4 <__sflush_r+0xec>
 800348e:	602e      	str	r6, [r5, #0]
 8003490:	2000      	movs	r0, #0
 8003492:	e01e      	b.n	80034d2 <__sflush_r+0xfa>
 8003494:	690e      	ldr	r6, [r1, #16]
 8003496:	2e00      	cmp	r6, #0
 8003498:	d0fa      	beq.n	8003490 <__sflush_r+0xb8>
 800349a:	680f      	ldr	r7, [r1, #0]
 800349c:	600e      	str	r6, [r1, #0]
 800349e:	1bba      	subs	r2, r7, r6
 80034a0:	9201      	str	r2, [sp, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	079b      	lsls	r3, r3, #30
 80034a6:	d100      	bne.n	80034aa <__sflush_r+0xd2>
 80034a8:	694a      	ldr	r2, [r1, #20]
 80034aa:	60a2      	str	r2, [r4, #8]
 80034ac:	9b01      	ldr	r3, [sp, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	ddee      	ble.n	8003490 <__sflush_r+0xb8>
 80034b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80034b4:	0032      	movs	r2, r6
 80034b6:	001f      	movs	r7, r3
 80034b8:	0028      	movs	r0, r5
 80034ba:	9b01      	ldr	r3, [sp, #4]
 80034bc:	6a21      	ldr	r1, [r4, #32]
 80034be:	47b8      	blx	r7
 80034c0:	2800      	cmp	r0, #0
 80034c2:	dc07      	bgt.n	80034d4 <__sflush_r+0xfc>
 80034c4:	89a2      	ldrh	r2, [r4, #12]
 80034c6:	2340      	movs	r3, #64	@ 0x40
 80034c8:	2001      	movs	r0, #1
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b21b      	sxth	r3, r3
 80034ce:	81a3      	strh	r3, [r4, #12]
 80034d0:	4240      	negs	r0, r0
 80034d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034d4:	9b01      	ldr	r3, [sp, #4]
 80034d6:	1836      	adds	r6, r6, r0
 80034d8:	1a1b      	subs	r3, r3, r0
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	e7e6      	b.n	80034ac <__sflush_r+0xd4>
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	dfbffffe 	.word	0xdfbffffe

080034e4 <_fflush_r>:
 80034e4:	690b      	ldr	r3, [r1, #16]
 80034e6:	b570      	push	{r4, r5, r6, lr}
 80034e8:	0005      	movs	r5, r0
 80034ea:	000c      	movs	r4, r1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <_fflush_r+0x12>
 80034f0:	2500      	movs	r5, #0
 80034f2:	0028      	movs	r0, r5
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d004      	beq.n	8003504 <_fflush_r+0x20>
 80034fa:	6a03      	ldr	r3, [r0, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <_fflush_r+0x20>
 8003500:	f7ff fc6a 	bl	8002dd8 <__sinit>
 8003504:	220c      	movs	r2, #12
 8003506:	5ea3      	ldrsh	r3, [r4, r2]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f1      	beq.n	80034f0 <_fflush_r+0xc>
 800350c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800350e:	07d2      	lsls	r2, r2, #31
 8003510:	d404      	bmi.n	800351c <_fflush_r+0x38>
 8003512:	059b      	lsls	r3, r3, #22
 8003514:	d402      	bmi.n	800351c <_fflush_r+0x38>
 8003516:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003518:	f7ff fe5f 	bl	80031da <__retarget_lock_acquire_recursive>
 800351c:	0028      	movs	r0, r5
 800351e:	0021      	movs	r1, r4
 8003520:	f7ff ff5a 	bl	80033d8 <__sflush_r>
 8003524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003526:	0005      	movs	r5, r0
 8003528:	07db      	lsls	r3, r3, #31
 800352a:	d4e2      	bmi.n	80034f2 <_fflush_r+0xe>
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	059b      	lsls	r3, r3, #22
 8003530:	d4df      	bmi.n	80034f2 <_fflush_r+0xe>
 8003532:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003534:	f7ff fe52 	bl	80031dc <__retarget_lock_release_recursive>
 8003538:	e7db      	b.n	80034f2 <_fflush_r+0xe>
	...

0800353c <__swhatbuf_r>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	000e      	movs	r6, r1
 8003540:	001d      	movs	r5, r3
 8003542:	230e      	movs	r3, #14
 8003544:	5ec9      	ldrsh	r1, [r1, r3]
 8003546:	0014      	movs	r4, r2
 8003548:	b096      	sub	sp, #88	@ 0x58
 800354a:	2900      	cmp	r1, #0
 800354c:	da0c      	bge.n	8003568 <__swhatbuf_r+0x2c>
 800354e:	89b2      	ldrh	r2, [r6, #12]
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	0011      	movs	r1, r2
 8003554:	4019      	ands	r1, r3
 8003556:	421a      	tst	r2, r3
 8003558:	d114      	bne.n	8003584 <__swhatbuf_r+0x48>
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	2000      	movs	r0, #0
 8003560:	6029      	str	r1, [r5, #0]
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	b016      	add	sp, #88	@ 0x58
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	466a      	mov	r2, sp
 800356a:	f000 f853 	bl	8003614 <_fstat_r>
 800356e:	2800      	cmp	r0, #0
 8003570:	dbed      	blt.n	800354e <__swhatbuf_r+0x12>
 8003572:	23f0      	movs	r3, #240	@ 0xf0
 8003574:	9901      	ldr	r1, [sp, #4]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	4019      	ands	r1, r3
 800357a:	4b04      	ldr	r3, [pc, #16]	@ (800358c <__swhatbuf_r+0x50>)
 800357c:	18c9      	adds	r1, r1, r3
 800357e:	424b      	negs	r3, r1
 8003580:	4159      	adcs	r1, r3
 8003582:	e7ea      	b.n	800355a <__swhatbuf_r+0x1e>
 8003584:	2100      	movs	r1, #0
 8003586:	2340      	movs	r3, #64	@ 0x40
 8003588:	e7e9      	b.n	800355e <__swhatbuf_r+0x22>
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	ffffe000 	.word	0xffffe000

08003590 <__smakebuf_r>:
 8003590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003592:	2602      	movs	r6, #2
 8003594:	898b      	ldrh	r3, [r1, #12]
 8003596:	0005      	movs	r5, r0
 8003598:	000c      	movs	r4, r1
 800359a:	b085      	sub	sp, #20
 800359c:	4233      	tst	r3, r6
 800359e:	d007      	beq.n	80035b0 <__smakebuf_r+0x20>
 80035a0:	0023      	movs	r3, r4
 80035a2:	3347      	adds	r3, #71	@ 0x47
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	2301      	movs	r3, #1
 80035aa:	6163      	str	r3, [r4, #20]
 80035ac:	b005      	add	sp, #20
 80035ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b0:	ab03      	add	r3, sp, #12
 80035b2:	aa02      	add	r2, sp, #8
 80035b4:	f7ff ffc2 	bl	800353c <__swhatbuf_r>
 80035b8:	9f02      	ldr	r7, [sp, #8]
 80035ba:	9001      	str	r0, [sp, #4]
 80035bc:	0039      	movs	r1, r7
 80035be:	0028      	movs	r0, r5
 80035c0:	f7ff fe7a 	bl	80032b8 <_malloc_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d108      	bne.n	80035da <__smakebuf_r+0x4a>
 80035c8:	220c      	movs	r2, #12
 80035ca:	5ea3      	ldrsh	r3, [r4, r2]
 80035cc:	059a      	lsls	r2, r3, #22
 80035ce:	d4ed      	bmi.n	80035ac <__smakebuf_r+0x1c>
 80035d0:	2203      	movs	r2, #3
 80035d2:	4393      	bics	r3, r2
 80035d4:	431e      	orrs	r6, r3
 80035d6:	81a6      	strh	r6, [r4, #12]
 80035d8:	e7e2      	b.n	80035a0 <__smakebuf_r+0x10>
 80035da:	2380      	movs	r3, #128	@ 0x80
 80035dc:	89a2      	ldrh	r2, [r4, #12]
 80035de:	6020      	str	r0, [r4, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	81a3      	strh	r3, [r4, #12]
 80035e4:	9b03      	ldr	r3, [sp, #12]
 80035e6:	6120      	str	r0, [r4, #16]
 80035e8:	6167      	str	r7, [r4, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <__smakebuf_r+0x78>
 80035ee:	0028      	movs	r0, r5
 80035f0:	230e      	movs	r3, #14
 80035f2:	5ee1      	ldrsh	r1, [r4, r3]
 80035f4:	f000 f820 	bl	8003638 <_isatty_r>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d005      	beq.n	8003608 <__smakebuf_r+0x78>
 80035fc:	2303      	movs	r3, #3
 80035fe:	89a2      	ldrh	r2, [r4, #12]
 8003600:	439a      	bics	r2, r3
 8003602:	3b02      	subs	r3, #2
 8003604:	4313      	orrs	r3, r2
 8003606:	81a3      	strh	r3, [r4, #12]
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	9a01      	ldr	r2, [sp, #4]
 800360c:	4313      	orrs	r3, r2
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	e7cc      	b.n	80035ac <__smakebuf_r+0x1c>
	...

08003614 <_fstat_r>:
 8003614:	2300      	movs	r3, #0
 8003616:	b570      	push	{r4, r5, r6, lr}
 8003618:	4d06      	ldr	r5, [pc, #24]	@ (8003634 <_fstat_r+0x20>)
 800361a:	0004      	movs	r4, r0
 800361c:	0008      	movs	r0, r1
 800361e:	0011      	movs	r1, r2
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	f7fd fa13 	bl	8000a4c <_fstat>
 8003626:	1c43      	adds	r3, r0, #1
 8003628:	d103      	bne.n	8003632 <_fstat_r+0x1e>
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d000      	beq.n	8003632 <_fstat_r+0x1e>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	200002dc 	.word	0x200002dc

08003638 <_isatty_r>:
 8003638:	2300      	movs	r3, #0
 800363a:	b570      	push	{r4, r5, r6, lr}
 800363c:	4d06      	ldr	r5, [pc, #24]	@ (8003658 <_isatty_r+0x20>)
 800363e:	0004      	movs	r4, r0
 8003640:	0008      	movs	r0, r1
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	f7fd fa10 	bl	8000a68 <_isatty>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d103      	bne.n	8003654 <_isatty_r+0x1c>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d000      	beq.n	8003654 <_isatty_r+0x1c>
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	200002dc 	.word	0x200002dc

0800365c <_sbrk_r>:
 800365c:	2300      	movs	r3, #0
 800365e:	b570      	push	{r4, r5, r6, lr}
 8003660:	4d06      	ldr	r5, [pc, #24]	@ (800367c <_sbrk_r+0x20>)
 8003662:	0004      	movs	r4, r0
 8003664:	0008      	movs	r0, r1
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	f7fd fa12 	bl	8000a90 <_sbrk>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d103      	bne.n	8003678 <_sbrk_r+0x1c>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d000      	beq.n	8003678 <_sbrk_r+0x1c>
 8003676:	6023      	str	r3, [r4, #0]
 8003678:	bd70      	pop	{r4, r5, r6, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	200002dc 	.word	0x200002dc

08003680 <_init>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr

0800368c <_fini>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr
